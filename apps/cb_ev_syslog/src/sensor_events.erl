%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.18.10 on {{2016,2,2},{16,26,57}}
-module(sensor_events).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2]).
-export([merge_msgs/3]).
-export([verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_CbStringMsg.CbStringType'/1, 'enum_value_by_symbol_CbStringMsg.CbStringType'/1]).
-export(['enum_symbol_by_value_CbFileModMsg.CbFileModAction'/1, 'enum_value_by_symbol_CbFileModMsg.CbFileModAction'/1]).
-export(['enum_symbol_by_value_CbFileModMsg.CbFileType'/1, 'enum_value_by_symbol_CbFileModMsg.CbFileType'/1]).
-export(['enum_symbol_by_value_CbRegModMsg.CbRegModAction'/1, 'enum_value_by_symbol_CbRegModMsg.CbRegModAction'/1]).
-export(['enum_symbol_by_value_CbNetConnMsg.ProtocolType'/1, 'enum_value_by_symbol_CbNetConnMsg.ProtocolType'/1]).
-export(['enum_symbol_by_value_CbCrossProcessOpenMsg.OpenType'/1, 'enum_value_by_symbol_CbCrossProcessOpenMsg.OpenType'/1]).
-export(['enum_symbol_by_value_CbProcessBlockedMsg.BlockType'/1, 'enum_value_by_symbol_CbProcessBlockedMsg.BlockType'/1]).
-export(['enum_symbol_by_value_CbProcessBlockedMsg.BlockEvent'/1, 'enum_value_by_symbol_CbProcessBlockedMsg.BlockEvent'/1]).
-export(['enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'/1, 'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'/1]).
-export(['enum_symbol_by_value_CbNetConnBlockedMsg.NetconnBlockType'/1, 'enum_value_by_symbol_CbNetConnBlockedMsg.NetconnBlockType'/1]).
-export(['enum_symbol_by_value_CbNetConnBlockedMsg.ProtocolType'/1, 'enum_value_by_symbol_CbNetConnBlockedMsg.ProtocolType'/1]).
-export(['enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'/1, 'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'/1]).
-export(['enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'/1, 'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName);
      false -> ok
    end,
    case MsgName of
      'CbEndpointEnvironmentMsg' ->
	  e_msg_CbEndpointEnvironmentMsg(Msg);
      'CbFileModMsg' -> e_msg_CbFileModMsg(Msg);
      'CbTamperAlertMsg' -> e_msg_CbTamperAlertMsg(Msg);
      'CbVtWriteMsg' -> e_msg_CbVtWriteMsg(Msg);
      'CbModuleInfoMsg' -> e_msg_CbModuleInfoMsg(Msg);
      'CbLinStatsMsg' -> e_msg_CbLinStatsMsg(Msg);
      'CbChildProcessMsg' -> e_msg_CbChildProcessMsg(Msg);
      'CbCrossProcessOpenMsg' ->
	  e_msg_CbCrossProcessOpenMsg(Msg);
      'CbModuleLoadMsg' -> e_msg_CbModuleLoadMsg(Msg);
      'CbNetConnBlockedMsg' -> e_msg_CbNetConnBlockedMsg(Msg);
      'CbCreateRemoteThreadMsg' ->
	  e_msg_CbCreateRemoteThreadMsg(Msg);
      'CbRegModMsg' -> e_msg_CbRegModMsg(Msg);
      'CbStringMsg' -> e_msg_CbStringMsg(Msg);
      'CbHeaderMsg' -> e_msg_CbHeaderMsg(Msg);
      'CbEmetMitigationAction' ->
	  e_msg_CbEmetMitigationAction(Msg);
      'CbEmetMitigationMsg' -> e_msg_CbEmetMitigationMsg(Msg);
      'CbProcessBlockedMsg' -> e_msg_CbProcessBlockedMsg(Msg);
      'CbCrossProcessMsg' -> e_msg_CbCrossProcessMsg(Msg);
      'CbServerEnvironmentMsg' ->
	  e_msg_CbServerEnvironmentMsg(Msg);
      'CbEnvironmentMsg' -> e_msg_CbEnvironmentMsg(Msg);
      'CbVtLoadMsg' -> e_msg_CbVtLoadMsg(Msg);
      'CbStatisticsMsg' -> e_msg_CbStatisticsMsg(Msg);
      'CbNetConnMsg' -> e_msg_CbNetConnMsg(Msg);
      'CbProcessMsg' -> e_msg_CbProcessMsg(Msg);
      'CbEventMsg' -> e_msg_CbEventMsg(Msg)
    end.


'e_enum_CbStringMsg.CbStringType'(typeFilepath, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbStringMsg.CbStringType'(typeRegpath, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbStringMsg.CbStringType'(typeNetpath, Bin) ->
    <<Bin/binary, 3>>.

'e_enum_CbFileModMsg.CbFileModAction'(actionFileModCreate,
				      Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbFileModMsg.CbFileModAction'(actionFileModWrite,
				      Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbFileModMsg.CbFileModAction'(actionFileModDelete,
				      Bin) ->
    <<Bin/binary, 4>>;
'e_enum_CbFileModMsg.CbFileModAction'(actionFileModLastWrite,
				      Bin) ->
    <<Bin/binary, 8>>;
'e_enum_CbFileModMsg.CbFileModAction'(actionFileModOpen,
				      Bin) ->
    <<Bin/binary, 16>>.

'e_enum_CbFileModMsg.CbFileType'(filetypeUnknown,
				 Bin) ->
    <<Bin/binary, 0>>;
'e_enum_CbFileModMsg.CbFileType'(filetypePe, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeElf, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeUniversalBin,
				 Bin) ->
    <<Bin/binary, 3>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeEicar, Bin) ->
    <<Bin/binary, 8>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeOfficeLegacy,
				 Bin) ->
    <<Bin/binary, 16>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeOfficeOpenXml,
				 Bin) ->
    <<Bin/binary, 17>>;
'e_enum_CbFileModMsg.CbFileType'(filetypePdf, Bin) ->
    <<Bin/binary, 48>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchivePkzip,
				 Bin) ->
    <<Bin/binary, 64>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchiveLzh,
				 Bin) ->
    <<Bin/binary, 65>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchiveLzw,
				 Bin) ->
    <<Bin/binary, 66>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchiveRar,
				 Bin) ->
    <<Bin/binary, 67>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchiveTar,
				 Bin) ->
    <<Bin/binary, 68>>;
'e_enum_CbFileModMsg.CbFileType'(filetypeArchive7zip,
				 Bin) ->
    <<Bin/binary, 69>>.

'e_enum_CbRegModMsg.CbRegModAction'(actionRegModCreateKey,
				    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbRegModMsg.CbRegModAction'(actionRegModWriteValue,
				    Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbRegModMsg.CbRegModAction'(actionRegModDeleteKey,
				    Bin) ->
    <<Bin/binary, 4>>;
'e_enum_CbRegModMsg.CbRegModAction'(actionRegModDeleteValue,
				    Bin) ->
    <<Bin/binary, 8>>.

'e_enum_CbNetConnMsg.ProtocolType'('ProtoTcp', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_CbNetConnMsg.ProtocolType'('ProtoUdp', Bin) ->
    <<Bin/binary, 17>>.

'e_enum_CbCrossProcessOpenMsg.OpenType'('OpenProcessHandle',
					Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbCrossProcessOpenMsg.OpenType'('OpenThreadHandle',
					Bin) ->
    <<Bin/binary, 2>>.

'e_enum_CbProcessBlockedMsg.BlockType'('MD5Hash',
				       Bin) ->
    <<Bin/binary, 1>>.

'e_enum_CbProcessBlockedMsg.BlockEvent'('ProcessCreate',
					Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbProcessBlockedMsg.BlockEvent'('RunningProcess',
					Bin) ->
    <<Bin/binary, 2>>.

'e_enum_CbProcessBlockedMsg.BlockResult'('ProcessTerminated',
					 Bin) ->
    <<Bin/binary, 0>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedCBProcess',
					 Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedSystemProcess',
					 Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedCriticalSystemProcess',
					 Bin) ->
    <<Bin/binary, 3>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedWhitelistedPath',
					 Bin) ->
    <<Bin/binary, 4>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedOpenProcessError',
					 Bin) ->
    <<Bin/binary, 5>>;
'e_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedTerminateError',
					 Bin) ->
    <<Bin/binary, 6>>.

'e_enum_CbNetConnBlockedMsg.NetconnBlockType'('NetworkIsolation',
					      Bin) ->
    <<Bin/binary, 1>>.

'e_enum_CbNetConnBlockedMsg.ProtocolType'('ProtoTcp',
					  Bin) ->
    <<Bin/binary, 6>>;
'e_enum_CbNetConnBlockedMsg.ProtocolType'('ProtoUdp',
					  Bin) ->
    <<Bin/binary, 17>>.

'e_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCoreDriverUnloaded',
					    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertNetworkDriverUnloaded',
					    Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbServiceStopped',
					    Bin) ->
    <<Bin/binary, 3>>;
'e_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbProcessTerminated',
					    Bin) ->
    <<Bin/binary, 4>>;
'e_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbCodeInjection',
					    Bin) ->
    <<Bin/binary, 5>>.

'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDep,
						      Bin) ->
    <<Bin/binary, 1>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSehop,
						      Bin) ->
    <<Bin/binary, 2>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAsr,
						      Bin) ->
    <<Bin/binary, 3>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAslr,
						      Bin) ->
    <<Bin/binary, 4>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionNullPage,
						      Bin) ->
    <<Bin/binary, 5>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionHeapSpray,
						      Bin) ->
    <<Bin/binary, 6>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMandatoryAslr,
						      Bin) ->
    <<Bin/binary, 7>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEaf,
						      Bin) ->
    <<Bin/binary, 8>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEafPlus,
						      Bin) ->
    <<Bin/binary, 9>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBottomUpAslr,
						      Bin) ->
    <<Bin/binary, 10>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionLoadLibrary,
						      Bin) ->
    <<Bin/binary, 11>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMemoryProtection,
						      Bin) ->
    <<Bin/binary, 12>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSimulateExecFlow,
						      Bin) ->
    <<Bin/binary, 13>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionStackPivot,
						      Bin) ->
    <<Bin/binary, 14>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionCallerChecks,
						      Bin) ->
    <<Bin/binary, 15>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBannedFunctions,
						      Bin) ->
    <<Bin/binary, 16>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDeepHooks,
						      Bin) ->
    <<Bin/binary, 17>>;
'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAntiDetours,
						      Bin) ->
    <<Bin/binary, 18>>.

e_msg_CbEndpointEnvironmentMsg(Msg) ->
    e_msg_CbEndpointEnvironmentMsg(Msg, <<>>).


e_msg_CbEndpointEnvironmentMsg(#{'SensorId' := F1,
				 'SensorHostName' := F2, 'HostId' := F3},
			       Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int32(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_int64(F3, <<B2/binary, 24>>)
    end.

e_msg_CbFileModMsg(Msg) ->
    e_msg_CbFileModMsg(Msg, <<>>).


e_msg_CbFileModMsg(#{guid := F1, action := F2,
		     have_seen_before := F3, md5hash := F4, type := F5,
		     tamper := F6},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_enum_CbFileModMsg.CbFileModAction'(F2,
						      <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bytes(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_enum_CbFileModMsg.CbFileType'(F5, <<B4/binary, 40>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_bool(F6, <<B5/binary, 48>>)
    end.

e_msg_CbTamperAlertMsg(Msg) ->
    e_msg_CbTamperAlertMsg(Msg, <<>>).


e_msg_CbTamperAlertMsg(#{type := F1}, Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_enum_CbTamperAlertMsg.CbTamperAlertType'(F1,
						       <<Bin/binary, 8>>)
    end.

e_msg_CbVtWriteMsg(Msg) ->
    e_msg_CbVtWriteMsg(Msg, <<>>).


e_msg_CbVtWriteMsg(#{'WritingProcessExeMd5' := F1,
		     'FileWrittenMd5' := F2,
		     'FileWrittenIsPeModuleHint' := F3,
		     'WritingProcessFilename' := F4,
		     'FileWrittenFilename' := F5},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bytes(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bytes(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_string(F5, <<B4/binary, 42>>)
    end.

e_msg_CbModuleInfoMsg(Msg) ->
    e_msg_CbModuleInfoMsg(Msg, <<>>).


e_msg_CbModuleInfoMsg(#{md5 := F1,
			'CopiedModuleLength' := F2,
			'OriginalModuleLength' := F3,
			utf8_FileDescription := F4, utf8_CompanyName := F5,
			utf8_ProductName := F6, utf8_FileVersion := F7,
			utf8_Comments := F8, utf8_LegalCopyright := F9,
			utf8_LegalTrademark := F10, utf8_InternalName := F11,
			utf8_OriginalFileName := F12,
			utf8_ProductDescription := F13,
			utf8_ProductVersion := F14, utf8_PrivateBuild := F15,
			utf8_SpecialBuild := F16, utf8_DigSig_Publisher := F17,
			utf8_DigSig_ProgramName := F18,
			utf8_DigSig_IssuerName := F19,
			utf8_DigSig_SubjectName := F20,
			utf8_DigSig_Result := F21,
			utf8_DigSig_ResultCode := F22,
			utf8_DigSig_SignTime := F23, 'Icon' := F24,
			'ImageFileHeader' := F25, utf8_OnDiskFilename := F26},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bytes(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_string(F8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_string(F9, <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_string(F10, <<B9/binary, 82>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_string(F11, <<B10/binary, 90>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_string(F12, <<B11/binary, 98>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_string(F13, <<B12/binary, 106>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_string(F14, <<B13/binary, 114>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_type_string(F15, <<B14/binary, 122>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_type_string(F16, <<B15/binary, 130, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_type_string(F17, <<B16/binary, 138, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_type_string(F18, <<B17/binary, 146, 1>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_type_string(F19, <<B18/binary, 154, 1>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_type_string(F20, <<B19/binary, 162, 1>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_type_string(F21, <<B20/binary, 170, 1>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_type_string(F22, <<B21/binary, 178, 1>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_type_string(F23, <<B22/binary, 186, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_type_bytes(F24, <<B23/binary, 194, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_type_bytes(F25, <<B24/binary, 202, 1>>)
	  end,
    if F26 == undefined -> B25;
       true -> e_type_string(F26, <<B25/binary, 210, 1>>)
    end.

e_msg_CbLinStatsMsg(Msg) ->
    e_msg_CbLinStatsMsg(Msg, <<>>).


e_msg_CbLinStatsMsg(#{lin_total := F1,
		      lin_successful := F2, lin_no_scanidi := F3,
		      lin_total_pended := F4,
		      lin_current_scanid_pended_size := F5,
		      lin_current_handlepath_pended_size := F6,
		      lin_current_filepath_pended_size := F7},
		    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int32(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int32(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int32(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int32(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int32(F6, <<B5/binary, 48>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_int32(F7, <<B6/binary, 56>>)
    end.

e_msg_CbChildProcessMsg(Msg) ->
    e_msg_CbChildProcessMsg(Msg, <<>>).


e_msg_CbChildProcessMsg(#{created := F1,
			  parent_guid := F2, md5hash := F3, child_guid := F4,
			  path := F5, pid := F6, create_time := F7,
			  tamper := F8},
			Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bool(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bytes(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int64(F7, <<B6/binary, 56>>)
	 end,
    if F8 == undefined -> B7;
       true -> e_type_bool(F8, <<B7/binary, 64>>)
    end.

e_msg_CbCrossProcessOpenMsg(Msg) ->
    e_msg_CbCrossProcessOpenMsg(Msg, <<>>).


e_msg_CbCrossProcessOpenMsg(#{type := F1,
			      targetPid := F2, targetProcCreateTime := F3,
			      requestedAccess := F4, targetProcPath := F5,
			      targetProcMd5 := F6},
			    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_CbCrossProcessOpenMsg.OpenType'(F1,
							<<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_bytes(F6, <<B5/binary, 50>>)
    end.

e_msg_CbModuleLoadMsg(Msg) ->
    e_msg_CbModuleLoadMsg(Msg, <<>>).


e_msg_CbModuleLoadMsg(#{guid := F1,
			handlepath_string_guid := F2, md5hash := F3,
			scanid := F4, is_process_base_module := F5,
			image_base := F6, image_size := F7},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bytes(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int32(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bool(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_varint(F7, <<B6/binary, 56>>)
    end.

e_msg_CbNetConnBlockedMsg(Msg) ->
    e_msg_CbNetConnBlockedMsg(Msg, <<>>).


e_msg_CbNetConnBlockedMsg(#{blockedType := F1,
			    ipv4Address := F2, ipv6LoPart := F3,
			    ipv6HiPart := F4, port := F5, protocol := F6,
			    utf8_netpath := F7, outbound := F8,
			    proxyConnection := F9, proxyIpv4Address := F10,
			    proxyPort := F11, proxyNetPath := F12,
			    remoteIpAddress := F13, remotePort := F14,
			    localIpAddress := F15, localPort := F16},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_CbNetConnBlockedMsg.NetconnBlockType'(F1,
							      <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_enum_CbNetConnBlockedMsg.ProtocolType'(F6,
							  <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bytes(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bool(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_bool(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_string(F12, <<B11/binary, 98>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_varint(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_varint(F14, <<B13/binary, 112>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 120>>)
	  end,
    if F16 == undefined -> B15;
       true -> e_varint(F16, <<B15/binary, 128, 1>>)
    end.

e_msg_CbCreateRemoteThreadMsg(Msg) ->
    e_msg_CbCreateRemoteThreadMsg(Msg, <<>>).


e_msg_CbCreateRemoteThreadMsg(#{remoteProcPid := F1,
				remoteProcCreateTime := F2,
				remoteProcPath := F3, remoteProcMd5 := F4},
			      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true -> e_type_bytes(F4, <<B3/binary, 34>>)
    end.

e_msg_CbRegModMsg(Msg) -> e_msg_CbRegModMsg(Msg, <<>>).


e_msg_CbRegModMsg(#{guid := F1, action := F2,
		    have_seen_before := F3, utf8_regpath := F4,
		    tamper := F5},
		  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_enum_CbRegModMsg.CbRegModAction'(F2,
						    <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bytes(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_bool(F5, <<B4/binary, 40>>)
    end.

e_msg_CbStringMsg(Msg) -> e_msg_CbStringMsg(Msg, <<>>).


e_msg_CbStringMsg(#{guid := F1, utf8string := F2,
		    string_type := F3},
		  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bytes(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_enum_CbStringMsg.CbStringType'(F3, <<B2/binary, 24>>)
    end.

e_msg_CbHeaderMsg(Msg) -> e_msg_CbHeaderMsg(Msg, <<>>).


e_msg_CbHeaderMsg(#{version := F1, bootid := F2,
		    eventid := F3, timestamp := F4, process_guid := F5,
		    filepath_string_guid := F6, magic := F7,
		    process_filepath_string_guid := F8,
		    process_create_time := F9, process_pid := F10,
		    process_md5 := F11, process_path := F12},
		  Bin) ->
    B1 = e_type_int32(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int32(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_int64(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_int64(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_int32(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_bytes(F11, <<B10/binary, 90>>)
	  end,
    if F12 == undefined -> B11;
       true -> e_type_string(F12, <<B11/binary, 98>>)
    end.

e_msg_CbEmetMitigationAction(Msg) ->
    e_msg_CbEmetMitigationAction(Msg, <<>>).


e_msg_CbEmetMitigationAction(#{mitigationType := F1},
			     Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(F1,
								 <<Bin/binary,
								   8>>)
    end.

e_msg_CbEmetMitigationMsg(Msg) ->
    e_msg_CbEmetMitigationMsg(Msg, <<>>).


e_msg_CbEmetMitigationMsg(#{emetId := F1,
			    emetTimstamp := F2, action := F3, actionText := F4,
			    blocked := F5},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_CbEmetMitigationMsg_action(F3,
						    <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_bool(F5, <<B4/binary, 40>>)
    end.

e_msg_CbProcessBlockedMsg(Msg) ->
    e_msg_CbProcessBlockedMsg(Msg, <<>>).


e_msg_CbProcessBlockedMsg(#{blockedType := F1,
			    blockedEvent := F2, blockedmd5Hash := F3,
			    blockedPath := F4, blockResult := F5,
			    blockError := F6, blockedPid := F7,
			    blockedProcCreateTime := F8, blockedCmdline := F9,
			    blockedUid := F10, blockedUsername := F11},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_CbProcessBlockedMsg.BlockType'(F1,
						       <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_enum_CbProcessBlockedMsg.BlockEvent'(F2,
							<<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bytes(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_enum_CbProcessBlockedMsg.BlockResult'(F5,
							 <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int32(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_string(F9, <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_string(F10, <<B9/binary, 82>>)
	  end,
    if F11 == undefined -> B10;
       true -> e_type_string(F11, <<B10/binary, 90>>)
    end.

e_msg_CbCrossProcessMsg(Msg) ->
    e_msg_CbCrossProcessMsg(Msg, <<>>).


e_msg_CbCrossProcessMsg(#{open := F1,
			  remotethread := F2, tamper := F3},
			Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_CbCrossProcessMsg_open(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_CbCrossProcessMsg_remotethread(F2,
							<<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_bool(F3, <<B2/binary, 24>>)
    end.

e_msg_CbServerEnvironmentMsg(Msg) ->
    e_msg_CbServerEnvironmentMsg(Msg, <<>>).


e_msg_CbServerEnvironmentMsg(#{'NodeId' := F1}, Bin) ->
    if F1 == undefined -> Bin;
       true -> e_type_int32(F1, <<Bin/binary, 8>>)
    end.

e_msg_CbEnvironmentMsg(Msg) ->
    e_msg_CbEnvironmentMsg(Msg, <<>>).


e_msg_CbEnvironmentMsg(#{endpoint := F1, server := F2},
		       Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_CbEnvironmentMsg_endpoint(F1,
						   <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   e_mfield_CbEnvironmentMsg_server(F2, <<B1/binary, 18>>)
    end.

e_msg_CbVtLoadMsg(Msg) -> e_msg_CbVtLoadMsg(Msg, <<>>).


e_msg_CbVtLoadMsg(#{'LoaderProcessExeMd5' := F1,
		    'LoadedModuleMd5' := F2},
		  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bytes(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_CbStatisticsMsg(Msg) ->
    e_msg_CbStatisticsMsg(Msg, <<>>).


e_msg_CbStatisticsMsg(#{lin_stats := F1}, Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   e_mfield_CbStatisticsMsg_lin_stats(F1,
					      <<Bin/binary, 10>>)
    end.

e_msg_CbNetConnMsg(Msg) ->
    e_msg_CbNetConnMsg(Msg, <<>>).


e_msg_CbNetConnMsg(#{guid := F1, ipv4Address := F2,
		     ipv6LoPart := F3, ipv6HiPart := F4, port := F5,
		     protocol := F6, utf8_netpath := F7, outbound := F8,
		     proxyConnection := F9, proxyIpv4Address := F10,
		     proxyPort := F11, proxyNetPath := F12,
		     remoteIpAddress := F13, remotePort := F14,
		     localIpAddress := F15, localPort := F16},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		'e_enum_CbNetConnMsg.ProtocolType'(F6,
						   <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bytes(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bool(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_bool(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_string(F12, <<B11/binary, 98>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_varint(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_varint(F14, <<B13/binary, 112>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 120>>)
	  end,
    if F16 == undefined -> B15;
       true -> e_varint(F16, <<B15/binary, 128, 1>>)
    end.

e_msg_CbProcessMsg(Msg) ->
    e_msg_CbProcessMsg(Msg, <<>>).


e_msg_CbProcessMsg(#{pid := F1, created := F2,
		     parent_pid := F3, parent_create_time := F4,
		     parent_guid := F5, md5hash := F6,
		     have_seen_before := F7, deprecated := F8,
		     commandline := F9, parent_md5 := F10,
		     parent_path := F11, creationobserved := F12,
		     expect_followon_w_md5 := F13, uid := F14,
		     username := F15, actions := F16,
		     actionsAreFromGPO := F17},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int32(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int32(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bytes(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bool(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_int64(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_bytes(F9, <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_bytes(F10, <<B9/binary, 82>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_string(F11, <<B10/binary, 90>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_bool(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_bool(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_string(F14, <<B13/binary, 114>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_type_string(F15, <<B14/binary, 122>>)
	  end,
    B16 = if F16 == [] -> B15;
	     true -> e_field_CbProcessMsg_actions(F16, B15)
	  end,
    if F17 == undefined -> B16;
       true -> e_type_bool(F17, <<B16/binary, 136, 1>>)
    end.

e_msg_CbEventMsg(Msg) -> e_msg_CbEventMsg(Msg, <<>>).


e_msg_CbEventMsg(#{header := F1, strings := F2,
		   process := F3, modload := F4, filemod := F5,
		   network := F6, regmod := F7, stats := F8, module := F9,
		   vtwrite := F10, vtload := F11, childproc := F12,
		   env := F13, crossproc := F14, tamperAlert := F15,
		   blocked := F16, emet := F17, netconnBlocked := F18},
		 Bin) ->
    B1 = e_mfield_CbEventMsg_header(F1, <<Bin/binary, 10>>),
    B2 = if F2 == [] -> B1;
	    true -> e_field_CbEventMsg_strings(F2, B1)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_CbEventMsg_process(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_CbEventMsg_modload(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_CbEventMsg_filemod(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		e_mfield_CbEventMsg_network(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		e_mfield_CbEventMsg_regmod(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_mfield_CbEventMsg_stats(F8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		e_mfield_CbEventMsg_module(F9, <<B8/binary, 74>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 e_mfield_CbEventMsg_vtwrite(F10, <<B9/binary, 82>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 e_mfield_CbEventMsg_vtload(F11, <<B10/binary, 90>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 e_mfield_CbEventMsg_childproc(F12, <<B11/binary, 98>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 e_mfield_CbEventMsg_env(F13, <<B12/binary, 106>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 e_mfield_CbEventMsg_crossproc(F14, <<B13/binary, 114>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 e_mfield_CbEventMsg_tamperAlert(F15,
						 <<B14/binary, 122>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 e_mfield_CbEventMsg_blocked(F16, <<B15/binary, 130, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 e_mfield_CbEventMsg_emet(F17, <<B16/binary, 138, 1>>)
	  end,
    if F18 == undefined -> B17;
       true ->
	   e_mfield_CbEventMsg_netconnBlocked(F18,
					      <<B17/binary, 146, 1>>)
    end.

e_mfield_CbEmetMitigationMsg_action(Msg, Bin) ->
    SubBin = e_msg_CbEmetMitigationAction(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbCrossProcessMsg_open(Msg, Bin) ->
    SubBin = e_msg_CbCrossProcessOpenMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbCrossProcessMsg_remotethread(Msg, Bin) ->
    SubBin = e_msg_CbCreateRemoteThreadMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEnvironmentMsg_endpoint(Msg, Bin) ->
    SubBin = e_msg_CbEndpointEnvironmentMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEnvironmentMsg_server(Msg, Bin) ->
    SubBin = e_msg_CbServerEnvironmentMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbStatisticsMsg_lin_stats(Msg, Bin) ->
    SubBin = e_msg_CbLinStatsMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbProcessMsg_actions(Msg, Bin) ->
    SubBin = e_msg_CbEmetMitigationAction(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CbProcessMsg_actions([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 130, 1>>,
    Bin3 = e_mfield_CbProcessMsg_actions(Elem, Bin2),
    e_field_CbProcessMsg_actions(Rest, Bin3);
e_field_CbProcessMsg_actions([], Bin) -> Bin.

e_mfield_CbEventMsg_header(Msg, Bin) ->
    SubBin = e_msg_CbHeaderMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_strings(Msg, Bin) ->
    SubBin = e_msg_CbStringMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CbEventMsg_strings([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_CbEventMsg_strings(Elem, Bin2),
    e_field_CbEventMsg_strings(Rest, Bin3);
e_field_CbEventMsg_strings([], Bin) -> Bin.

e_mfield_CbEventMsg_process(Msg, Bin) ->
    SubBin = e_msg_CbProcessMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_modload(Msg, Bin) ->
    SubBin = e_msg_CbModuleLoadMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_filemod(Msg, Bin) ->
    SubBin = e_msg_CbFileModMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_network(Msg, Bin) ->
    SubBin = e_msg_CbNetConnMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_regmod(Msg, Bin) ->
    SubBin = e_msg_CbRegModMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_stats(Msg, Bin) ->
    SubBin = e_msg_CbStatisticsMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_module(Msg, Bin) ->
    SubBin = e_msg_CbModuleInfoMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_vtwrite(Msg, Bin) ->
    SubBin = e_msg_CbVtWriteMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_vtload(Msg, Bin) ->
    SubBin = e_msg_CbVtLoadMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_childproc(Msg, Bin) ->
    SubBin = e_msg_CbChildProcessMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_env(Msg, Bin) ->
    SubBin = e_msg_CbEnvironmentMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_crossproc(Msg, Bin) ->
    SubBin = e_msg_CbCrossProcessMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_tamperAlert(Msg, Bin) ->
    SubBin = e_msg_CbTamperAlertMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_blocked(Msg, Bin) ->
    SubBin = e_msg_CbProcessBlockedMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_emet(Msg, Bin) ->
    SubBin = e_msg_CbEmetMitigationMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CbEventMsg_netconnBlocked(Msg, Bin) ->
    SubBin = e_msg_CbNetConnBlockedMsg(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'CbEndpointEnvironmentMsg' ->
	  d_msg_CbEndpointEnvironmentMsg(Bin);
      'CbFileModMsg' -> d_msg_CbFileModMsg(Bin);
      'CbTamperAlertMsg' -> d_msg_CbTamperAlertMsg(Bin);
      'CbVtWriteMsg' -> d_msg_CbVtWriteMsg(Bin);
      'CbModuleInfoMsg' -> d_msg_CbModuleInfoMsg(Bin);
      'CbLinStatsMsg' -> d_msg_CbLinStatsMsg(Bin);
      'CbChildProcessMsg' -> d_msg_CbChildProcessMsg(Bin);
      'CbCrossProcessOpenMsg' ->
	  d_msg_CbCrossProcessOpenMsg(Bin);
      'CbModuleLoadMsg' -> d_msg_CbModuleLoadMsg(Bin);
      'CbNetConnBlockedMsg' -> d_msg_CbNetConnBlockedMsg(Bin);
      'CbCreateRemoteThreadMsg' ->
	  d_msg_CbCreateRemoteThreadMsg(Bin);
      'CbRegModMsg' -> d_msg_CbRegModMsg(Bin);
      'CbStringMsg' -> d_msg_CbStringMsg(Bin);
      'CbHeaderMsg' -> d_msg_CbHeaderMsg(Bin);
      'CbEmetMitigationAction' ->
	  d_msg_CbEmetMitigationAction(Bin);
      'CbEmetMitigationMsg' -> d_msg_CbEmetMitigationMsg(Bin);
      'CbProcessBlockedMsg' -> d_msg_CbProcessBlockedMsg(Bin);
      'CbCrossProcessMsg' -> d_msg_CbCrossProcessMsg(Bin);
      'CbServerEnvironmentMsg' ->
	  d_msg_CbServerEnvironmentMsg(Bin);
      'CbEnvironmentMsg' -> d_msg_CbEnvironmentMsg(Bin);
      'CbVtLoadMsg' -> d_msg_CbVtLoadMsg(Bin);
      'CbStatisticsMsg' -> d_msg_CbStatisticsMsg(Bin);
      'CbNetConnMsg' -> d_msg_CbNetConnMsg(Bin);
      'CbProcessMsg' -> d_msg_CbProcessMsg(Bin);
      'CbEventMsg' -> d_msg_CbEventMsg(Bin)
    end.



'd_enum_CbStringMsg.CbStringType'(1) -> typeFilepath;
'd_enum_CbStringMsg.CbStringType'(2) -> typeRegpath;
'd_enum_CbStringMsg.CbStringType'(3) -> typeNetpath.

'd_enum_CbFileModMsg.CbFileModAction'(1) ->
    actionFileModCreate;
'd_enum_CbFileModMsg.CbFileModAction'(2) ->
    actionFileModWrite;
'd_enum_CbFileModMsg.CbFileModAction'(4) ->
    actionFileModDelete;
'd_enum_CbFileModMsg.CbFileModAction'(8) ->
    actionFileModLastWrite;
'd_enum_CbFileModMsg.CbFileModAction'(16) ->
    actionFileModOpen.

'd_enum_CbFileModMsg.CbFileType'(0) -> filetypeUnknown;
'd_enum_CbFileModMsg.CbFileType'(1) -> filetypePe;
'd_enum_CbFileModMsg.CbFileType'(2) -> filetypeElf;
'd_enum_CbFileModMsg.CbFileType'(3) ->
    filetypeUniversalBin;
'd_enum_CbFileModMsg.CbFileType'(8) -> filetypeEicar;
'd_enum_CbFileModMsg.CbFileType'(16) ->
    filetypeOfficeLegacy;
'd_enum_CbFileModMsg.CbFileType'(17) ->
    filetypeOfficeOpenXml;
'd_enum_CbFileModMsg.CbFileType'(48) -> filetypePdf;
'd_enum_CbFileModMsg.CbFileType'(64) ->
    filetypeArchivePkzip;
'd_enum_CbFileModMsg.CbFileType'(65) ->
    filetypeArchiveLzh;
'd_enum_CbFileModMsg.CbFileType'(66) ->
    filetypeArchiveLzw;
'd_enum_CbFileModMsg.CbFileType'(67) ->
    filetypeArchiveRar;
'd_enum_CbFileModMsg.CbFileType'(68) ->
    filetypeArchiveTar;
'd_enum_CbFileModMsg.CbFileType'(69) ->
    filetypeArchive7zip.

'd_enum_CbRegModMsg.CbRegModAction'(1) ->
    actionRegModCreateKey;
'd_enum_CbRegModMsg.CbRegModAction'(2) ->
    actionRegModWriteValue;
'd_enum_CbRegModMsg.CbRegModAction'(4) ->
    actionRegModDeleteKey;
'd_enum_CbRegModMsg.CbRegModAction'(8) ->
    actionRegModDeleteValue.

'd_enum_CbNetConnMsg.ProtocolType'(6) -> 'ProtoTcp';
'd_enum_CbNetConnMsg.ProtocolType'(17) -> 'ProtoUdp'.

'd_enum_CbCrossProcessOpenMsg.OpenType'(1) ->
    'OpenProcessHandle';
'd_enum_CbCrossProcessOpenMsg.OpenType'(2) ->
    'OpenThreadHandle'.

'd_enum_CbProcessBlockedMsg.BlockType'(1) -> 'MD5Hash'.

'd_enum_CbProcessBlockedMsg.BlockEvent'(1) ->
    'ProcessCreate';
'd_enum_CbProcessBlockedMsg.BlockEvent'(2) ->
    'RunningProcess'.

'd_enum_CbProcessBlockedMsg.BlockResult'(0) ->
    'ProcessTerminated';
'd_enum_CbProcessBlockedMsg.BlockResult'(1) ->
    'NotTerminatedCBProcess';
'd_enum_CbProcessBlockedMsg.BlockResult'(2) ->
    'NotTerminatedSystemProcess';
'd_enum_CbProcessBlockedMsg.BlockResult'(3) ->
    'NotTerminatedCriticalSystemProcess';
'd_enum_CbProcessBlockedMsg.BlockResult'(4) ->
    'NotTerminatedWhitelistedPath';
'd_enum_CbProcessBlockedMsg.BlockResult'(5) ->
    'NotTerminatedOpenProcessError';
'd_enum_CbProcessBlockedMsg.BlockResult'(6) ->
    'NotTerminatedTerminateError'.

'd_enum_CbNetConnBlockedMsg.NetconnBlockType'(1) ->
    'NetworkIsolation'.

'd_enum_CbNetConnBlockedMsg.ProtocolType'(6) ->
    'ProtoTcp';
'd_enum_CbNetConnBlockedMsg.ProtocolType'(17) ->
    'ProtoUdp'.

'd_enum_CbTamperAlertMsg.CbTamperAlertType'(1) ->
    'AlertCoreDriverUnloaded';
'd_enum_CbTamperAlertMsg.CbTamperAlertType'(2) ->
    'AlertNetworkDriverUnloaded';
'd_enum_CbTamperAlertMsg.CbTamperAlertType'(3) ->
    'AlertCbServiceStopped';
'd_enum_CbTamperAlertMsg.CbTamperAlertType'(4) ->
    'AlertCbProcessTerminated';
'd_enum_CbTamperAlertMsg.CbTamperAlertType'(5) ->
    'AlertCbCodeInjection'.

'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(1) ->
    actionDep;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(2) ->
    actionSehop;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(3) ->
    actionAsr;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(4) ->
    actionAslr;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(5) ->
    actionNullPage;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(6) ->
    actionHeapSpray;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(7) ->
    actionMandatoryAslr;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(8) ->
    actionEaf;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(9) ->
    actionEafPlus;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(10) ->
    actionBottomUpAslr;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(11) ->
    actionLoadLibrary;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(12) ->
    actionMemoryProtection;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(13) ->
    actionSimulateExecFlow;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(14) ->
    actionStackPivot;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(15) ->
    actionCallerChecks;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(16) ->
    actionBannedFunctions;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(17) ->
    actionDeepHooks;
'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(18) ->
    actionAntiDetours.

d_msg_CbEndpointEnvironmentMsg(Bin) ->
    dfp_read_field_def_CbEndpointEnvironmentMsg(Bin, 0, 0,
						undefined, undefined,
						undefined).

dfp_read_field_def_CbEndpointEnvironmentMsg(<<8,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_CbEndpointEnvironmentMsg_SensorId(Rest, Z1, Z2,
					      F1, F2, F3);
dfp_read_field_def_CbEndpointEnvironmentMsg(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_CbEndpointEnvironmentMsg_SensorHostName(Rest,
						    Z1, Z2, F1, F2, F3);
dfp_read_field_def_CbEndpointEnvironmentMsg(<<24,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_CbEndpointEnvironmentMsg_HostId(Rest, Z1, Z2,
					    F1, F2, F3);
dfp_read_field_def_CbEndpointEnvironmentMsg(<<>>, 0, 0,
					    F1, F2, F3) ->
    #{'SensorId' => F1, 'SensorHostName' => F2,
      'HostId' => F3};
dfp_read_field_def_CbEndpointEnvironmentMsg(Other, Z1,
					    Z2, F1, F2, F3) ->
    dg_read_field_def_CbEndpointEnvironmentMsg(Other, Z1,
					       Z2, F1, F2, F3).

dg_read_field_def_CbEndpointEnvironmentMsg(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_CbEndpointEnvironmentMsg(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3);
dg_read_field_def_CbEndpointEnvironmentMsg(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbEndpointEnvironmentMsg_SensorId(Rest, 0, 0,
						    F1, F2, F3);
      18 ->
	  d_field_CbEndpointEnvironmentMsg_SensorHostName(Rest, 0,
							  0, F1, F2, F3);
      24 ->
	  d_field_CbEndpointEnvironmentMsg_HostId(Rest, 0, 0, F1,
						  F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbEndpointEnvironmentMsg(Rest, 0, 0, F1, F2,
						     F3);
	    1 ->
		skip_64_CbEndpointEnvironmentMsg(Rest, 0, 0, F1, F2,
						 F3);
	    2 ->
		skip_length_delimited_CbEndpointEnvironmentMsg(Rest, 0,
							       0, F1, F2, F3);
	    5 ->
		skip_32_CbEndpointEnvironmentMsg(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_CbEndpointEnvironmentMsg(<<>>, 0, 0,
					   F1, F2, F3) ->
    #{'SensorId' => F1, 'SensorHostName' => F2,
      'HostId' => F3}.

d_field_CbEndpointEnvironmentMsg_SensorId(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbEndpointEnvironmentMsg_SensorId(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3);
d_field_CbEndpointEnvironmentMsg_SensorId(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F2, F3) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest, 0, 0,
						NewFValue, F2, F3).


d_field_CbEndpointEnvironmentMsg_SensorHostName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbEndpointEnvironmentMsg_SensorHostName(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3);
d_field_CbEndpointEnvironmentMsg_SensorHostName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest2, 0, 0,
						F1, NewFValue, F3).


d_field_CbEndpointEnvironmentMsg_HostId(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbEndpointEnvironmentMsg_HostId(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
d_field_CbEndpointEnvironmentMsg_HostId(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest, 0, 0,
						F1, F2, NewFValue).


skip_varint_CbEndpointEnvironmentMsg(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    skip_varint_CbEndpointEnvironmentMsg(Rest, Z1, Z2, F1,
					 F2, F3);
skip_varint_CbEndpointEnvironmentMsg(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest, Z1,
						Z2, F1, F2, F3).


skip_length_delimited_CbEndpointEnvironmentMsg(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_CbEndpointEnvironmentMsg(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
skip_length_delimited_CbEndpointEnvironmentMsg(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest2, 0, 0,
						F1, F2, F3).


skip_32_CbEndpointEnvironmentMsg(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest, Z1,
						Z2, F1, F2, F3).


skip_64_CbEndpointEnvironmentMsg(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_CbEndpointEnvironmentMsg(Rest, Z1,
						Z2, F1, F2, F3).


d_msg_CbFileModMsg(Bin) ->
    dfp_read_field_def_CbFileModMsg(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined).

dfp_read_field_def_CbFileModMsg(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_guid(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
dfp_read_field_def_CbFileModMsg(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_action(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6);
dfp_read_field_def_CbFileModMsg(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_have_seen_before(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6);
dfp_read_field_def_CbFileModMsg(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_md5hash(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6);
dfp_read_field_def_CbFileModMsg(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_type(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
dfp_read_field_def_CbFileModMsg(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbFileModMsg_tamper(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6);
dfp_read_field_def_CbFileModMsg(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6) ->
    #{guid => F1, action => F2, have_seen_before => F3,
      md5hash => F4, type => F5, tamper => F6};
dfp_read_field_def_CbFileModMsg(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6) ->
    dg_read_field_def_CbFileModMsg(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6).

dg_read_field_def_CbFileModMsg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_CbFileModMsg(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_CbFileModMsg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbFileModMsg_guid(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6);
      16 ->
	  d_field_CbFileModMsg_action(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6);
      24 ->
	  d_field_CbFileModMsg_have_seen_before(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6);
      34 ->
	  d_field_CbFileModMsg_md5hash(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6);
      40 ->
	  d_field_CbFileModMsg_type(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6);
      48 ->
	  d_field_CbFileModMsg_tamper(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbFileModMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6);
	    1 ->
		skip_64_CbFileModMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
				     F6);
	    2 ->
		skip_length_delimited_CbFileModMsg(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6);
	    5 ->
		skip_32_CbFileModMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_CbFileModMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6) ->
    #{guid => F1, action => F2, have_seen_before => F3,
      md5hash => F4, type => F5, tamper => F6}.

d_field_CbFileModMsg_guid(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_guid(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6);
d_field_CbFileModMsg_guid(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, F6) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbFileModMsg(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6).


d_field_CbFileModMsg_action(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_action(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6);
d_field_CbFileModMsg_action(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbFileModMsg.CbFileModAction'(Tmp),
    dfp_read_field_def_CbFileModMsg(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6).


d_field_CbFileModMsg_have_seen_before(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_have_seen_before(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  F6);
d_field_CbFileModMsg_have_seen_before(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, F4, F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbFileModMsg(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6).


d_field_CbFileModMsg_md5hash(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_md5hash(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6);
d_field_CbFileModMsg_md5hash(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, _, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbFileModMsg(Rest2, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6).


d_field_CbFileModMsg_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_type(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6);
d_field_CbFileModMsg_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbFileModMsg.CbFileType'(Tmp),
    dfp_read_field_def_CbFileModMsg(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6).


d_field_CbFileModMsg_tamper(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbFileModMsg_tamper(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6);
d_field_CbFileModMsg_tamper(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbFileModMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue).


skip_varint_CbFileModMsg(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_CbFileModMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
skip_varint_CbFileModMsg(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbFileModMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


skip_length_delimited_CbFileModMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_CbFileModMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_CbFileModMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbFileModMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6).


skip_32_CbFileModMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbFileModMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


skip_64_CbFileModMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbFileModMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


d_msg_CbTamperAlertMsg(Bin) ->
    dfp_read_field_def_CbTamperAlertMsg(Bin, 0, 0,
					undefined).

dfp_read_field_def_CbTamperAlertMsg(<<8, Rest/binary>>,
				    Z1, Z2, F1) ->
    d_field_CbTamperAlertMsg_type(Rest, Z1, Z2, F1);
dfp_read_field_def_CbTamperAlertMsg(<<>>, 0, 0, F1) ->
    #{type => F1};
dfp_read_field_def_CbTamperAlertMsg(Other, Z1, Z2,
				    F1) ->
    dg_read_field_def_CbTamperAlertMsg(Other, Z1, Z2, F1).

dg_read_field_def_CbTamperAlertMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_CbTamperAlertMsg(Rest, N + 7,
				       X bsl N + Acc, F1);
dg_read_field_def_CbTamperAlertMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_CbTamperAlertMsg_type(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbTamperAlertMsg(Rest, 0, 0, F1);
	    1 -> skip_64_CbTamperAlertMsg(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_CbTamperAlertMsg(Rest, 0, 0, F1);
	    5 -> skip_32_CbTamperAlertMsg(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_CbTamperAlertMsg(<<>>, 0, 0, F1) ->
    #{type => F1}.

d_field_CbTamperAlertMsg_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_CbTamperAlertMsg_type(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_CbTamperAlertMsg_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbTamperAlertMsg.CbTamperAlertType'(Tmp),
    dfp_read_field_def_CbTamperAlertMsg(Rest, 0, 0,
					NewFValue).


skip_varint_CbTamperAlertMsg(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    skip_varint_CbTamperAlertMsg(Rest, Z1, Z2, F1);
skip_varint_CbTamperAlertMsg(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    dfp_read_field_def_CbTamperAlertMsg(Rest, Z1, Z2, F1).


skip_length_delimited_CbTamperAlertMsg(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_CbTamperAlertMsg(Rest, N + 7,
					   X bsl N + Acc, F1);
skip_length_delimited_CbTamperAlertMsg(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbTamperAlertMsg(Rest2, 0, 0, F1).


skip_32_CbTamperAlertMsg(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_CbTamperAlertMsg(Rest, Z1, Z2, F1).


skip_64_CbTamperAlertMsg(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_CbTamperAlertMsg(Rest, Z1, Z2, F1).


d_msg_CbVtWriteMsg(Bin) ->
    dfp_read_field_def_CbVtWriteMsg(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined).

dfp_read_field_def_CbVtWriteMsg(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_CbVtWriteMsg_WritingProcessExeMd5(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
dfp_read_field_def_CbVtWriteMsg(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_CbVtWriteMsg_FileWrittenMd5(Rest, Z1, Z2, F1,
					F2, F3, F4, F5);
dfp_read_field_def_CbVtWriteMsg(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_CbVtWriteMsg_FileWrittenIsPeModuleHint(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_CbVtWriteMsg(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_CbVtWriteMsg_WritingProcessFilename(Rest, Z1,
						Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_CbVtWriteMsg(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_CbVtWriteMsg_FileWrittenFilename(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5);
dfp_read_field_def_CbVtWriteMsg(<<>>, 0, 0, F1, F2, F3,
				F4, F5) ->
    #{'WritingProcessExeMd5' => F1, 'FileWrittenMd5' => F2,
      'FileWrittenIsPeModuleHint' => F3,
      'WritingProcessFilename' => F4,
      'FileWrittenFilename' => F5};
dfp_read_field_def_CbVtWriteMsg(Other, Z1, Z2, F1, F2,
				F3, F4, F5) ->
    dg_read_field_def_CbVtWriteMsg(Other, Z1, Z2, F1, F2,
				   F3, F4, F5).

dg_read_field_def_CbVtWriteMsg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_CbVtWriteMsg(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_CbVtWriteMsg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbVtWriteMsg_WritingProcessExeMd5(Rest, 0, 0,
						    F1, F2, F3, F4, F5);
      18 ->
	  d_field_CbVtWriteMsg_FileWrittenMd5(Rest, 0, 0, F1, F2,
					      F3, F4, F5);
      24 ->
	  d_field_CbVtWriteMsg_FileWrittenIsPeModuleHint(Rest, 0,
							 0, F1, F2, F3, F4, F5);
      34 ->
	  d_field_CbVtWriteMsg_WritingProcessFilename(Rest, 0, 0,
						      F1, F2, F3, F4, F5);
      42 ->
	  d_field_CbVtWriteMsg_FileWrittenFilename(Rest, 0, 0, F1,
						   F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbVtWriteMsg(Rest, 0, 0, F1, F2, F3, F4,
					 F5);
	    1 ->
		skip_64_CbVtWriteMsg(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_CbVtWriteMsg(Rest, 0, 0, F1, F2,
						   F3, F4, F5);
	    5 ->
		skip_32_CbVtWriteMsg(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_CbVtWriteMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5) ->
    #{'WritingProcessExeMd5' => F1, 'FileWrittenMd5' => F2,
      'FileWrittenIsPeModuleHint' => F3,
      'WritingProcessFilename' => F4,
      'FileWrittenFilename' => F5}.

d_field_CbVtWriteMsg_WritingProcessExeMd5(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbVtWriteMsg_WritingProcessExeMd5(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
d_field_CbVtWriteMsg_WritingProcessExeMd5(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtWriteMsg(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, F5).


d_field_CbVtWriteMsg_FileWrittenMd5(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbVtWriteMsg_FileWrittenMd5(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbVtWriteMsg_FileWrittenMd5(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtWriteMsg(Rest2, 0, 0, F1,
				    NewFValue, F3, F4, F5).


d_field_CbVtWriteMsg_FileWrittenIsPeModuleHint(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbVtWriteMsg_FileWrittenIsPeModuleHint(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5);
d_field_CbVtWriteMsg_FileWrittenIsPeModuleHint(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, _, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbVtWriteMsg(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5).


d_field_CbVtWriteMsg_WritingProcessFilename(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbVtWriteMsg_WritingProcessFilename(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5);
d_field_CbVtWriteMsg_WritingProcessFilename(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtWriteMsg(Rest2, 0, 0, F1, F2, F3,
				    NewFValue, F5).


d_field_CbVtWriteMsg_FileWrittenFilename(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbVtWriteMsg_FileWrittenFilename(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbVtWriteMsg_FileWrittenFilename(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtWriteMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, NewFValue).


skip_varint_CbVtWriteMsg(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    skip_varint_CbVtWriteMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
skip_varint_CbVtWriteMsg(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_CbVtWriteMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_length_delimited_CbVtWriteMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_CbVtWriteMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_CbVtWriteMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbVtWriteMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5).


skip_32_CbVtWriteMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_CbVtWriteMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_64_CbVtWriteMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_CbVtWriteMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


d_msg_CbModuleInfoMsg(Bin) ->
    dfp_read_field_def_CbModuleInfoMsg(Bin, 0, 0, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined,
				       undefined).

dfp_read_field_def_CbModuleInfoMsg(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_md5(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, F22, F23,
				F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_CopiedModuleLength(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_OriginalModuleLength(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26);
dfp_read_field_def_CbModuleInfoMsg(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_FileDescription(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26);
dfp_read_field_def_CbModuleInfoMsg(<<42, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_CompanyName(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<50, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_ProductName(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<58, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_FileVersion(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<66, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_Comments(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<74, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_LegalCopyright(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<82, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_LegalTrademark(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<90, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_InternalName(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<98, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_OriginalFileName(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<106, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_ProductDescription(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<114, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_ProductVersion(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<122, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_PrivateBuild(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<130, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_SpecialBuild(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<138, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_Publisher(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<146, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_ProgramName(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<154, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_IssuerName(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<162, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_SubjectName(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<170, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_Result(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<178, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_ResultCode(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<186, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_DigSig_SignTime(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26);
dfp_read_field_def_CbModuleInfoMsg(<<194, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_Icon(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<202, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_ImageFileHeader(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<210, 1,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26) ->
    d_field_CbModuleInfoMsg_utf8_OnDiskFilename(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26);
dfp_read_field_def_CbModuleInfoMsg(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, F17, F18, F19, F20, F21,
				   F22, F23, F24, F25, F26) ->
    #{md5 => F1, 'CopiedModuleLength' => F2,
      'OriginalModuleLength' => F3,
      utf8_FileDescription => F4, utf8_CompanyName => F5,
      utf8_ProductName => F6, utf8_FileVersion => F7,
      utf8_Comments => F8, utf8_LegalCopyright => F9,
      utf8_LegalTrademark => F10, utf8_InternalName => F11,
      utf8_OriginalFileName => F12,
      utf8_ProductDescription => F13,
      utf8_ProductVersion => F14, utf8_PrivateBuild => F15,
      utf8_SpecialBuild => F16, utf8_DigSig_Publisher => F17,
      utf8_DigSig_ProgramName => F18,
      utf8_DigSig_IssuerName => F19,
      utf8_DigSig_SubjectName => F20,
      utf8_DigSig_Result => F21,
      utf8_DigSig_ResultCode => F22,
      utf8_DigSig_SignTime => F23, 'Icon' => F24,
      'ImageFileHeader' => F25, utf8_OnDiskFilename => F26};
dfp_read_field_def_CbModuleInfoMsg(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, F14, F15, F16, F17, F18, F19, F20,
				   F21, F22, F23, F24, F25, F26) ->
    dg_read_field_def_CbModuleInfoMsg(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26).

dg_read_field_def_CbModuleInfoMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26)
    when N < 32 - 7 ->
    dg_read_field_def_CbModuleInfoMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26);
dg_read_field_def_CbModuleInfoMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbModuleInfoMsg_md5(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      F22, F23, F24, F25, F26);
      16 ->
	  d_field_CbModuleInfoMsg_CopiedModuleLength(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26);
      24 ->
	  d_field_CbModuleInfoMsg_OriginalModuleLength(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26);
      34 ->
	  d_field_CbModuleInfoMsg_utf8_FileDescription(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26);
      42 ->
	  d_field_CbModuleInfoMsg_utf8_CompanyName(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25,
						   F26);
      50 ->
	  d_field_CbModuleInfoMsg_utf8_ProductName(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25,
						   F26);
      58 ->
	  d_field_CbModuleInfoMsg_utf8_FileVersion(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25,
						   F26);
      66 ->
	  d_field_CbModuleInfoMsg_utf8_Comments(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26);
      74 ->
	  d_field_CbModuleInfoMsg_utf8_LegalCopyright(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26);
      82 ->
	  d_field_CbModuleInfoMsg_utf8_LegalTrademark(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26);
      90 ->
	  d_field_CbModuleInfoMsg_utf8_InternalName(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26);
      98 ->
	  d_field_CbModuleInfoMsg_utf8_OriginalFileName(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26);
      106 ->
	  d_field_CbModuleInfoMsg_utf8_ProductDescription(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26);
      114 ->
	  d_field_CbModuleInfoMsg_utf8_ProductVersion(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26);
      122 ->
	  d_field_CbModuleInfoMsg_utf8_PrivateBuild(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26);
      130 ->
	  d_field_CbModuleInfoMsg_utf8_SpecialBuild(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26);
      138 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_Publisher(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26);
      146 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_ProgramName(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26);
      154 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_IssuerName(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26);
      162 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_SubjectName(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26);
      170 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_Result(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26);
      178 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_ResultCode(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26);
      186 ->
	  d_field_CbModuleInfoMsg_utf8_DigSig_SignTime(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26);
      194 ->
	  d_field_CbModuleInfoMsg_Icon(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       F22, F23, F24, F25, F26);
      202 ->
	  d_field_CbModuleInfoMsg_ImageFileHeader(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26);
      210 ->
	  d_field_CbModuleInfoMsg_utf8_OnDiskFilename(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbModuleInfoMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    F13, F14, F15, F16, F17, F18, F19,
					    F20, F21, F22, F23, F24, F25, F26);
	    1 ->
		skip_64_CbModuleInfoMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26);
	    2 ->
		skip_length_delimited_CbModuleInfoMsg(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26);
	    5 ->
		skip_32_CbModuleInfoMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26)
	  end
    end;
dg_read_field_def_CbModuleInfoMsg(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26) ->
    #{md5 => F1, 'CopiedModuleLength' => F2,
      'OriginalModuleLength' => F3,
      utf8_FileDescription => F4, utf8_CompanyName => F5,
      utf8_ProductName => F6, utf8_FileVersion => F7,
      utf8_Comments => F8, utf8_LegalCopyright => F9,
      utf8_LegalTrademark => F10, utf8_InternalName => F11,
      utf8_OriginalFileName => F12,
      utf8_ProductDescription => F13,
      utf8_ProductVersion => F14, utf8_PrivateBuild => F15,
      utf8_SpecialBuild => F16, utf8_DigSig_Publisher => F17,
      utf8_DigSig_ProgramName => F18,
      utf8_DigSig_IssuerName => F19,
      utf8_DigSig_SubjectName => F20,
      utf8_DigSig_Result => F21,
      utf8_DigSig_ResultCode => F22,
      utf8_DigSig_SignTime => F23, 'Icon' => F24,
      'ImageFileHeader' => F25, utf8_OnDiskFilename => F26}.

d_field_CbModuleInfoMsg_md5(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_md5(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_md5(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			    F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26).


d_field_CbModuleInfoMsg_CopiedModuleLength(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_CopiedModuleLength(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26);
d_field_CbModuleInfoMsg_CopiedModuleLength(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbModuleInfoMsg(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, F6, F7, F8, F9,
				       F10, F11, F12, F13, F14, F15, F16, F17,
				       F18, F19, F20, F21, F22, F23, F24, F25,
				       F26).


d_field_CbModuleInfoMsg_OriginalModuleLength(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_OriginalModuleLength(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_OriginalModuleLength(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, _, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbModuleInfoMsg(Rest, 0, 0, F1, F2,
				       NewFValue, F4, F5, F6, F7, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_FileDescription(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_FileDescription(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_FileDescription(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, _, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, NewFValue, F5, F6, F7, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_CompanyName(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_CompanyName(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_CompanyName(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, NewFValue, F6, F7, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_ProductName(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_ProductName(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_ProductName(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, NewFValue, F7, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_FileVersion(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_FileVersion(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_FileVersion(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, NewFValue, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_Comments(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_Comments(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_Comments(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, NewFValue, F9, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_LegalCopyright(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_LegalCopyright(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_LegalCopyright(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, _, F10, F11, F12, F13, F14, F15,
					    F16, F17, F18, F19, F20, F21, F22,
					    F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, NewFValue, F10,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_LegalTrademark(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_LegalTrademark(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_LegalTrademark(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, _, F11, F12, F13, F14, F15,
					    F16, F17, F18, F19, F20, F21, F22,
					    F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, NewFValue,
				       F11, F12, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_InternalName(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_InternalName(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25,
					      F26);
d_field_CbModuleInfoMsg_utf8_InternalName(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, _, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       NewFValue, F12, F13, F14, F15, F16, F17,
				       F18, F19, F20, F21, F22, F23, F24, F25,
				       F26).


d_field_CbModuleInfoMsg_utf8_OriginalFileName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_OriginalFileName(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_OriginalFileName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, _, F13, F14,
					      F15, F16, F17, F18, F19, F20, F21,
					      F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       NewFValue, F13, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_ProductDescription(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_ProductDescription(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26);
d_field_CbModuleInfoMsg_utf8_ProductDescription(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, _,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, NewFValue, F14, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_ProductVersion(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_ProductVersion(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_ProductVersion(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, _, F15,
					    F16, F17, F18, F19, F20, F21, F22,
					    F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, NewFValue, F15, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_PrivateBuild(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_PrivateBuild(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25,
					      F26);
d_field_CbModuleInfoMsg_utf8_PrivateBuild(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, _,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, NewFValue, F16, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_SpecialBuild(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_SpecialBuild(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25,
					      F26);
d_field_CbModuleInfoMsg_utf8_SpecialBuild(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  _, F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, NewFValue, F17, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_Publisher(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_Publisher(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_Publisher(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, _, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, NewFValue, F18,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_ProgramName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_ProgramName(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_ProgramName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, _, F19, F20,
						F21, F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, NewFValue,
				       F19, F20, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_IssuerName(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_IssuerName(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_IssuerName(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, _, F20,
					       F21, F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18,
				       NewFValue, F20, F21, F22, F23, F24, F25,
				       F26).


d_field_CbModuleInfoMsg_utf8_DigSig_SubjectName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_SubjectName(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_SubjectName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19, _,
						F21, F22, F23, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       NewFValue, F21, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_Result(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_Result(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_Result(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, _, F22, F23,
					   F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, NewFValue, F22, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_ResultCode(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_ResultCode(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_ResultCode(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, _, F23, F24, F25,
					       F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, NewFValue, F23, F24, F25, F26).


d_field_CbModuleInfoMsg_utf8_DigSig_SignTime(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_DigSig_SignTime(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_DigSig_SignTime(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, _, F24, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, NewFValue, F24, F25, F26).


d_field_CbModuleInfoMsg_Icon(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_Icon(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_Icon(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, _, F25, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, NewFValue, F25, F26).


d_field_CbModuleInfoMsg_ImageFileHeader(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_ImageFileHeader(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26);
d_field_CbModuleInfoMsg_ImageFileHeader(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					_, F26) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, NewFValue, F26).


d_field_CbModuleInfoMsg_utf8_OnDiskFilename(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26)
    when N < 57 ->
    d_field_CbModuleInfoMsg_utf8_OnDiskFilename(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26);
d_field_CbModuleInfoMsg_utf8_OnDiskFilename(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, NewFValue).


skip_varint_CbModuleInfoMsg(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26) ->
    skip_varint_CbModuleInfoMsg(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, F22, F23,
				F24, F25, F26);
skip_varint_CbModuleInfoMsg(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26) ->
    dfp_read_field_def_CbModuleInfoMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26).


skip_length_delimited_CbModuleInfoMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26)
    when N < 57 ->
    skip_length_delimited_CbModuleInfoMsg(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26);
skip_length_delimited_CbModuleInfoMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbModuleInfoMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26).


skip_32_CbModuleInfoMsg(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
			F25, F26) ->
    dfp_read_field_def_CbModuleInfoMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26).


skip_64_CbModuleInfoMsg(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
			F25, F26) ->
    dfp_read_field_def_CbModuleInfoMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26).


d_msg_CbLinStatsMsg(Bin) ->
    dfp_read_field_def_CbLinStatsMsg(Bin, 0, 0, undefined,
				     undefined, undefined, undefined, undefined,
				     undefined, undefined).

dfp_read_field_def_CbLinStatsMsg(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_total(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_successful(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_no_scanidi(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_total_pended(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_current_scanid_pended_size(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_current_handlepath_pended_size(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<56, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbLinStatsMsg_lin_current_filepath_pended_size(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7);
dfp_read_field_def_CbLinStatsMsg(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7) ->
    #{lin_total => F1, lin_successful => F2,
      lin_no_scanidi => F3, lin_total_pended => F4,
      lin_current_scanid_pended_size => F5,
      lin_current_handlepath_pended_size => F6,
      lin_current_filepath_pended_size => F7};
dfp_read_field_def_CbLinStatsMsg(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7) ->
    dg_read_field_def_CbLinStatsMsg(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).

dg_read_field_def_CbLinStatsMsg(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_CbLinStatsMsg(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_CbLinStatsMsg(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbLinStatsMsg_lin_total(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7);
      16 ->
	  d_field_CbLinStatsMsg_lin_successful(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7);
      24 ->
	  d_field_CbLinStatsMsg_lin_no_scanidi(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7);
      32 ->
	  d_field_CbLinStatsMsg_lin_total_pended(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7);
      40 ->
	  d_field_CbLinStatsMsg_lin_current_scanid_pended_size(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7);
      48 ->
	  d_field_CbLinStatsMsg_lin_current_handlepath_pended_size(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6, F7);
      56 ->
	  d_field_CbLinStatsMsg_lin_current_filepath_pended_size(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7);
	    1 ->
		skip_64_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7);
	    2 ->
		skip_length_delimited_CbLinStatsMsg(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7);
	    5 ->
		skip_32_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7)
	  end
    end;
dg_read_field_def_CbLinStatsMsg(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7) ->
    #{lin_total => F1, lin_successful => F2,
      lin_no_scanidi => F3, lin_total_pended => F4,
      lin_current_scanid_pended_size => F5,
      lin_current_handlepath_pended_size => F6,
      lin_current_filepath_pended_size => F7}.

d_field_CbLinStatsMsg_lin_total(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_total(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_CbLinStatsMsg_lin_total(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7).


d_field_CbLinStatsMsg_lin_successful(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_successful(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7);
d_field_CbLinStatsMsg_lin_successful(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7).


d_field_CbLinStatsMsg_lin_no_scanidi(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_no_scanidi(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7);
d_field_CbLinStatsMsg_lin_no_scanidi(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _, F4, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7).


d_field_CbLinStatsMsg_lin_total_pended(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_total_pended(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7);
d_field_CbLinStatsMsg_lin_total_pended(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3,
				     NewFValue, F5, F6, F7).


d_field_CbLinStatsMsg_lin_current_scanid_pended_size(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_current_scanid_pended_size(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5, F6,
							 F7);
d_field_CbLinStatsMsg_lin_current_scanid_pended_size(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, _,
						     F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7).


d_field_CbLinStatsMsg_lin_current_handlepath_pended_size(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_current_handlepath_pended_size(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5, F6,
							     F7);
d_field_CbLinStatsMsg_lin_current_handlepath_pended_size(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, _, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7).


d_field_CbLinStatsMsg_lin_current_filepath_pended_size(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7)
    when N < 57 ->
    d_field_CbLinStatsMsg_lin_current_filepath_pended_size(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7);
d_field_CbLinStatsMsg_lin_current_filepath_pended_size(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbLinStatsMsg(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, NewFValue).


skip_varint_CbLinStatsMsg(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_CbLinStatsMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
skip_varint_CbLinStatsMsg(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbLinStatsMsg(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_length_delimited_CbLinStatsMsg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_CbLinStatsMsg(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
skip_length_delimited_CbLinStatsMsg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbLinStatsMsg(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7).


skip_32_CbLinStatsMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbLinStatsMsg(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_64_CbLinStatsMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbLinStatsMsg(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


d_msg_CbChildProcessMsg(Bin) ->
    dfp_read_field_def_CbChildProcessMsg(Bin, 0, 0,
					 undefined, undefined, undefined,
					 undefined, undefined, undefined,
					 undefined, undefined).

dfp_read_field_def_CbChildProcessMsg(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_created(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_parent_guid(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_md5hash(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_child_guid(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_path(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<48,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_pid(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<56,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_create_time(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_CbChildProcessMsg_tamper(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8);
dfp_read_field_def_CbChildProcessMsg(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8) ->
    #{created => F1, parent_guid => F2, md5hash => F3,
      child_guid => F4, path => F5, pid => F6,
      create_time => F7, tamper => F8};
dfp_read_field_def_CbChildProcessMsg(Other, Z1, Z2, F1,
				     F2, F3, F4, F5, F6, F7, F8) ->
    dg_read_field_def_CbChildProcessMsg(Other, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8).

dg_read_field_def_CbChildProcessMsg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 32 - 7 ->
    dg_read_field_def_CbChildProcessMsg(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8);
dg_read_field_def_CbChildProcessMsg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbChildProcessMsg_created(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      16 ->
	  d_field_CbChildProcessMsg_parent_guid(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8);
      26 ->
	  d_field_CbChildProcessMsg_md5hash(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      32 ->
	  d_field_CbChildProcessMsg_child_guid(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8);
      42 ->
	  d_field_CbChildProcessMsg_path(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8);
      48 ->
	  d_field_CbChildProcessMsg_pid(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8);
      56 ->
	  d_field_CbChildProcessMsg_create_time(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8);
      64 ->
	  d_field_CbChildProcessMsg_tamper(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbChildProcessMsg(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8);
	    1 ->
		skip_64_CbChildProcessMsg(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8);
	    2 ->
		skip_length_delimited_CbChildProcessMsg(Rest, 0, 0, F1,
							F2, F3, F4, F5, F6, F7,
							F8);
	    5 ->
		skip_32_CbChildProcessMsg(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8)
	  end
    end;
dg_read_field_def_CbChildProcessMsg(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, F7, F8) ->
    #{created => F1, parent_guid => F2, md5hash => F3,
      child_guid => F4, path => F5, pid => F6,
      create_time => F7, tamper => F8}.

d_field_CbChildProcessMsg_created(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_created(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
d_field_CbChildProcessMsg_created(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6, F7, F8) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0,
					 NewFValue, F2, F3, F4, F5, F6, F7, F8).


d_field_CbChildProcessMsg_parent_guid(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_parent_guid(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8);
d_field_CbChildProcessMsg_parent_guid(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, F4, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0, F1,
					 NewFValue, F3, F4, F5, F6, F7, F8).


d_field_CbChildProcessMsg_md5hash(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_md5hash(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
d_field_CbChildProcessMsg_md5hash(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbChildProcessMsg(Rest2, 0, 0, F1,
					 F2, NewFValue, F4, F5, F6, F7, F8).


d_field_CbChildProcessMsg_child_guid(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_child_guid(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8);
d_field_CbChildProcessMsg_child_guid(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0, F1, F2,
					 F3, NewFValue, F5, F6, F7, F8).


d_field_CbChildProcessMsg_path(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_path(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8);
d_field_CbChildProcessMsg_path(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbChildProcessMsg(Rest2, 0, 0, F1,
					 F2, F3, F4, NewFValue, F6, F7, F8).


d_field_CbChildProcessMsg_pid(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_pid(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  F8);
d_field_CbChildProcessMsg_pid(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0, F1, F2,
					 F3, F4, F5, NewFValue, F7, F8).


d_field_CbChildProcessMsg_create_time(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_create_time(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8);
d_field_CbChildProcessMsg_create_time(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0, F1, F2,
					 F3, F4, F5, F6, NewFValue, F8).


d_field_CbChildProcessMsg_tamper(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_CbChildProcessMsg_tamper(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8);
d_field_CbChildProcessMsg_tamper(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbChildProcessMsg(Rest, 0, 0, F1, F2,
					 F3, F4, F5, F6, F7, NewFValue).


skip_varint_CbChildProcessMsg(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    skip_varint_CbChildProcessMsg(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8);
skip_varint_CbChildProcessMsg(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_CbChildProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8).


skip_length_delimited_CbChildProcessMsg(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    skip_length_delimited_CbChildProcessMsg(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8);
skip_length_delimited_CbChildProcessMsg(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbChildProcessMsg(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6, F7, F8).


skip_32_CbChildProcessMsg(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_CbChildProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8).


skip_64_CbChildProcessMsg(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_CbChildProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8).


d_msg_CbCrossProcessOpenMsg(Bin) ->
    dfp_read_field_def_CbCrossProcessOpenMsg(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined, undefined, undefined).

dfp_read_field_def_CbCrossProcessOpenMsg(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_type(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_targetPid(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<24,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_targetProcCreateTime(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_requestedAccess(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<42,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_targetProcPath(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<50,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CbCrossProcessOpenMsg_targetProcMd5(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_CbCrossProcessOpenMsg(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6) ->
    #{type => F1, targetPid => F2,
      targetProcCreateTime => F3, requestedAccess => F4,
      targetProcPath => F5, targetProcMd5 => F6};
dfp_read_field_def_CbCrossProcessOpenMsg(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, F6) ->
    dg_read_field_def_CbCrossProcessOpenMsg(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, F6).

dg_read_field_def_CbCrossProcessOpenMsg(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_CbCrossProcessOpenMsg(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6);
dg_read_field_def_CbCrossProcessOpenMsg(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbCrossProcessOpenMsg_type(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6);
      16 ->
	  d_field_CbCrossProcessOpenMsg_targetPid(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6);
      24 ->
	  d_field_CbCrossProcessOpenMsg_targetProcCreateTime(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5, F6);
      32 ->
	  d_field_CbCrossProcessOpenMsg_requestedAccess(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6);
      42 ->
	  d_field_CbCrossProcessOpenMsg_targetProcPath(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6);
      50 ->
	  d_field_CbCrossProcessOpenMsg_targetProcMd5(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbCrossProcessOpenMsg(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6);
	    1 ->
		skip_64_CbCrossProcessOpenMsg(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6);
	    2 ->
		skip_length_delimited_CbCrossProcessOpenMsg(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6);
	    5 ->
		skip_32_CbCrossProcessOpenMsg(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6)
	  end
    end;
dg_read_field_def_CbCrossProcessOpenMsg(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6) ->
    #{type => F1, targetPid => F2,
      targetProcCreateTime => F3, requestedAccess => F4,
      targetProcPath => F5, targetProcMd5 => F6}.

d_field_CbCrossProcessOpenMsg_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_type(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CbCrossProcessOpenMsg_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbCrossProcessOpenMsg.OpenType'(Tmp),
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, 0, 0,
					     NewFValue, F2, F3, F4, F5, F6).


d_field_CbCrossProcessOpenMsg_targetPid(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_targetPid(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6);
d_field_CbCrossProcessOpenMsg_targetPid(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4, F5, F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, 0, 0, F1,
					     NewFValue, F3, F4, F5, F6).


d_field_CbCrossProcessOpenMsg_targetProcCreateTime(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_targetProcCreateTime(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5, F6);
d_field_CbCrossProcessOpenMsg_targetProcCreateTime(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, _, F4, F5,
						   F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, 0, 0, F1,
					     F2, NewFValue, F4, F5, F6).


d_field_CbCrossProcessOpenMsg_requestedAccess(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_requestedAccess(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6);
d_field_CbCrossProcessOpenMsg_requestedAccess(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, _, F5, F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, 0, 0, F1,
					     F2, F3, NewFValue, F5, F6).


d_field_CbCrossProcessOpenMsg_targetProcPath(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_targetProcPath(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6);
d_field_CbCrossProcessOpenMsg_targetProcPath(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, _, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest2, 0, 0,
					     F1, F2, F3, F4, NewFValue, F6).


d_field_CbCrossProcessOpenMsg_targetProcMd5(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CbCrossProcessOpenMsg_targetProcMd5(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6);
d_field_CbCrossProcessOpenMsg_targetProcMd5(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, NewFValue).


skip_varint_CbCrossProcessOpenMsg(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_CbCrossProcessOpenMsg(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
skip_varint_CbCrossProcessOpenMsg(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6).


skip_length_delimited_CbCrossProcessOpenMsg(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_CbCrossProcessOpenMsg(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6);
skip_length_delimited_CbCrossProcessOpenMsg(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6).


skip_32_CbCrossProcessOpenMsg(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6).


skip_64_CbCrossProcessOpenMsg(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CbCrossProcessOpenMsg(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6).


d_msg_CbModuleLoadMsg(Bin) ->
    dfp_read_field_def_CbModuleLoadMsg(Bin, 0, 0, undefined,
				       undefined, undefined, undefined,
				       undefined, undefined, undefined).

dfp_read_field_def_CbModuleLoadMsg(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_guid(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7);
dfp_read_field_def_CbModuleLoadMsg(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_handlepath_string_guid(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7);
dfp_read_field_def_CbModuleLoadMsg(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_md5hash(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7);
dfp_read_field_def_CbModuleLoadMsg(<<32, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_scanid(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_CbModuleLoadMsg(<<40, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_is_process_base_module(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7);
dfp_read_field_def_CbModuleLoadMsg(<<48, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_image_base(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7);
dfp_read_field_def_CbModuleLoadMsg(<<56, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_CbModuleLoadMsg_image_size(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7);
dfp_read_field_def_CbModuleLoadMsg(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7) ->
    #{guid => F1, handlepath_string_guid => F2,
      md5hash => F3, scanid => F4,
      is_process_base_module => F5, image_base => F6,
      image_size => F7};
dfp_read_field_def_CbModuleLoadMsg(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, F7) ->
    dg_read_field_def_CbModuleLoadMsg(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7).

dg_read_field_def_CbModuleLoadMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_CbModuleLoadMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
dg_read_field_def_CbModuleLoadMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbModuleLoadMsg_guid(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7);
      16 ->
	  d_field_CbModuleLoadMsg_handlepath_string_guid(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7);
      26 ->
	  d_field_CbModuleLoadMsg_md5hash(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7);
      32 ->
	  d_field_CbModuleLoadMsg_scanid(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      40 ->
	  d_field_CbModuleLoadMsg_is_process_base_module(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7);
      48 ->
	  d_field_CbModuleLoadMsg_image_base(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7);
      56 ->
	  d_field_CbModuleLoadMsg_image_size(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbModuleLoadMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7);
	    1 ->
		skip_64_CbModuleLoadMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7);
	    2 ->
		skip_length_delimited_CbModuleLoadMsg(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7);
	    5 ->
		skip_32_CbModuleLoadMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7)
	  end
    end;
dg_read_field_def_CbModuleLoadMsg(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7) ->
    #{guid => F1, handlepath_string_guid => F2,
      md5hash => F3, scanid => F4,
      is_process_base_module => F5, image_base => F6,
      image_size => F7}.

d_field_CbModuleLoadMsg_guid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_guid(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
d_field_CbModuleLoadMsg_guid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6, F7).


d_field_CbModuleLoadMsg_handlepath_string_guid(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_handlepath_string_guid(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7);
d_field_CbModuleLoadMsg_handlepath_string_guid(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, _, F3, F4, F5, F6,
					       F7) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, F6, F7).


d_field_CbModuleLoadMsg_md5hash(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_md5hash(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_CbModuleLoadMsg_md5hash(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbModuleLoadMsg(Rest2, 0, 0, F1, F2,
				       NewFValue, F4, F5, F6, F7).


d_field_CbModuleLoadMsg_scanid(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_scanid(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_CbModuleLoadMsg_scanid(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0, F1, F2,
				       F3, NewFValue, F5, F6, F7).


d_field_CbModuleLoadMsg_is_process_base_module(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_is_process_base_module(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7);
d_field_CbModuleLoadMsg_is_process_base_module(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, _, F6,
					       F7) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0, F1, F2,
				       F3, F4, NewFValue, F6, F7).


d_field_CbModuleLoadMsg_image_base(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_image_base(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7);
d_field_CbModuleLoadMsg_image_base(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0, F1, F2,
				       F3, F4, F5, NewFValue, F7).


d_field_CbModuleLoadMsg_image_size(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_CbModuleLoadMsg_image_size(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7);
d_field_CbModuleLoadMsg_image_size(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbModuleLoadMsg(Rest, 0, 0, F1, F2,
				       F3, F4, F5, F6, NewFValue).


skip_varint_CbModuleLoadMsg(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_CbModuleLoadMsg(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
skip_varint_CbModuleLoadMsg(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbModuleLoadMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


skip_length_delimited_CbModuleLoadMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_CbModuleLoadMsg(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
skip_length_delimited_CbModuleLoadMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbModuleLoadMsg(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7).


skip_32_CbModuleLoadMsg(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbModuleLoadMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


skip_64_CbModuleLoadMsg(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_CbModuleLoadMsg(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


d_msg_CbNetConnBlockedMsg(Bin) ->
    dfp_read_field_def_CbNetConnBlockedMsg(Bin, 0, 0,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined).

dfp_read_field_def_CbNetConnBlockedMsg(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_blockedType(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<16,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_ipv4Address(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<24,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_ipv6LoPart(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_ipv6HiPart(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_port(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<48,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_protocol(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_utf8_netpath(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_outbound(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<72,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_proxyConnection(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<80,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_proxyIpv4Address(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<88,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_proxyPort(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<98,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_proxyNetPath(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<104,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_remoteIpAddress(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<112,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_remotePort(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<120,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_localIpAddress(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<128, 1,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnBlockedMsg_localPort(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnBlockedMsg(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16) ->
    #{blockedType => F1, ipv4Address => F2,
      ipv6LoPart => F3, ipv6HiPart => F4, port => F5,
      protocol => F6, utf8_netpath => F7, outbound => F8,
      proxyConnection => F9, proxyIpv4Address => F10,
      proxyPort => F11, proxyNetPath => F12,
      remoteIpAddress => F13, remotePort => F14,
      localIpAddress => F15, localPort => F16};
dfp_read_field_def_CbNetConnBlockedMsg(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11, F12, F13, F14, F15, F16) ->
    dg_read_field_def_CbNetConnBlockedMsg(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16).

dg_read_field_def_CbNetConnBlockedMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 32 - 7 ->
    dg_read_field_def_CbNetConnBlockedMsg(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16);
dg_read_field_def_CbNetConnBlockedMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbNetConnBlockedMsg_blockedType(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16);
      16 ->
	  d_field_CbNetConnBlockedMsg_ipv4Address(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16);
      24 ->
	  d_field_CbNetConnBlockedMsg_ipv6LoPart(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16);
      32 ->
	  d_field_CbNetConnBlockedMsg_ipv6HiPart(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16);
      40 ->
	  d_field_CbNetConnBlockedMsg_port(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16);
      48 ->
	  d_field_CbNetConnBlockedMsg_protocol(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16);
      58 ->
	  d_field_CbNetConnBlockedMsg_utf8_netpath(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16);
      64 ->
	  d_field_CbNetConnBlockedMsg_outbound(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16);
      72 ->
	  d_field_CbNetConnBlockedMsg_proxyConnection(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16);
      80 ->
	  d_field_CbNetConnBlockedMsg_proxyIpv4Address(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16);
      88 ->
	  d_field_CbNetConnBlockedMsg_proxyPort(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16);
      98 ->
	  d_field_CbNetConnBlockedMsg_proxyNetPath(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16);
      104 ->
	  d_field_CbNetConnBlockedMsg_remoteIpAddress(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16);
      112 ->
	  d_field_CbNetConnBlockedMsg_remotePort(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16);
      120 ->
	  d_field_CbNetConnBlockedMsg_localIpAddress(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16);
      128 ->
	  d_field_CbNetConnBlockedMsg_localPort(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbNetConnBlockedMsg(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, F14, F15, F16);
	    1 ->
		skip_64_CbNetConnBlockedMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    F13, F14, F15, F16);
	    2 ->
		skip_length_delimited_CbNetConnBlockedMsg(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16);
	    5 ->
		skip_32_CbNetConnBlockedMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    F13, F14, F15, F16)
	  end
    end;
dg_read_field_def_CbNetConnBlockedMsg(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16) ->
    #{blockedType => F1, ipv4Address => F2,
      ipv6LoPart => F3, ipv6HiPart => F4, port => F5,
      protocol => F6, utf8_netpath => F7, outbound => F8,
      proxyConnection => F9, proxyIpv4Address => F10,
      proxyPort => F11, proxyNetPath => F12,
      remoteIpAddress => F13, remotePort => F14,
      localIpAddress => F15, localPort => F16}.

d_field_CbNetConnBlockedMsg_blockedType(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_blockedType(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16);
d_field_CbNetConnBlockedMsg_blockedType(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15,
					F16) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbNetConnBlockedMsg.NetconnBlockType'(Tmp),
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_ipv4Address(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_ipv4Address(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16);
d_field_CbNetConnBlockedMsg_ipv4Address(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15,
					F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_ipv6LoPart(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_ipv6LoPart(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16);
d_field_CbNetConnBlockedMsg_ipv6LoPart(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, NewFValue, F4, F5, F6, F7, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_ipv6HiPart(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_ipv6HiPart(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16);
d_field_CbNetConnBlockedMsg_ipv6HiPart(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, NewFValue, F5, F6, F7, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_port(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_port(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnBlockedMsg_port(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, NewFValue, F6, F7, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_protocol(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_protocol(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16);
d_field_CbNetConnBlockedMsg_protocol(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbNetConnBlockedMsg.ProtocolType'(Tmp),
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_utf8_netpath(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_utf8_netpath(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16);
d_field_CbNetConnBlockedMsg_utf8_netpath(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
					 F9, F10, F11, F12, F13, F14, F15,
					 F16) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbNetConnBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, NewFValue, F8,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_outbound(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_outbound(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16);
d_field_CbNetConnBlockedMsg_outbound(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				     F10, F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, NewFValue,
					   F9, F10, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_proxyConnection(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_proxyConnection(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16);
d_field_CbNetConnBlockedMsg_proxyConnection(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, _, F10, F11, F12, F13, F14, F15,
					    F16) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   NewFValue, F10, F11, F12, F13, F14,
					   F15, F16).


d_field_CbNetConnBlockedMsg_proxyIpv4Address(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_proxyIpv4Address(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16);
d_field_CbNetConnBlockedMsg_proxyIpv4Address(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, _, F11, F12, F13, F14, F15,
					     F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9,
					   NewFValue, F11, F12, F13, F14, F15,
					   F16).


d_field_CbNetConnBlockedMsg_proxyPort(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_proxyPort(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16);
d_field_CbNetConnBlockedMsg_proxyPort(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, _, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   NewFValue, F12, F13, F14, F15, F16).


d_field_CbNetConnBlockedMsg_proxyNetPath(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_proxyNetPath(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16);
d_field_CbNetConnBlockedMsg_proxyNetPath(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, _, F13, F14, F15, F16) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbNetConnBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, NewFValue, F13, F14, F15, F16).


d_field_CbNetConnBlockedMsg_remoteIpAddress(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_remoteIpAddress(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16);
d_field_CbNetConnBlockedMsg_remoteIpAddress(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, _, F14, F15,
					    F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, NewFValue, F14, F15, F16).


d_field_CbNetConnBlockedMsg_remotePort(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_remotePort(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16);
d_field_CbNetConnBlockedMsg_remotePort(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, _, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, NewFValue, F15, F16).


d_field_CbNetConnBlockedMsg_localIpAddress(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_localIpAddress(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16);
d_field_CbNetConnBlockedMsg_localIpAddress(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, _,
					   F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, NewFValue, F16).


d_field_CbNetConnBlockedMsg_localPort(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnBlockedMsg_localPort(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16);
d_field_CbNetConnBlockedMsg_localPort(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, NewFValue).


skip_varint_CbNetConnBlockedMsg(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    skip_varint_CbNetConnBlockedMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16);
skip_varint_CbNetConnBlockedMsg(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16).


skip_length_delimited_CbNetConnBlockedMsg(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16)
    when N < 57 ->
    skip_length_delimited_CbNetConnBlockedMsg(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16);
skip_length_delimited_CbNetConnBlockedMsg(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbNetConnBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16).


skip_32_CbNetConnBlockedMsg(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16) ->
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16).


skip_64_CbNetConnBlockedMsg(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, F14, F15, F16) ->
    dfp_read_field_def_CbNetConnBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16).


d_msg_CbCreateRemoteThreadMsg(Bin) ->
    dfp_read_field_def_CbCreateRemoteThreadMsg(Bin, 0, 0,
					       undefined, undefined, undefined,
					       undefined).

dfp_read_field_def_CbCreateRemoteThreadMsg(<<8,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4) ->
    d_field_CbCreateRemoteThreadMsg_remoteProcPid(Rest, Z1,
						  Z2, F1, F2, F3, F4);
dfp_read_field_def_CbCreateRemoteThreadMsg(<<16,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4) ->
    d_field_CbCreateRemoteThreadMsg_remoteProcCreateTime(Rest,
							 Z1, Z2, F1, F2, F3,
							 F4);
dfp_read_field_def_CbCreateRemoteThreadMsg(<<26,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4) ->
    d_field_CbCreateRemoteThreadMsg_remoteProcPath(Rest, Z1,
						   Z2, F1, F2, F3, F4);
dfp_read_field_def_CbCreateRemoteThreadMsg(<<34,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4) ->
    d_field_CbCreateRemoteThreadMsg_remoteProcMd5(Rest, Z1,
						  Z2, F1, F2, F3, F4);
dfp_read_field_def_CbCreateRemoteThreadMsg(<<>>, 0, 0,
					   F1, F2, F3, F4) ->
    #{remoteProcPid => F1, remoteProcCreateTime => F2,
      remoteProcPath => F3, remoteProcMd5 => F4};
dfp_read_field_def_CbCreateRemoteThreadMsg(Other, Z1,
					   Z2, F1, F2, F3, F4) ->
    dg_read_field_def_CbCreateRemoteThreadMsg(Other, Z1, Z2,
					      F1, F2, F3, F4).

dg_read_field_def_CbCreateRemoteThreadMsg(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_CbCreateRemoteThreadMsg(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_CbCreateRemoteThreadMsg(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbCreateRemoteThreadMsg_remoteProcPid(Rest, 0,
							0, F1, F2, F3, F4);
      16 ->
	  d_field_CbCreateRemoteThreadMsg_remoteProcCreateTime(Rest,
							       0, 0, F1, F2, F3,
							       F4);
      26 ->
	  d_field_CbCreateRemoteThreadMsg_remoteProcPath(Rest, 0,
							 0, F1, F2, F3, F4);
      34 ->
	  d_field_CbCreateRemoteThreadMsg_remoteProcMd5(Rest, 0,
							0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbCreateRemoteThreadMsg(Rest, 0, 0, F1, F2,
						    F3, F4);
	    1 ->
		skip_64_CbCreateRemoteThreadMsg(Rest, 0, 0, F1, F2, F3,
						F4);
	    2 ->
		skip_length_delimited_CbCreateRemoteThreadMsg(Rest, 0,
							      0, F1, F2, F3,
							      F4);
	    5 ->
		skip_32_CbCreateRemoteThreadMsg(Rest, 0, 0, F1, F2, F3,
						F4)
	  end
    end;
dg_read_field_def_CbCreateRemoteThreadMsg(<<>>, 0, 0,
					  F1, F2, F3, F4) ->
    #{remoteProcPid => F1, remoteProcCreateTime => F2,
      remoteProcPath => F3, remoteProcMd5 => F4}.

d_field_CbCreateRemoteThreadMsg_remoteProcPid(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CbCreateRemoteThreadMsg_remoteProcPid(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4);
d_field_CbCreateRemoteThreadMsg_remoteProcPid(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest, 0, 0,
					       NewFValue, F2, F3, F4).


d_field_CbCreateRemoteThreadMsg_remoteProcCreateTime(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CbCreateRemoteThreadMsg_remoteProcCreateTime(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4);
d_field_CbCreateRemoteThreadMsg_remoteProcCreateTime(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest, 0, 0,
					       F1, NewFValue, F3, F4).


d_field_CbCreateRemoteThreadMsg_remoteProcPath(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CbCreateRemoteThreadMsg_remoteProcPath(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4);
d_field_CbCreateRemoteThreadMsg_remoteProcPath(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest2, 0, 0,
					       F1, F2, NewFValue, F4).


d_field_CbCreateRemoteThreadMsg_remoteProcMd5(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_CbCreateRemoteThreadMsg_remoteProcMd5(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4);
d_field_CbCreateRemoteThreadMsg_remoteProcMd5(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest2, 0, 0,
					       F1, F2, F3, NewFValue).


skip_varint_CbCreateRemoteThreadMsg(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_CbCreateRemoteThreadMsg(Rest, Z1, Z2, F1,
					F2, F3, F4);
skip_varint_CbCreateRemoteThreadMsg(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest, Z1, Z2,
					       F1, F2, F3, F4).


skip_length_delimited_CbCreateRemoteThreadMsg(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_CbCreateRemoteThreadMsg(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4);
skip_length_delimited_CbCreateRemoteThreadMsg(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest2, 0, 0,
					       F1, F2, F3, F4).


skip_32_CbCreateRemoteThreadMsg(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest, Z1, Z2,
					       F1, F2, F3, F4).


skip_64_CbCreateRemoteThreadMsg(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_CbCreateRemoteThreadMsg(Rest, Z1, Z2,
					       F1, F2, F3, F4).


d_msg_CbRegModMsg(Bin) ->
    dfp_read_field_def_CbRegModMsg(Bin, 0, 0, undefined,
				   undefined, undefined, undefined, undefined).

dfp_read_field_def_CbRegModMsg(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5) ->
    d_field_CbRegModMsg_guid(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_CbRegModMsg(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5) ->
    d_field_CbRegModMsg_action(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_CbRegModMsg(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5) ->
    d_field_CbRegModMsg_have_seen_before(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5);
dfp_read_field_def_CbRegModMsg(<<34, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5) ->
    d_field_CbRegModMsg_utf8_regpath(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5);
dfp_read_field_def_CbRegModMsg(<<40, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5) ->
    d_field_CbRegModMsg_tamper(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_CbRegModMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5) ->
    #{guid => F1, action => F2, have_seen_before => F3,
      utf8_regpath => F4, tamper => F5};
dfp_read_field_def_CbRegModMsg(Other, Z1, Z2, F1, F2,
			       F3, F4, F5) ->
    dg_read_field_def_CbRegModMsg(Other, Z1, Z2, F1, F2, F3,
				  F4, F5).

dg_read_field_def_CbRegModMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_CbRegModMsg(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_CbRegModMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbRegModMsg_guid(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      16 ->
	  d_field_CbRegModMsg_action(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      24 ->
	  d_field_CbRegModMsg_have_seen_before(Rest, 0, 0, F1, F2,
					       F3, F4, F5);
      34 ->
	  d_field_CbRegModMsg_utf8_regpath(Rest, 0, 0, F1, F2, F3,
					   F4, F5);
      40 ->
	  d_field_CbRegModMsg_tamper(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbRegModMsg(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 ->
		skip_64_CbRegModMsg(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_CbRegModMsg(Rest, 0, 0, F1, F2,
						  F3, F4, F5);
	    5 -> skip_32_CbRegModMsg(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_CbRegModMsg(<<>>, 0, 0, F1, F2, F3,
			      F4, F5) ->
    #{guid => F1, action => F2, have_seen_before => F3,
      utf8_regpath => F4, tamper => F5}.

d_field_CbRegModMsg_guid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbRegModMsg_guid(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_CbRegModMsg_guid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbRegModMsg(Rest, 0, 0, NewFValue,
				   F2, F3, F4, F5).


d_field_CbRegModMsg_action(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbRegModMsg_action(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_CbRegModMsg_action(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbRegModMsg.CbRegModAction'(Tmp),
    dfp_read_field_def_CbRegModMsg(Rest, 0, 0, F1,
				   NewFValue, F3, F4, F5).


d_field_CbRegModMsg_have_seen_before(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbRegModMsg_have_seen_before(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbRegModMsg_have_seen_before(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbRegModMsg(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5).


d_field_CbRegModMsg_utf8_regpath(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbRegModMsg_utf8_regpath(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbRegModMsg_utf8_regpath(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbRegModMsg(Rest2, 0, 0, F1, F2, F3,
				   NewFValue, F5).


d_field_CbRegModMsg_tamper(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbRegModMsg_tamper(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_CbRegModMsg_tamper(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbRegModMsg(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue).


skip_varint_CbRegModMsg(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5) ->
    skip_varint_CbRegModMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5);
skip_varint_CbRegModMsg(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_CbRegModMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5).


skip_length_delimited_CbRegModMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_CbRegModMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_CbRegModMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbRegModMsg(Rest2, 0, 0, F1, F2, F3,
				   F4, F5).


skip_32_CbRegModMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5) ->
    dfp_read_field_def_CbRegModMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5).


skip_64_CbRegModMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5) ->
    dfp_read_field_def_CbRegModMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5).


d_msg_CbStringMsg(Bin) ->
    dfp_read_field_def_CbStringMsg(Bin, 0, 0, undefined,
				   undefined, undefined).

dfp_read_field_def_CbStringMsg(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CbStringMsg_guid(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_CbStringMsg(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CbStringMsg_utf8string(Rest, Z1, Z2, F1, F2,
				   F3);
dfp_read_field_def_CbStringMsg(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CbStringMsg_string_type(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_CbStringMsg(<<>>, 0, 0, F1, F2,
			       F3) ->
    #{guid => F1, utf8string => F2, string_type => F3};
dfp_read_field_def_CbStringMsg(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_CbStringMsg(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_CbStringMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_CbStringMsg(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_CbStringMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_CbStringMsg_guid(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_CbStringMsg_utf8string(Rest, 0, 0, F1, F2, F3);
      24 ->
	  d_field_CbStringMsg_string_type(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbStringMsg(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_CbStringMsg(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_CbStringMsg(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_CbStringMsg(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_CbStringMsg(<<>>, 0, 0, F1, F2, F3) ->
    #{guid => F1, utf8string => F2, string_type => F3}.

d_field_CbStringMsg_guid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbStringMsg_guid(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3);
d_field_CbStringMsg_guid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbStringMsg(Rest, 0, 0, NewFValue,
				   F2, F3).


d_field_CbStringMsg_utf8string(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbStringMsg_utf8string(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
d_field_CbStringMsg_utf8string(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbStringMsg(Rest2, 0, 0, F1,
				   NewFValue, F3).


d_field_CbStringMsg_string_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbStringMsg_string_type(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_CbStringMsg_string_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbStringMsg.CbStringType'(Tmp),
    dfp_read_field_def_CbStringMsg(Rest, 0, 0, F1, F2,
				   NewFValue).


skip_varint_CbStringMsg(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_CbStringMsg(Rest, Z1, Z2, F1, F2, F3);
skip_varint_CbStringMsg(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_CbStringMsg(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_CbStringMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_CbStringMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_CbStringMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbStringMsg(Rest2, 0, 0, F1, F2, F3).


skip_32_CbStringMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_CbStringMsg(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_CbStringMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_CbStringMsg(Rest, Z1, Z2, F1, F2,
				   F3).


d_msg_CbHeaderMsg(Bin) ->
    dfp_read_field_def_CbHeaderMsg(Bin, 0, 0, undefined,
				   undefined, undefined, undefined, undefined,
				   undefined, undefined, undefined, undefined,
				   undefined, undefined, undefined).

dfp_read_field_def_CbHeaderMsg(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_version(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_bootid(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_eventid(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<32, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_timestamp(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<40, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_guid(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<48, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_filepath_string_guid(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<56, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_magic(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<64, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_filepath_string_guid(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12);
dfp_read_field_def_CbHeaderMsg(<<72, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_create_time(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<80, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_pid(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<90, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_md5(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<98, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12) ->
    d_field_CbHeaderMsg_process_path(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_CbHeaderMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    #{version => F1, bootid => F2, eventid => F3,
      timestamp => F4, process_guid => F5,
      filepath_string_guid => F6, magic => F7,
      process_filepath_string_guid => F8,
      process_create_time => F9, process_pid => F10,
      process_md5 => F11, process_path => F12};
dfp_read_field_def_CbHeaderMsg(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dg_read_field_def_CbHeaderMsg(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12).

dg_read_field_def_CbHeaderMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12)
    when N < 32 - 7 ->
    dg_read_field_def_CbHeaderMsg(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12);
dg_read_field_def_CbHeaderMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbHeaderMsg_version(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12);
      16 ->
	  d_field_CbHeaderMsg_bootid(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12);
      24 ->
	  d_field_CbHeaderMsg_eventid(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12);
      32 ->
	  d_field_CbHeaderMsg_timestamp(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12);
      40 ->
	  d_field_CbHeaderMsg_process_guid(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12);
      48 ->
	  d_field_CbHeaderMsg_filepath_string_guid(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12);
      56 ->
	  d_field_CbHeaderMsg_magic(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12);
      64 ->
	  d_field_CbHeaderMsg_process_filepath_string_guid(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12);
      72 ->
	  d_field_CbHeaderMsg_process_create_time(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12);
      80 ->
	  d_field_CbHeaderMsg_process_pid(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11,
					  F12);
      90 ->
	  d_field_CbHeaderMsg_process_md5(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11,
					  F12);
      98 ->
	  d_field_CbHeaderMsg_process_path(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbHeaderMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12);
	    1 ->
		skip_64_CbHeaderMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12);
	    2 ->
		skip_length_delimited_CbHeaderMsg(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12);
	    5 ->
		skip_32_CbHeaderMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12)
	  end
    end;
dg_read_field_def_CbHeaderMsg(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    #{version => F1, bootid => F2, eventid => F3,
      timestamp => F4, process_guid => F5,
      filepath_string_guid => F6, magic => F7,
      process_filepath_string_guid => F8,
      process_create_time => F9, process_pid => F10,
      process_md5 => F11, process_path => F12}.

d_field_CbHeaderMsg_version(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_version(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12);
d_field_CbHeaderMsg_version(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_bootid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12)
    when N < 57 ->
    d_field_CbHeaderMsg_bootid(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12);
d_field_CbHeaderMsg_bootid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				   F11, F12).


d_field_CbHeaderMsg_eventid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_eventid(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12);
d_field_CbHeaderMsg_eventid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_timestamp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_timestamp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12);
d_field_CbHeaderMsg_timestamp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
			      F11, F12) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_process_guid(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_guid(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_process_guid(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
				 F11, F12) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_filepath_string_guid(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_filepath_string_guid(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_filepath_string_guid(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
					 F9, F10, F11, F12) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_magic(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12)
    when N < 57 ->
    d_field_CbHeaderMsg_magic(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12);
d_field_CbHeaderMsg_magic(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10, F11,
			  F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, F8, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_process_filepath_string_guid(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_filepath_string_guid(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12);
d_field_CbHeaderMsg_process_filepath_string_guid(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, _, F9, F10, F11, F12) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, NewFValue, F9, F10, F11,
				   F12).


d_field_CbHeaderMsg_process_create_time(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_create_time(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_process_create_time(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					_, F10, F11, F12) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, NewFValue, F10, F11,
				   F12).


d_field_CbHeaderMsg_process_pid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_pid(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_process_pid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbHeaderMsg(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, NewFValue, F11, F12).


d_field_CbHeaderMsg_process_md5(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_md5(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_process_md5(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				_, F12) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbHeaderMsg(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, NewFValue, F12).


d_field_CbHeaderMsg_process_path(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12)
    when N < 57 ->
    d_field_CbHeaderMsg_process_path(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12);
d_field_CbHeaderMsg_process_path(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbHeaderMsg(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, NewFValue).


skip_varint_CbHeaderMsg(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			F12) ->
    skip_varint_CbHeaderMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12);
skip_varint_CbHeaderMsg(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			F12) ->
    dfp_read_field_def_CbHeaderMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12).


skip_length_delimited_CbHeaderMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12)
    when N < 57 ->
    skip_length_delimited_CbHeaderMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12);
skip_length_delimited_CbHeaderMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbHeaderMsg(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12).


skip_32_CbHeaderMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_CbHeaderMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12).


skip_64_CbHeaderMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_CbHeaderMsg(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12).


d_msg_CbEmetMitigationAction(Bin) ->
    dfp_read_field_def_CbEmetMitigationAction(Bin, 0, 0,
					      undefined).

dfp_read_field_def_CbEmetMitigationAction(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    d_field_CbEmetMitigationAction_mitigationType(Rest, Z1,
						  Z2, F1);
dfp_read_field_def_CbEmetMitigationAction(<<>>, 0, 0,
					  F1) ->
    #{mitigationType => F1};
dfp_read_field_def_CbEmetMitigationAction(Other, Z1, Z2,
					  F1) ->
    dg_read_field_def_CbEmetMitigationAction(Other, Z1, Z2,
					     F1).

dg_read_field_def_CbEmetMitigationAction(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_CbEmetMitigationAction(Rest, N + 7,
					     X bsl N + Acc, F1);
dg_read_field_def_CbEmetMitigationAction(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbEmetMitigationAction_mitigationType(Rest, 0,
							0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbEmetMitigationAction(Rest, 0, 0, F1);
	    1 -> skip_64_CbEmetMitigationAction(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_CbEmetMitigationAction(Rest, 0, 0,
							     F1);
	    5 -> skip_32_CbEmetMitigationAction(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_CbEmetMitigationAction(<<>>, 0, 0,
					 F1) ->
    #{mitigationType => F1}.

d_field_CbEmetMitigationAction_mitigationType(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    d_field_CbEmetMitigationAction_mitigationType(Rest,
						  N + 7, X bsl N + Acc, F1);
d_field_CbEmetMitigationAction_mitigationType(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(Tmp),
    dfp_read_field_def_CbEmetMitigationAction(Rest, 0, 0,
					      NewFValue).


skip_varint_CbEmetMitigationAction(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    skip_varint_CbEmetMitigationAction(Rest, Z1, Z2, F1);
skip_varint_CbEmetMitigationAction(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    dfp_read_field_def_CbEmetMitigationAction(Rest, Z1, Z2,
					      F1).


skip_length_delimited_CbEmetMitigationAction(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_CbEmetMitigationAction(Rest,
						 N + 7, X bsl N + Acc, F1);
skip_length_delimited_CbEmetMitigationAction(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbEmetMitigationAction(Rest2, 0, 0,
					      F1).


skip_32_CbEmetMitigationAction(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_CbEmetMitigationAction(Rest, Z1, Z2,
					      F1).


skip_64_CbEmetMitigationAction(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_CbEmetMitigationAction(Rest, Z1, Z2,
					      F1).


d_msg_CbEmetMitigationMsg(Bin) ->
    dfp_read_field_def_CbEmetMitigationMsg(Bin, 0, 0,
					   undefined, undefined, undefined,
					   undefined, undefined).

dfp_read_field_def_CbEmetMitigationMsg(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_CbEmetMitigationMsg_emetId(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5);
dfp_read_field_def_CbEmetMitigationMsg(<<16,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_CbEmetMitigationMsg_emetTimstamp(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5);
dfp_read_field_def_CbEmetMitigationMsg(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_CbEmetMitigationMsg_action(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5);
dfp_read_field_def_CbEmetMitigationMsg(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_CbEmetMitigationMsg_actionText(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
dfp_read_field_def_CbEmetMitigationMsg(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_CbEmetMitigationMsg_blocked(Rest, Z1, Z2, F1,
					F2, F3, F4, F5);
dfp_read_field_def_CbEmetMitigationMsg(<<>>, 0, 0, F1,
				       F2, F3, F4, F5) ->
    #{emetId => F1, emetTimstamp => F2, action => F3,
      actionText => F4, blocked => F5};
dfp_read_field_def_CbEmetMitigationMsg(Other, Z1, Z2,
				       F1, F2, F3, F4, F5) ->
    dg_read_field_def_CbEmetMitigationMsg(Other, Z1, Z2, F1,
					  F2, F3, F4, F5).

dg_read_field_def_CbEmetMitigationMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_CbEmetMitigationMsg(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_CbEmetMitigationMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbEmetMitigationMsg_emetId(Rest, 0, 0, F1, F2,
					     F3, F4, F5);
      16 ->
	  d_field_CbEmetMitigationMsg_emetTimstamp(Rest, 0, 0, F1,
						   F2, F3, F4, F5);
      26 ->
	  d_field_CbEmetMitigationMsg_action(Rest, 0, 0, F1, F2,
					     F3, F4, F5);
      34 ->
	  d_field_CbEmetMitigationMsg_actionText(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      40 ->
	  d_field_CbEmetMitigationMsg_blocked(Rest, 0, 0, F1, F2,
					      F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbEmetMitigationMsg(Rest, 0, 0, F1, F2, F3,
						F4, F5);
	    1 ->
		skip_64_CbEmetMitigationMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5);
	    2 ->
		skip_length_delimited_CbEmetMitigationMsg(Rest, 0, 0,
							  F1, F2, F3, F4, F5);
	    5 ->
		skip_32_CbEmetMitigationMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5)
	  end
    end;
dg_read_field_def_CbEmetMitigationMsg(<<>>, 0, 0, F1,
				      F2, F3, F4, F5) ->
    #{emetId => F1, emetTimstamp => F2, action => F3,
      actionText => F4, blocked => F5}.

d_field_CbEmetMitigationMsg_emetId(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbEmetMitigationMsg_emetId(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbEmetMitigationMsg_emetId(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbEmetMitigationMsg(Rest, 0, 0,
					   NewFValue, F2, F3, F4, F5).


d_field_CbEmetMitigationMsg_emetTimstamp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbEmetMitigationMsg_emetTimstamp(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbEmetMitigationMsg_emetTimstamp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbEmetMitigationMsg(Rest, 0, 0, F1,
					   NewFValue, F3, F4, F5).


d_field_CbEmetMitigationMsg_action(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbEmetMitigationMsg_action(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbEmetMitigationMsg_action(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbEmetMitigationAction'),
    dfp_read_field_def_CbEmetMitigationMsg(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  merge_msg_CbEmetMitigationAction(F3,
										   NewFValue)
					   end,
					   F4, F5).


d_field_CbEmetMitigationMsg_actionText(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbEmetMitigationMsg_actionText(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbEmetMitigationMsg_actionText(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbEmetMitigationMsg(Rest2, 0, 0, F1,
					   F2, F3, NewFValue, F5).


d_field_CbEmetMitigationMsg_blocked(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_CbEmetMitigationMsg_blocked(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_CbEmetMitigationMsg_blocked(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbEmetMitigationMsg(Rest, 0, 0, F1,
					   F2, F3, F4, NewFValue).


skip_varint_CbEmetMitigationMsg(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5) ->
    skip_varint_CbEmetMitigationMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
skip_varint_CbEmetMitigationMsg(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_CbEmetMitigationMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5).


skip_length_delimited_CbEmetMitigationMsg(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_CbEmetMitigationMsg(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
skip_length_delimited_CbEmetMitigationMsg(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbEmetMitigationMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5).


skip_32_CbEmetMitigationMsg(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_CbEmetMitigationMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5).


skip_64_CbEmetMitigationMsg(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_CbEmetMitigationMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5).


d_msg_CbProcessBlockedMsg(Bin) ->
    dfp_read_field_def_CbProcessBlockedMsg(Bin, 0, 0,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined, undefined,
					   undefined, undefined).

dfp_read_field_def_CbProcessBlockedMsg(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedType(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<16,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedEvent(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedmd5Hash(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedPath(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockResult(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<48,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockError(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
dfp_read_field_def_CbProcessBlockedMsg(<<56,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedPid(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
dfp_read_field_def_CbProcessBlockedMsg(<<64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedProcCreateTime(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11);
dfp_read_field_def_CbProcessBlockedMsg(<<74,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedCmdline(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<82,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedUid(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
dfp_read_field_def_CbProcessBlockedMsg(<<90,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11) ->
    d_field_CbProcessBlockedMsg_blockedUsername(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11);
dfp_read_field_def_CbProcessBlockedMsg(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11) ->
    #{blockedType => F1, blockedEvent => F2,
      blockedmd5Hash => F3, blockedPath => F4,
      blockResult => F5, blockError => F6, blockedPid => F7,
      blockedProcCreateTime => F8, blockedCmdline => F9,
      blockedUid => F10, blockedUsername => F11};
dfp_read_field_def_CbProcessBlockedMsg(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11) ->
    dg_read_field_def_CbProcessBlockedMsg(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11).

dg_read_field_def_CbProcessBlockedMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11)
    when N < 32 - 7 ->
    dg_read_field_def_CbProcessBlockedMsg(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11);
dg_read_field_def_CbProcessBlockedMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbProcessBlockedMsg_blockedType(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11);
      16 ->
	  d_field_CbProcessBlockedMsg_blockedEvent(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11);
      26 ->
	  d_field_CbProcessBlockedMsg_blockedmd5Hash(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11);
      34 ->
	  d_field_CbProcessBlockedMsg_blockedPath(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11);
      40 ->
	  d_field_CbProcessBlockedMsg_blockResult(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11);
      48 ->
	  d_field_CbProcessBlockedMsg_blockError(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      56 ->
	  d_field_CbProcessBlockedMsg_blockedPid(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      64 ->
	  d_field_CbProcessBlockedMsg_blockedProcCreateTime(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11);
      74 ->
	  d_field_CbProcessBlockedMsg_blockedCmdline(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11);
      82 ->
	  d_field_CbProcessBlockedMsg_blockedUid(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      90 ->
	  d_field_CbProcessBlockedMsg_blockedUsername(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbProcessBlockedMsg(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11);
	    1 ->
		skip_64_CbProcessBlockedMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11);
	    2 ->
		skip_length_delimited_CbProcessBlockedMsg(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11);
	    5 ->
		skip_32_CbProcessBlockedMsg(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11)
	  end
    end;
dg_read_field_def_CbProcessBlockedMsg(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10,
				      F11) ->
    #{blockedType => F1, blockedEvent => F2,
      blockedmd5Hash => F3, blockedPath => F4,
      blockResult => F5, blockError => F6, blockedPid => F7,
      blockedProcCreateTime => F8, blockedCmdline => F9,
      blockedUid => F10, blockedUsername => F11}.

d_field_CbProcessBlockedMsg_blockedType(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedType(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedType(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbProcessBlockedMsg.BlockType'(Tmp),
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedEvent(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedEvent(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedEvent(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbProcessBlockedMsg.BlockEvent'(Tmp),
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedmd5Hash(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedmd5Hash(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedmd5Hash(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, _, F4, F5, F6, F7,
					   F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, NewFValue, F4, F5, F6, F7, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedPath(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedPath(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedPath(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, _, F5, F6, F7, F8,
					F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, NewFValue, F5, F6, F7, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockResult(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockResult(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockResult(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
					F9, F10, F11) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_CbProcessBlockedMsg.BlockResult'(Tmp),
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, NewFValue, F6, F7, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockError(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockError(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockError(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
				       F9, F10, F11) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedPid(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedPid(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedPid(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
				       F9, F10, F11) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, NewFValue, F8,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedProcCreateTime(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedProcCreateTime(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedProcCreateTime(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, _, F9, F10, F11) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbProcessBlockedMsg(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, NewFValue,
					   F9, F10, F11).


d_field_CbProcessBlockedMsg_blockedCmdline(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedCmdline(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedCmdline(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, _, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   NewFValue, F10, F11).


d_field_CbProcessBlockedMsg_blockedUid(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedUid(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedUid(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, _, F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9,
					   NewFValue, F11).


d_field_CbProcessBlockedMsg_blockedUsername(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11)
    when N < 57 ->
    d_field_CbProcessBlockedMsg_blockedUsername(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11);
d_field_CbProcessBlockedMsg_blockedUsername(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   NewFValue).


skip_varint_CbProcessBlockedMsg(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    skip_varint_CbProcessBlockedMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11);
skip_varint_CbProcessBlockedMsg(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    dfp_read_field_def_CbProcessBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


skip_length_delimited_CbProcessBlockedMsg(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11)
    when N < 57 ->
    skip_length_delimited_CbProcessBlockedMsg(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11);
skip_length_delimited_CbProcessBlockedMsg(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbProcessBlockedMsg(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


skip_32_CbProcessBlockedMsg(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_CbProcessBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


skip_64_CbProcessBlockedMsg(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_CbProcessBlockedMsg(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11).


d_msg_CbCrossProcessMsg(Bin) ->
    dfp_read_field_def_CbCrossProcessMsg(Bin, 0, 0,
					 undefined, undefined, undefined).

dfp_read_field_def_CbCrossProcessMsg(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    d_field_CbCrossProcessMsg_open(Rest, Z1, Z2, F1, F2,
				   F3);
dfp_read_field_def_CbCrossProcessMsg(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    d_field_CbCrossProcessMsg_remotethread(Rest, Z1, Z2, F1,
					   F2, F3);
dfp_read_field_def_CbCrossProcessMsg(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    d_field_CbCrossProcessMsg_tamper(Rest, Z1, Z2, F1, F2,
				     F3);
dfp_read_field_def_CbCrossProcessMsg(<<>>, 0, 0, F1, F2,
				     F3) ->
    #{open => F1, remotethread => F2, tamper => F3};
dfp_read_field_def_CbCrossProcessMsg(Other, Z1, Z2, F1,
				     F2, F3) ->
    dg_read_field_def_CbCrossProcessMsg(Other, Z1, Z2, F1,
					F2, F3).

dg_read_field_def_CbCrossProcessMsg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_CbCrossProcessMsg(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
dg_read_field_def_CbCrossProcessMsg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbCrossProcessMsg_open(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_CbCrossProcessMsg_remotethread(Rest, 0, 0, F1,
						 F2, F3);
      24 ->
	  d_field_CbCrossProcessMsg_tamper(Rest, 0, 0, F1, F2,
					   F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbCrossProcessMsg(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_CbCrossProcessMsg(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_CbCrossProcessMsg(Rest, 0, 0, F1,
							F2, F3);
	    5 -> skip_32_CbCrossProcessMsg(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_CbCrossProcessMsg(<<>>, 0, 0, F1, F2,
				    F3) ->
    #{open => F1, remotethread => F2, tamper => F3}.

d_field_CbCrossProcessMsg_open(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbCrossProcessMsg_open(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
d_field_CbCrossProcessMsg_open(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbCrossProcessOpenMsg'),
    dfp_read_field_def_CbCrossProcessMsg(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_CbCrossProcessOpenMsg(F1,
										NewFValue)
					 end,
					 F2, F3).


d_field_CbCrossProcessMsg_remotethread(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbCrossProcessMsg_remotethread(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
d_field_CbCrossProcessMsg_remotethread(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbCreateRemoteThreadMsg'),
    dfp_read_field_def_CbCrossProcessMsg(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_CbCreateRemoteThreadMsg(F2,
										  NewFValue)
					 end,
					 F3).


d_field_CbCrossProcessMsg_tamper(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CbCrossProcessMsg_tamper(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
d_field_CbCrossProcessMsg_tamper(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbCrossProcessMsg(Rest, 0, 0, F1, F2,
					 NewFValue).


skip_varint_CbCrossProcessMsg(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3) ->
    skip_varint_CbCrossProcessMsg(Rest, Z1, Z2, F1, F2, F3);
skip_varint_CbCrossProcessMsg(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_CbCrossProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3).


skip_length_delimited_CbCrossProcessMsg(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_CbCrossProcessMsg(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
skip_length_delimited_CbCrossProcessMsg(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbCrossProcessMsg(Rest2, 0, 0, F1,
					 F2, F3).


skip_32_CbCrossProcessMsg(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3) ->
    dfp_read_field_def_CbCrossProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3).


skip_64_CbCrossProcessMsg(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3) ->
    dfp_read_field_def_CbCrossProcessMsg(Rest, Z1, Z2, F1,
					 F2, F3).


d_msg_CbServerEnvironmentMsg(Bin) ->
    dfp_read_field_def_CbServerEnvironmentMsg(Bin, 0, 0,
					      undefined).

dfp_read_field_def_CbServerEnvironmentMsg(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1) ->
    d_field_CbServerEnvironmentMsg_NodeId(Rest, Z1, Z2, F1);
dfp_read_field_def_CbServerEnvironmentMsg(<<>>, 0, 0,
					  F1) ->
    #{'NodeId' => F1};
dfp_read_field_def_CbServerEnvironmentMsg(Other, Z1, Z2,
					  F1) ->
    dg_read_field_def_CbServerEnvironmentMsg(Other, Z1, Z2,
					     F1).

dg_read_field_def_CbServerEnvironmentMsg(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_CbServerEnvironmentMsg(Rest, N + 7,
					     X bsl N + Acc, F1);
dg_read_field_def_CbServerEnvironmentMsg(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbServerEnvironmentMsg_NodeId(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbServerEnvironmentMsg(Rest, 0, 0, F1);
	    1 -> skip_64_CbServerEnvironmentMsg(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_CbServerEnvironmentMsg(Rest, 0, 0,
							     F1);
	    5 -> skip_32_CbServerEnvironmentMsg(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_CbServerEnvironmentMsg(<<>>, 0, 0,
					 F1) ->
    #{'NodeId' => F1}.

d_field_CbServerEnvironmentMsg_NodeId(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    d_field_CbServerEnvironmentMsg_NodeId(Rest, N + 7,
					  X bsl N + Acc, F1);
d_field_CbServerEnvironmentMsg_NodeId(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbServerEnvironmentMsg(Rest, 0, 0,
					      NewFValue).


skip_varint_CbServerEnvironmentMsg(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    skip_varint_CbServerEnvironmentMsg(Rest, Z1, Z2, F1);
skip_varint_CbServerEnvironmentMsg(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    dfp_read_field_def_CbServerEnvironmentMsg(Rest, Z1, Z2,
					      F1).


skip_length_delimited_CbServerEnvironmentMsg(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_CbServerEnvironmentMsg(Rest,
						 N + 7, X bsl N + Acc, F1);
skip_length_delimited_CbServerEnvironmentMsg(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbServerEnvironmentMsg(Rest2, 0, 0,
					      F1).


skip_32_CbServerEnvironmentMsg(<<_:32, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_CbServerEnvironmentMsg(Rest, Z1, Z2,
					      F1).


skip_64_CbServerEnvironmentMsg(<<_:64, Rest/binary>>,
			       Z1, Z2, F1) ->
    dfp_read_field_def_CbServerEnvironmentMsg(Rest, Z1, Z2,
					      F1).


d_msg_CbEnvironmentMsg(Bin) ->
    dfp_read_field_def_CbEnvironmentMsg(Bin, 0, 0,
					undefined, undefined).

dfp_read_field_def_CbEnvironmentMsg(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_CbEnvironmentMsg_endpoint(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_CbEnvironmentMsg(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    d_field_CbEnvironmentMsg_server(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_CbEnvironmentMsg(<<>>, 0, 0, F1,
				    F2) ->
    #{endpoint => F1, server => F2};
dfp_read_field_def_CbEnvironmentMsg(Other, Z1, Z2, F1,
				    F2) ->
    dg_read_field_def_CbEnvironmentMsg(Other, Z1, Z2, F1,
				       F2).

dg_read_field_def_CbEnvironmentMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_CbEnvironmentMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2);
dg_read_field_def_CbEnvironmentMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbEnvironmentMsg_endpoint(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_CbEnvironmentMsg_server(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbEnvironmentMsg(Rest, 0, 0, F1, F2);
	    1 -> skip_64_CbEnvironmentMsg(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_CbEnvironmentMsg(Rest, 0, 0, F1,
						       F2);
	    5 -> skip_32_CbEnvironmentMsg(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_CbEnvironmentMsg(<<>>, 0, 0, F1,
				   F2) ->
    #{endpoint => F1, server => F2}.

d_field_CbEnvironmentMsg_endpoint(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    d_field_CbEnvironmentMsg_endpoint(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
d_field_CbEnvironmentMsg_endpoint(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbEndpointEnvironmentMsg'),
    dfp_read_field_def_CbEnvironmentMsg(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_CbEndpointEnvironmentMsg(F1,
										  NewFValue)
					end,
					F2).


d_field_CbEnvironmentMsg_server(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_CbEnvironmentMsg_server(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_CbEnvironmentMsg_server(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbServerEnvironmentMsg'),
    dfp_read_field_def_CbEnvironmentMsg(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       merge_msg_CbServerEnvironmentMsg(F2,
										NewFValue)
					end).


skip_varint_CbEnvironmentMsg(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    skip_varint_CbEnvironmentMsg(Rest, Z1, Z2, F1, F2);
skip_varint_CbEnvironmentMsg(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2) ->
    dfp_read_field_def_CbEnvironmentMsg(Rest, Z1, Z2, F1,
					F2).


skip_length_delimited_CbEnvironmentMsg(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_CbEnvironmentMsg(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
skip_length_delimited_CbEnvironmentMsg(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbEnvironmentMsg(Rest2, 0, 0, F1,
					F2).


skip_32_CbEnvironmentMsg(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_CbEnvironmentMsg(Rest, Z1, Z2, F1,
					F2).


skip_64_CbEnvironmentMsg(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    dfp_read_field_def_CbEnvironmentMsg(Rest, Z1, Z2, F1,
					F2).


d_msg_CbVtLoadMsg(Bin) ->
    dfp_read_field_def_CbVtLoadMsg(Bin, 0, 0, undefined,
				   undefined).

dfp_read_field_def_CbVtLoadMsg(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2) ->
    d_field_CbVtLoadMsg_LoaderProcessExeMd5(Rest, Z1, Z2,
					    F1, F2);
dfp_read_field_def_CbVtLoadMsg(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2) ->
    d_field_CbVtLoadMsg_LoadedModuleMd5(Rest, Z1, Z2, F1,
					F2);
dfp_read_field_def_CbVtLoadMsg(<<>>, 0, 0, F1, F2) ->
    #{'LoaderProcessExeMd5' => F1, 'LoadedModuleMd5' => F2};
dfp_read_field_def_CbVtLoadMsg(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_CbVtLoadMsg(Other, Z1, Z2, F1, F2).

dg_read_field_def_CbVtLoadMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_CbVtLoadMsg(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
dg_read_field_def_CbVtLoadMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbVtLoadMsg_LoaderProcessExeMd5(Rest, 0, 0, F1,
						  F2);
      18 ->
	  d_field_CbVtLoadMsg_LoadedModuleMd5(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbVtLoadMsg(Rest, 0, 0, F1, F2);
	    1 -> skip_64_CbVtLoadMsg(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_CbVtLoadMsg(Rest, 0, 0, F1, F2);
	    5 -> skip_32_CbVtLoadMsg(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_CbVtLoadMsg(<<>>, 0, 0, F1, F2) ->
    #{'LoaderProcessExeMd5' => F1, 'LoadedModuleMd5' => F2}.

d_field_CbVtLoadMsg_LoaderProcessExeMd5(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    d_field_CbVtLoadMsg_LoaderProcessExeMd5(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
d_field_CbVtLoadMsg_LoaderProcessExeMd5(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtLoadMsg(Rest2, 0, 0, NewFValue,
				   F2).


d_field_CbVtLoadMsg_LoadedModuleMd5(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    d_field_CbVtLoadMsg_LoadedModuleMd5(Rest, N + 7,
					X bsl N + Acc, F1, F2);
d_field_CbVtLoadMsg_LoadedModuleMd5(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbVtLoadMsg(Rest2, 0, 0, F1,
				   NewFValue).


skip_varint_CbVtLoadMsg(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2) ->
    skip_varint_CbVtLoadMsg(Rest, Z1, Z2, F1, F2);
skip_varint_CbVtLoadMsg(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2) ->
    dfp_read_field_def_CbVtLoadMsg(Rest, Z1, Z2, F1, F2).


skip_length_delimited_CbVtLoadMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_CbVtLoadMsg(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
skip_length_delimited_CbVtLoadMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbVtLoadMsg(Rest2, 0, 0, F1, F2).


skip_32_CbVtLoadMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2) ->
    dfp_read_field_def_CbVtLoadMsg(Rest, Z1, Z2, F1, F2).


skip_64_CbVtLoadMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2) ->
    dfp_read_field_def_CbVtLoadMsg(Rest, Z1, Z2, F1, F2).


d_msg_CbStatisticsMsg(Bin) ->
    dfp_read_field_def_CbStatisticsMsg(Bin, 0, 0,
				       undefined).

dfp_read_field_def_CbStatisticsMsg(<<10, Rest/binary>>,
				   Z1, Z2, F1) ->
    d_field_CbStatisticsMsg_lin_stats(Rest, Z1, Z2, F1);
dfp_read_field_def_CbStatisticsMsg(<<>>, 0, 0, F1) ->
    #{lin_stats => F1};
dfp_read_field_def_CbStatisticsMsg(Other, Z1, Z2, F1) ->
    dg_read_field_def_CbStatisticsMsg(Other, Z1, Z2, F1).

dg_read_field_def_CbStatisticsMsg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_CbStatisticsMsg(Rest, N + 7,
				      X bsl N + Acc, F1);
dg_read_field_def_CbStatisticsMsg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_CbStatisticsMsg_lin_stats(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CbStatisticsMsg(Rest, 0, 0, F1);
	    1 -> skip_64_CbStatisticsMsg(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_CbStatisticsMsg(Rest, 0, 0, F1);
	    5 -> skip_32_CbStatisticsMsg(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_CbStatisticsMsg(<<>>, 0, 0, F1) ->
    #{lin_stats => F1}.

d_field_CbStatisticsMsg_lin_stats(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    d_field_CbStatisticsMsg_lin_stats(Rest, N + 7,
				      X bsl N + Acc, F1);
d_field_CbStatisticsMsg_lin_stats(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbLinStatsMsg'),
    dfp_read_field_def_CbStatisticsMsg(Rest2, 0, 0,
				       if F1 == undefined -> NewFValue;
					  true ->
					      merge_msg_CbLinStatsMsg(F1,
								      NewFValue)
				       end).


skip_varint_CbStatisticsMsg(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    skip_varint_CbStatisticsMsg(Rest, Z1, Z2, F1);
skip_varint_CbStatisticsMsg(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1) ->
    dfp_read_field_def_CbStatisticsMsg(Rest, Z1, Z2, F1).


skip_length_delimited_CbStatisticsMsg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_CbStatisticsMsg(Rest, N + 7,
					  X bsl N + Acc, F1);
skip_length_delimited_CbStatisticsMsg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbStatisticsMsg(Rest2, 0, 0, F1).


skip_32_CbStatisticsMsg(<<_:32, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_CbStatisticsMsg(Rest, Z1, Z2, F1).


skip_64_CbStatisticsMsg(<<_:64, Rest/binary>>, Z1, Z2,
			F1) ->
    dfp_read_field_def_CbStatisticsMsg(Rest, Z1, Z2, F1).


d_msg_CbNetConnMsg(Bin) ->
    dfp_read_field_def_CbNetConnMsg(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, undefined).

dfp_read_field_def_CbNetConnMsg(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_guid(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16);
dfp_read_field_def_CbNetConnMsg(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_ipv4Address(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_ipv6LoPart(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_ipv6HiPart(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_port(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16);
dfp_read_field_def_CbNetConnMsg(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_protocol(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<58, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_utf8_netpath(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<64, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_outbound(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<72, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_proxyConnection(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<80, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_proxyIpv4Address(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<88, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_proxyPort(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<98, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_proxyNetPath(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<104, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_remoteIpAddress(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<112, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_remotePort(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<120, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_localIpAddress(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<128, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    d_field_CbNetConnMsg_localPort(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16);
dfp_read_field_def_CbNetConnMsg(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16) ->
    #{guid => F1, ipv4Address => F2, ipv6LoPart => F3,
      ipv6HiPart => F4, port => F5, protocol => F6,
      utf8_netpath => F7, outbound => F8,
      proxyConnection => F9, proxyIpv4Address => F10,
      proxyPort => F11, proxyNetPath => F12,
      remoteIpAddress => F13, remotePort => F14,
      localIpAddress => F15, localPort => F16};
dfp_read_field_def_CbNetConnMsg(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16) ->
    dg_read_field_def_CbNetConnMsg(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16).

dg_read_field_def_CbNetConnMsg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16)
    when N < 32 - 7 ->
    dg_read_field_def_CbNetConnMsg(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16);
dg_read_field_def_CbNetConnMsg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbNetConnMsg_guid(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16);
      16 ->
	  d_field_CbNetConnMsg_ipv4Address(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16);
      24 ->
	  d_field_CbNetConnMsg_ipv6LoPart(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16);
      32 ->
	  d_field_CbNetConnMsg_ipv6HiPart(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16);
      40 ->
	  d_field_CbNetConnMsg_port(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16);
      48 ->
	  d_field_CbNetConnMsg_protocol(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16);
      58 ->
	  d_field_CbNetConnMsg_utf8_netpath(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16);
      64 ->
	  d_field_CbNetConnMsg_outbound(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16);
      72 ->
	  d_field_CbNetConnMsg_proxyConnection(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16);
      80 ->
	  d_field_CbNetConnMsg_proxyIpv4Address(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16);
      88 ->
	  d_field_CbNetConnMsg_proxyPort(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16);
      98 ->
	  d_field_CbNetConnMsg_proxyNetPath(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16);
      104 ->
	  d_field_CbNetConnMsg_remoteIpAddress(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16);
      112 ->
	  d_field_CbNetConnMsg_remotePort(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16);
      120 ->
	  d_field_CbNetConnMsg_localIpAddress(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16);
      128 ->
	  d_field_CbNetConnMsg_localPort(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbNetConnMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, F9, F10, F11, F12, F13,
					 F14, F15, F16);
	    1 ->
		skip_64_CbNetConnMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16);
	    2 ->
		skip_length_delimited_CbNetConnMsg(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16);
	    5 ->
		skip_32_CbNetConnMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16)
	  end
    end;
dg_read_field_def_CbNetConnMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16) ->
    #{guid => F1, ipv4Address => F2, ipv6LoPart => F3,
      ipv6HiPart => F4, port => F5, protocol => F6,
      utf8_netpath => F7, outbound => F8,
      proxyConnection => F9, proxyIpv4Address => F10,
      proxyPort => F11, proxyNetPath => F12,
      remoteIpAddress => F13, remotePort => F14,
      localIpAddress => F15, localPort => F16}.

d_field_CbNetConnMsg_guid(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_guid(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16);
d_field_CbNetConnMsg_guid(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_ipv4Address(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_ipv4Address(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_ipv4Address(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				    F11, F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_ipv6LoPart(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_ipv6LoPart(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_ipv6LoPart(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_ipv6HiPart(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_ipv6HiPart(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_ipv6HiPart(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_port(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_port(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16);
d_field_CbNetConnMsg_port(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_protocol(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_protocol(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_protocol(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_CbNetConnMsg.ProtocolType'(Tmp),
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_utf8_netpath(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_utf8_netpath(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15,
				      F16);
d_field_CbNetConnMsg_utf8_netpath(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbNetConnMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_outbound(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_outbound(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_outbound(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			      F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, NewFValue, F9, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_proxyConnection(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_proxyConnection(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16);
d_field_CbNetConnMsg_proxyConnection(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _,
				     F10, F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, NewFValue, F10, F11,
				    F12, F13, F14, F15, F16).


d_field_CbNetConnMsg_proxyIpv4Address(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_proxyIpv4Address(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16);
d_field_CbNetConnMsg_proxyIpv4Address(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, _, F11, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				    F13, F14, F15, F16).


d_field_CbNetConnMsg_proxyPort(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_proxyPort(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_proxyPort(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       _, F12, F13, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				    F13, F14, F15, F16).


d_field_CbNetConnMsg_proxyNetPath(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_proxyNetPath(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15,
				      F16);
d_field_CbNetConnMsg_proxyNetPath(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15, F16) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbNetConnMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				    F13, F14, F15, F16).


d_field_CbNetConnMsg_remoteIpAddress(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_remoteIpAddress(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16);
d_field_CbNetConnMsg_remoteIpAddress(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, _, F14, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    NewFValue, F14, F15, F16).


d_field_CbNetConnMsg_remotePort(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_remotePort(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_remotePort(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, _, F15, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    NewFValue, F15, F16).


d_field_CbNetConnMsg_localIpAddress(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_localIpAddress(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16);
d_field_CbNetConnMsg_localIpAddress(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, _, F16) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, NewFValue, F16).


d_field_CbNetConnMsg_localPort(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    d_field_CbNetConnMsg_localPort(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16);
d_field_CbNetConnMsg_localPort(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_CbNetConnMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, NewFValue).


skip_varint_CbNetConnMsg(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16) ->
    skip_varint_CbNetConnMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16);
skip_varint_CbNetConnMsg(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16) ->
    dfp_read_field_def_CbNetConnMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16).


skip_length_delimited_CbNetConnMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16)
    when N < 57 ->
    skip_length_delimited_CbNetConnMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16);
skip_length_delimited_CbNetConnMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbNetConnMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16).


skip_32_CbNetConnMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16) ->
    dfp_read_field_def_CbNetConnMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16).


skip_64_CbNetConnMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16) ->
    dfp_read_field_def_CbNetConnMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16).


d_msg_CbProcessMsg(Bin) ->
    dfp_read_field_def_CbProcessMsg(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, undefined, undefined,
				    undefined, undefined, [], undefined).

dfp_read_field_def_CbProcessMsg(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_pid(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17);
dfp_read_field_def_CbProcessMsg(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_created(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_parent_pid(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_parent_create_time(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17);
dfp_read_field_def_CbProcessMsg(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_parent_guid(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<50, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_md5hash(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<56, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_have_seen_before(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<64, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_deprecated(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<74, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_commandline(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<82, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_parent_md5(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<90, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_parent_path(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<96, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_creationobserved(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<104, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_expect_followon_w_md5(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17);
dfp_read_field_def_CbProcessMsg(<<114, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_uid(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17);
dfp_read_field_def_CbProcessMsg(<<122, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_username(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<130, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_actions(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<136, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    d_field_CbProcessMsg_actionsAreFromGPO(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17);
dfp_read_field_def_CbProcessMsg(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17) ->
    #{pid => F1, created => F2, parent_pid => F3,
      parent_create_time => F4, parent_guid => F5,
      md5hash => F6, have_seen_before => F7, deprecated => F8,
      commandline => F9, parent_md5 => F10,
      parent_path => F11, creationobserved => F12,
      expect_followon_w_md5 => F13, uid => F14,
      username => F15, actions => lists:reverse(F16),
      actionsAreFromGPO => F17};
dfp_read_field_def_CbProcessMsg(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17) ->
    dg_read_field_def_CbProcessMsg(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, F17).

dg_read_field_def_CbProcessMsg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17)
    when N < 32 - 7 ->
    dg_read_field_def_CbProcessMsg(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17);
dg_read_field_def_CbProcessMsg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CbProcessMsg_pid(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17);
      16 ->
	  d_field_CbProcessMsg_created(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17);
      24 ->
	  d_field_CbProcessMsg_parent_pid(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17);
      32 ->
	  d_field_CbProcessMsg_parent_create_time(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17);
      40 ->
	  d_field_CbProcessMsg_parent_guid(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17);
      50 ->
	  d_field_CbProcessMsg_md5hash(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17);
      56 ->
	  d_field_CbProcessMsg_have_seen_before(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17);
      64 ->
	  d_field_CbProcessMsg_deprecated(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17);
      74 ->
	  d_field_CbProcessMsg_commandline(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17);
      82 ->
	  d_field_CbProcessMsg_parent_md5(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17);
      90 ->
	  d_field_CbProcessMsg_parent_path(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17);
      96 ->
	  d_field_CbProcessMsg_creationobserved(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17);
      104 ->
	  d_field_CbProcessMsg_expect_followon_w_md5(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17);
      114 ->
	  d_field_CbProcessMsg_uid(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17);
      122 ->
	  d_field_CbProcessMsg_username(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17);
      130 ->
	  d_field_CbProcessMsg_actions(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17);
      136 ->
	  d_field_CbProcessMsg_actionsAreFromGPO(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbProcessMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, F9, F10, F11, F12, F13,
					 F14, F15, F16, F17);
	    1 ->
		skip_64_CbProcessMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16, F17);
	    2 ->
		skip_length_delimited_CbProcessMsg(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17);
	    5 ->
		skip_32_CbProcessMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16, F17)
	  end
    end;
dg_read_field_def_CbProcessMsg(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16, F17) ->
    #{pid => F1, created => F2, parent_pid => F3,
      parent_create_time => F4, parent_guid => F5,
      md5hash => F6, have_seen_before => F7, deprecated => F8,
      commandline => F9, parent_md5 => F10,
      parent_path => F11, creationobserved => F12,
      expect_followon_w_md5 => F13, uid => F14,
      username => F15, actions => lists:reverse(F16),
      actionsAreFromGPO => F17}.

d_field_CbProcessMsg_pid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_pid(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17);
d_field_CbProcessMsg_pid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_created(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_created(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17);
d_field_CbProcessMsg_created(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				    F11, F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_parent_pid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_parent_pid(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17);
d_field_CbProcessMsg_parent_pid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_parent_create_time(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17)
    when N < 57 ->
    d_field_CbProcessMsg_parent_create_time(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17);
d_field_CbProcessMsg_parent_create_time(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, _, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_parent_guid(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_parent_guid(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17);
d_field_CbProcessMsg_parent_guid(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, F17) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_md5hash(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_md5hash(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17);
d_field_CbProcessMsg_md5hash(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_have_seen_before(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17)
    when N < 57 ->
    d_field_CbProcessMsg_have_seen_before(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17);
d_field_CbProcessMsg_have_seen_before(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_deprecated(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_deprecated(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17);
d_field_CbProcessMsg_deprecated(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
				F11, F12, F13, F14, F15, F16, F17) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, NewFValue, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_commandline(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_commandline(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17);
d_field_CbProcessMsg_commandline(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				 F11, F12, F13, F14, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, NewFValue, F10, F11,
				    F12, F13, F14, F15, F16, F17).


d_field_CbProcessMsg_parent_md5(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_parent_md5(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17);
d_field_CbProcessMsg_parent_md5(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12, F13, F14, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				    F13, F14, F15, F16, F17).


d_field_CbProcessMsg_parent_path(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_parent_path(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17);
d_field_CbProcessMsg_parent_path(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, _, F12, F13, F14, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				    F13, F14, F15, F16, F17).


d_field_CbProcessMsg_creationobserved(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17)
    when N < 57 ->
    d_field_CbProcessMsg_creationobserved(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17);
d_field_CbProcessMsg_creationobserved(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, _, F13, F14, F15, F16,
				      F17) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				    F13, F14, F15, F16, F17).


d_field_CbProcessMsg_expect_followon_w_md5(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_expect_followon_w_md5(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17);
d_field_CbProcessMsg_expect_followon_w_md5(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, _, F14, F15,
					   F16, F17) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    NewFValue, F14, F15, F16, F17).


d_field_CbProcessMsg_uid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_uid(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17);
d_field_CbProcessMsg_uid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, _, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    NewFValue, F15, F16, F17).


d_field_CbProcessMsg_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_username(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17);
d_field_CbProcessMsg_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, _, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, NewFValue, F16, F17).


d_field_CbProcessMsg_actions(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    d_field_CbProcessMsg_actions(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17);
d_field_CbProcessMsg_actions(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbEmetMitigationAction'),
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, [NewFValue | F16], F17).


d_field_CbProcessMsg_actionsAreFromGPO(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17)
    when N < 57 ->
    d_field_CbProcessMsg_actionsAreFromGPO(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17);
d_field_CbProcessMsg_actionsAreFromGPO(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CbProcessMsg(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, NewFValue).


skip_varint_CbProcessMsg(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17) ->
    skip_varint_CbProcessMsg(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17);
skip_varint_CbProcessMsg(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17) ->
    dfp_read_field_def_CbProcessMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17).


skip_length_delimited_CbProcessMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17)
    when N < 57 ->
    skip_length_delimited_CbProcessMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17);
skip_length_delimited_CbProcessMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbProcessMsg(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, F17).


skip_32_CbProcessMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16, F17) ->
    dfp_read_field_def_CbProcessMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17).


skip_64_CbProcessMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16, F17) ->
    dfp_read_field_def_CbProcessMsg(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17).


d_msg_CbEventMsg(Bin) ->
    dfp_read_field_def_CbEventMsg(Bin, 0, 0, undefined, [],
				  undefined, undefined, undefined, undefined,
				  undefined, undefined, undefined, undefined,
				  undefined, undefined, undefined, undefined,
				  undefined, undefined, undefined, undefined).

dfp_read_field_def_CbEventMsg(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_header(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_strings(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_process(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_modload(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_filemod(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_network(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<58, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_regmod(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<66, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_stats(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<74, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_module(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<82, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_vtwrite(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<90, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_vtload(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<98, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_childproc(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<106, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_env(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			   F17, F18);
dfp_read_field_def_CbEventMsg(<<114, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_crossproc(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<122, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_tamperAlert(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<130, 1, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_blocked(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<138, 1, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_emet(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<146, 1, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18) ->
    d_field_CbEventMsg_netconnBlocked(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18);
dfp_read_field_def_CbEventMsg(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			      F15, F16, F17, F18) ->
    #{header => F1, strings => lists:reverse(F2),
      process => F3, modload => F4, filemod => F5,
      network => F6, regmod => F7, stats => F8, module => F9,
      vtwrite => F10, vtload => F11, childproc => F12,
      env => F13, crossproc => F14, tamperAlert => F15,
      blocked => F16, emet => F17, netconnBlocked => F18};
dfp_read_field_def_CbEventMsg(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			      F15, F16, F17, F18) ->
    dg_read_field_def_CbEventMsg(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18).

dg_read_field_def_CbEventMsg(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 32 - 7 ->
    dg_read_field_def_CbEventMsg(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18);
dg_read_field_def_CbEventMsg(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CbEventMsg_header(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18);
      18 ->
	  d_field_CbEventMsg_strings(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      26 ->
	  d_field_CbEventMsg_process(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      34 ->
	  d_field_CbEventMsg_modload(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      42 ->
	  d_field_CbEventMsg_filemod(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      50 ->
	  d_field_CbEventMsg_network(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      58 ->
	  d_field_CbEventMsg_regmod(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18);
      66 ->
	  d_field_CbEventMsg_stats(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18);
      74 ->
	  d_field_CbEventMsg_module(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18);
      82 ->
	  d_field_CbEventMsg_vtwrite(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      90 ->
	  d_field_CbEventMsg_vtload(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18);
      98 ->
	  d_field_CbEventMsg_childproc(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18);
      106 ->
	  d_field_CbEventMsg_env(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				 F16, F17, F18);
      114 ->
	  d_field_CbEventMsg_crossproc(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18);
      122 ->
	  d_field_CbEventMsg_tamperAlert(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18);
      130 ->
	  d_field_CbEventMsg_blocked(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18);
      138 ->
	  d_field_CbEventMsg_emet(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18);
      146 ->
	  d_field_CbEventMsg_netconnBlocked(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CbEventMsg(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18);
	    1 ->
		skip_64_CbEventMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18);
	    2 ->
		skip_length_delimited_CbEventMsg(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11, F12, F13, F14, F15, F16,
						 F17, F18);
	    5 ->
		skip_32_CbEventMsg(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18)
	  end
    end;
dg_read_field_def_CbEventMsg(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18) ->
    #{header => F1, strings => lists:reverse(F2),
      process => F3, modload => F4, filemod => F5,
      network => F6, regmod => F7, stats => F8, module => F9,
      vtwrite => F10, vtload => F11, childproc => F12,
      env => F13, crossproc => F14, tamperAlert => F15,
      blocked => F16, emet => F17, netconnBlocked => F18}.

d_field_CbEventMsg_header(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_header(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_header(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbHeaderMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbHeaderMsg(F1, NewFValue)
				  end,
				  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_strings(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_strings(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_strings(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbStringMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1,
				  [NewFValue | F2], F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_process(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_process(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_process(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbProcessMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2,
				  if F3 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbProcessMsg(F3, NewFValue)
				  end,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18).


d_field_CbEventMsg_modload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_modload(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_modload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbModuleLoadMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  if F4 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbModuleLoadMsg(F4,
								   NewFValue)
				  end,
				  F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				  F15, F16, F17, F18).


d_field_CbEventMsg_filemod(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_filemod(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_filemod(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbFileModMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4,
				  if F5 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbFileModMsg(F5, NewFValue)
				  end,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, F17, F18).


d_field_CbEventMsg_network(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_network(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_network(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbNetConnMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5,
				  if F6 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbNetConnMsg(F6, NewFValue)
				  end,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, F18).


d_field_CbEventMsg_regmod(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_regmod(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_regmod(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbRegModMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6,
				  if F7 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbRegModMsg(F7, NewFValue)
				  end,
				  F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  F17, F18).


d_field_CbEventMsg_stats(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_stats(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18);
d_field_CbEventMsg_stats(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbStatisticsMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7,
				  if F8 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbStatisticsMsg(F8,
								   NewFValue)
				  end,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18).


d_field_CbEventMsg_module(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_module(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_module(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbModuleInfoMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8,
				  if F9 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbModuleInfoMsg(F9,
								   NewFValue)
				  end,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_vtwrite(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_vtwrite(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_vtwrite(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbVtWriteMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9,
				  if F10 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbVtWriteMsg(F10, NewFValue)
				  end,
				  F11, F12, F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_vtload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_vtload(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_vtload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbVtLoadMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10,
				  if F11 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbVtLoadMsg(F11, NewFValue)
				  end,
				  F12, F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_childproc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_childproc(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_childproc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbChildProcessMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11,
				  if F12 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbChildProcessMsg(F12,
								     NewFValue)
				  end,
				  F13, F14, F15, F16, F17, F18).


d_field_CbEventMsg_env(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_env(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14, F15, F16, F17, F18);
d_field_CbEventMsg_env(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbEnvironmentMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  if F13 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbEnvironmentMsg(F13,
								    NewFValue)
				  end,
				  F14, F15, F16, F17, F18).


d_field_CbEventMsg_crossproc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_crossproc(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_crossproc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbCrossProcessMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  if F14 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbCrossProcessMsg(F14,
								     NewFValue)
				  end,
				  F15, F16, F17, F18).


d_field_CbEventMsg_tamperAlert(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_tamperAlert(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18);
d_field_CbEventMsg_tamperAlert(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbTamperAlertMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14,
				  if F15 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbTamperAlertMsg(F15,
								    NewFValue)
				  end,
				  F16, F17, F18).


d_field_CbEventMsg_blocked(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_blocked(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18);
d_field_CbEventMsg_blocked(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbProcessBlockedMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15,
				  if F16 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbProcessBlockedMsg(F16,
								       NewFValue)
				  end,
				  F17, F18).


d_field_CbEventMsg_emet(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_emet(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, F17, F18);
d_field_CbEventMsg_emet(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, F17, F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbEmetMitigationMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16,
				  if F17 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbEmetMitigationMsg(F17,
								       NewFValue)
				  end,
				  F18).


d_field_CbEventMsg_netconnBlocked(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    d_field_CbEventMsg_netconnBlocked(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18);
d_field_CbEventMsg_netconnBlocked(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17,
				  F18) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CbNetConnBlockedMsg'),
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17,
				  if F18 == undefined -> NewFValue;
				     true ->
					 merge_msg_CbNetConnBlockedMsg(F18,
								       NewFValue)
				  end).


skip_varint_CbEventMsg(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18) ->
    skip_varint_CbEventMsg(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			   F17, F18);
skip_varint_CbEventMsg(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, F17, F18) ->
    dfp_read_field_def_CbEventMsg(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18).


skip_length_delimited_CbEventMsg(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18)
    when N < 57 ->
    skip_length_delimited_CbEventMsg(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18);
skip_length_delimited_CbEventMsg(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CbEventMsg(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18).


skip_32_CbEventMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		   F15, F16, F17, F18) ->
    dfp_read_field_def_CbEventMsg(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18).


skip_64_CbEventMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		   F15, F16, F17, F18) ->
    dfp_read_field_def_CbEventMsg(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18).




merge_msgs(Prev, New, MsgName) ->
    case MsgName of
      'CbEndpointEnvironmentMsg' ->
	  merge_msg_CbEndpointEnvironmentMsg(Prev, New);
      'CbFileModMsg' -> merge_msg_CbFileModMsg(Prev, New);
      'CbTamperAlertMsg' ->
	  merge_msg_CbTamperAlertMsg(Prev, New);
      'CbVtWriteMsg' -> merge_msg_CbVtWriteMsg(Prev, New);
      'CbModuleInfoMsg' ->
	  merge_msg_CbModuleInfoMsg(Prev, New);
      'CbLinStatsMsg' -> merge_msg_CbLinStatsMsg(Prev, New);
      'CbChildProcessMsg' ->
	  merge_msg_CbChildProcessMsg(Prev, New);
      'CbCrossProcessOpenMsg' ->
	  merge_msg_CbCrossProcessOpenMsg(Prev, New);
      'CbModuleLoadMsg' ->
	  merge_msg_CbModuleLoadMsg(Prev, New);
      'CbNetConnBlockedMsg' ->
	  merge_msg_CbNetConnBlockedMsg(Prev, New);
      'CbCreateRemoteThreadMsg' ->
	  merge_msg_CbCreateRemoteThreadMsg(Prev, New);
      'CbRegModMsg' -> merge_msg_CbRegModMsg(Prev, New);
      'CbStringMsg' -> merge_msg_CbStringMsg(Prev, New);
      'CbHeaderMsg' -> merge_msg_CbHeaderMsg(Prev, New);
      'CbEmetMitigationAction' ->
	  merge_msg_CbEmetMitigationAction(Prev, New);
      'CbEmetMitigationMsg' ->
	  merge_msg_CbEmetMitigationMsg(Prev, New);
      'CbProcessBlockedMsg' ->
	  merge_msg_CbProcessBlockedMsg(Prev, New);
      'CbCrossProcessMsg' ->
	  merge_msg_CbCrossProcessMsg(Prev, New);
      'CbServerEnvironmentMsg' ->
	  merge_msg_CbServerEnvironmentMsg(Prev, New);
      'CbEnvironmentMsg' ->
	  merge_msg_CbEnvironmentMsg(Prev, New);
      'CbVtLoadMsg' -> merge_msg_CbVtLoadMsg(Prev, New);
      'CbStatisticsMsg' ->
	  merge_msg_CbStatisticsMsg(Prev, New);
      'CbNetConnMsg' -> merge_msg_CbNetConnMsg(Prev, New);
      'CbProcessMsg' -> merge_msg_CbProcessMsg(Prev, New);
      'CbEventMsg' -> merge_msg_CbEventMsg(Prev, New)
    end.

merge_msg_CbEndpointEnvironmentMsg(Prev, undefined) ->
    Prev;
merge_msg_CbEndpointEnvironmentMsg(undefined, New) ->
    New;
merge_msg_CbEndpointEnvironmentMsg(#{'SensorId' :=
					 PFSensorId,
				     'SensorHostName' := PFSensorHostName,
				     'HostId' := PFHostId},
				   #{'SensorId' := NFSensorId,
				     'SensorHostName' := NFSensorHostName,
				     'HostId' := NFHostId}) ->
    #{'SensorId' =>
	  if NFSensorId =:= undefined -> PFSensorId;
	     true -> NFSensorId
	  end,
      'SensorHostName' =>
	  if NFSensorHostName =:= undefined -> PFSensorHostName;
	     true -> NFSensorHostName
	  end,
      'HostId' =>
	  if NFHostId =:= undefined -> PFHostId;
	     true -> NFHostId
	  end}.

merge_msg_CbFileModMsg(Prev, undefined) -> Prev;
merge_msg_CbFileModMsg(undefined, New) -> New;
merge_msg_CbFileModMsg(#{guid := PFguid,
			 action := PFaction,
			 have_seen_before := PFhave_seen_before,
			 md5hash := PFmd5hash, type := PFtype,
			 tamper := PFtamper},
		       #{guid := NFguid, action := NFaction,
			 have_seen_before := NFhave_seen_before,
			 md5hash := NFmd5hash, type := NFtype,
			 tamper := NFtamper}) ->
    #{guid =>
	  if NFguid =:= undefined -> PFguid;
	     true -> NFguid
	  end,
      action =>
	  if NFaction =:= undefined -> PFaction;
	     true -> NFaction
	  end,
      have_seen_before =>
	  if NFhave_seen_before =:= undefined ->
		 PFhave_seen_before;
	     true -> NFhave_seen_before
	  end,
      md5hash =>
	  if NFmd5hash =:= undefined -> PFmd5hash;
	     true -> NFmd5hash
	  end,
      type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      tamper =>
	  if NFtamper =:= undefined -> PFtamper;
	     true -> NFtamper
	  end}.

merge_msg_CbTamperAlertMsg(Prev, undefined) -> Prev;
merge_msg_CbTamperAlertMsg(undefined, New) -> New;
merge_msg_CbTamperAlertMsg(#{type := PFtype},
			   #{type := NFtype}) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end}.

merge_msg_CbVtWriteMsg(Prev, undefined) -> Prev;
merge_msg_CbVtWriteMsg(undefined, New) -> New;
merge_msg_CbVtWriteMsg(#{'WritingProcessExeMd5' :=
			     PFWritingProcessExeMd5,
			 'FileWrittenMd5' := PFFileWrittenMd5,
			 'FileWrittenIsPeModuleHint' :=
			     PFFileWrittenIsPeModuleHint,
			 'WritingProcessFilename' := PFWritingProcessFilename,
			 'FileWrittenFilename' := PFFileWrittenFilename},
		       #{'WritingProcessExeMd5' := NFWritingProcessExeMd5,
			 'FileWrittenMd5' := NFFileWrittenMd5,
			 'FileWrittenIsPeModuleHint' :=
			     NFFileWrittenIsPeModuleHint,
			 'WritingProcessFilename' := NFWritingProcessFilename,
			 'FileWrittenFilename' := NFFileWrittenFilename}) ->
    #{'WritingProcessExeMd5' =>
	  if NFWritingProcessExeMd5 =:= undefined ->
		 PFWritingProcessExeMd5;
	     true -> NFWritingProcessExeMd5
	  end,
      'FileWrittenMd5' =>
	  if NFFileWrittenMd5 =:= undefined -> PFFileWrittenMd5;
	     true -> NFFileWrittenMd5
	  end,
      'FileWrittenIsPeModuleHint' =>
	  if NFFileWrittenIsPeModuleHint =:= undefined ->
		 PFFileWrittenIsPeModuleHint;
	     true -> NFFileWrittenIsPeModuleHint
	  end,
      'WritingProcessFilename' =>
	  if NFWritingProcessFilename =:= undefined ->
		 PFWritingProcessFilename;
	     true -> NFWritingProcessFilename
	  end,
      'FileWrittenFilename' =>
	  if NFFileWrittenFilename =:= undefined ->
		 PFFileWrittenFilename;
	     true -> NFFileWrittenFilename
	  end}.

merge_msg_CbModuleInfoMsg(Prev, undefined) -> Prev;
merge_msg_CbModuleInfoMsg(undefined, New) -> New;
merge_msg_CbModuleInfoMsg(#{md5 := PFmd5,
			    'CopiedModuleLength' := PFCopiedModuleLength,
			    'OriginalModuleLength' := PFOriginalModuleLength,
			    utf8_FileDescription := PFutf8_FileDescription,
			    utf8_CompanyName := PFutf8_CompanyName,
			    utf8_ProductName := PFutf8_ProductName,
			    utf8_FileVersion := PFutf8_FileVersion,
			    utf8_Comments := PFutf8_Comments,
			    utf8_LegalCopyright := PFutf8_LegalCopyright,
			    utf8_LegalTrademark := PFutf8_LegalTrademark,
			    utf8_InternalName := PFutf8_InternalName,
			    utf8_OriginalFileName := PFutf8_OriginalFileName,
			    utf8_ProductDescription :=
				PFutf8_ProductDescription,
			    utf8_ProductVersion := PFutf8_ProductVersion,
			    utf8_PrivateBuild := PFutf8_PrivateBuild,
			    utf8_SpecialBuild := PFutf8_SpecialBuild,
			    utf8_DigSig_Publisher := PFutf8_DigSig_Publisher,
			    utf8_DigSig_ProgramName :=
				PFutf8_DigSig_ProgramName,
			    utf8_DigSig_IssuerName := PFutf8_DigSig_IssuerName,
			    utf8_DigSig_SubjectName :=
				PFutf8_DigSig_SubjectName,
			    utf8_DigSig_Result := PFutf8_DigSig_Result,
			    utf8_DigSig_ResultCode := PFutf8_DigSig_ResultCode,
			    utf8_DigSig_SignTime := PFutf8_DigSig_SignTime,
			    'Icon' := PFIcon,
			    'ImageFileHeader' := PFImageFileHeader,
			    utf8_OnDiskFilename := PFutf8_OnDiskFilename},
			  #{md5 := NFmd5,
			    'CopiedModuleLength' := NFCopiedModuleLength,
			    'OriginalModuleLength' := NFOriginalModuleLength,
			    utf8_FileDescription := NFutf8_FileDescription,
			    utf8_CompanyName := NFutf8_CompanyName,
			    utf8_ProductName := NFutf8_ProductName,
			    utf8_FileVersion := NFutf8_FileVersion,
			    utf8_Comments := NFutf8_Comments,
			    utf8_LegalCopyright := NFutf8_LegalCopyright,
			    utf8_LegalTrademark := NFutf8_LegalTrademark,
			    utf8_InternalName := NFutf8_InternalName,
			    utf8_OriginalFileName := NFutf8_OriginalFileName,
			    utf8_ProductDescription :=
				NFutf8_ProductDescription,
			    utf8_ProductVersion := NFutf8_ProductVersion,
			    utf8_PrivateBuild := NFutf8_PrivateBuild,
			    utf8_SpecialBuild := NFutf8_SpecialBuild,
			    utf8_DigSig_Publisher := NFutf8_DigSig_Publisher,
			    utf8_DigSig_ProgramName :=
				NFutf8_DigSig_ProgramName,
			    utf8_DigSig_IssuerName := NFutf8_DigSig_IssuerName,
			    utf8_DigSig_SubjectName :=
				NFutf8_DigSig_SubjectName,
			    utf8_DigSig_Result := NFutf8_DigSig_Result,
			    utf8_DigSig_ResultCode := NFutf8_DigSig_ResultCode,
			    utf8_DigSig_SignTime := NFutf8_DigSig_SignTime,
			    'Icon' := NFIcon,
			    'ImageFileHeader' := NFImageFileHeader,
			    utf8_OnDiskFilename := NFutf8_OnDiskFilename}) ->
    #{md5 =>
	  if NFmd5 =:= undefined -> PFmd5;
	     true -> NFmd5
	  end,
      'CopiedModuleLength' =>
	  if NFCopiedModuleLength =:= undefined ->
		 PFCopiedModuleLength;
	     true -> NFCopiedModuleLength
	  end,
      'OriginalModuleLength' =>
	  if NFOriginalModuleLength =:= undefined ->
		 PFOriginalModuleLength;
	     true -> NFOriginalModuleLength
	  end,
      utf8_FileDescription =>
	  if NFutf8_FileDescription =:= undefined ->
		 PFutf8_FileDescription;
	     true -> NFutf8_FileDescription
	  end,
      utf8_CompanyName =>
	  if NFutf8_CompanyName =:= undefined ->
		 PFutf8_CompanyName;
	     true -> NFutf8_CompanyName
	  end,
      utf8_ProductName =>
	  if NFutf8_ProductName =:= undefined ->
		 PFutf8_ProductName;
	     true -> NFutf8_ProductName
	  end,
      utf8_FileVersion =>
	  if NFutf8_FileVersion =:= undefined ->
		 PFutf8_FileVersion;
	     true -> NFutf8_FileVersion
	  end,
      utf8_Comments =>
	  if NFutf8_Comments =:= undefined -> PFutf8_Comments;
	     true -> NFutf8_Comments
	  end,
      utf8_LegalCopyright =>
	  if NFutf8_LegalCopyright =:= undefined ->
		 PFutf8_LegalCopyright;
	     true -> NFutf8_LegalCopyright
	  end,
      utf8_LegalTrademark =>
	  if NFutf8_LegalTrademark =:= undefined ->
		 PFutf8_LegalTrademark;
	     true -> NFutf8_LegalTrademark
	  end,
      utf8_InternalName =>
	  if NFutf8_InternalName =:= undefined ->
		 PFutf8_InternalName;
	     true -> NFutf8_InternalName
	  end,
      utf8_OriginalFileName =>
	  if NFutf8_OriginalFileName =:= undefined ->
		 PFutf8_OriginalFileName;
	     true -> NFutf8_OriginalFileName
	  end,
      utf8_ProductDescription =>
	  if NFutf8_ProductDescription =:= undefined ->
		 PFutf8_ProductDescription;
	     true -> NFutf8_ProductDescription
	  end,
      utf8_ProductVersion =>
	  if NFutf8_ProductVersion =:= undefined ->
		 PFutf8_ProductVersion;
	     true -> NFutf8_ProductVersion
	  end,
      utf8_PrivateBuild =>
	  if NFutf8_PrivateBuild =:= undefined ->
		 PFutf8_PrivateBuild;
	     true -> NFutf8_PrivateBuild
	  end,
      utf8_SpecialBuild =>
	  if NFutf8_SpecialBuild =:= undefined ->
		 PFutf8_SpecialBuild;
	     true -> NFutf8_SpecialBuild
	  end,
      utf8_DigSig_Publisher =>
	  if NFutf8_DigSig_Publisher =:= undefined ->
		 PFutf8_DigSig_Publisher;
	     true -> NFutf8_DigSig_Publisher
	  end,
      utf8_DigSig_ProgramName =>
	  if NFutf8_DigSig_ProgramName =:= undefined ->
		 PFutf8_DigSig_ProgramName;
	     true -> NFutf8_DigSig_ProgramName
	  end,
      utf8_DigSig_IssuerName =>
	  if NFutf8_DigSig_IssuerName =:= undefined ->
		 PFutf8_DigSig_IssuerName;
	     true -> NFutf8_DigSig_IssuerName
	  end,
      utf8_DigSig_SubjectName =>
	  if NFutf8_DigSig_SubjectName =:= undefined ->
		 PFutf8_DigSig_SubjectName;
	     true -> NFutf8_DigSig_SubjectName
	  end,
      utf8_DigSig_Result =>
	  if NFutf8_DigSig_Result =:= undefined ->
		 PFutf8_DigSig_Result;
	     true -> NFutf8_DigSig_Result
	  end,
      utf8_DigSig_ResultCode =>
	  if NFutf8_DigSig_ResultCode =:= undefined ->
		 PFutf8_DigSig_ResultCode;
	     true -> NFutf8_DigSig_ResultCode
	  end,
      utf8_DigSig_SignTime =>
	  if NFutf8_DigSig_SignTime =:= undefined ->
		 PFutf8_DigSig_SignTime;
	     true -> NFutf8_DigSig_SignTime
	  end,
      'Icon' =>
	  if NFIcon =:= undefined -> PFIcon;
	     true -> NFIcon
	  end,
      'ImageFileHeader' =>
	  if NFImageFileHeader =:= undefined -> PFImageFileHeader;
	     true -> NFImageFileHeader
	  end,
      utf8_OnDiskFilename =>
	  if NFutf8_OnDiskFilename =:= undefined ->
		 PFutf8_OnDiskFilename;
	     true -> NFutf8_OnDiskFilename
	  end}.

merge_msg_CbLinStatsMsg(Prev, undefined) -> Prev;
merge_msg_CbLinStatsMsg(undefined, New) -> New;
merge_msg_CbLinStatsMsg(#{lin_total := PFlin_total,
			  lin_successful := PFlin_successful,
			  lin_no_scanidi := PFlin_no_scanidi,
			  lin_total_pended := PFlin_total_pended,
			  lin_current_scanid_pended_size :=
			      PFlin_current_scanid_pended_size,
			  lin_current_handlepath_pended_size :=
			      PFlin_current_handlepath_pended_size,
			  lin_current_filepath_pended_size :=
			      PFlin_current_filepath_pended_size},
			#{lin_total := NFlin_total,
			  lin_successful := NFlin_successful,
			  lin_no_scanidi := NFlin_no_scanidi,
			  lin_total_pended := NFlin_total_pended,
			  lin_current_scanid_pended_size :=
			      NFlin_current_scanid_pended_size,
			  lin_current_handlepath_pended_size :=
			      NFlin_current_handlepath_pended_size,
			  lin_current_filepath_pended_size :=
			      NFlin_current_filepath_pended_size}) ->
    #{lin_total =>
	  if NFlin_total =:= undefined -> PFlin_total;
	     true -> NFlin_total
	  end,
      lin_successful =>
	  if NFlin_successful =:= undefined -> PFlin_successful;
	     true -> NFlin_successful
	  end,
      lin_no_scanidi =>
	  if NFlin_no_scanidi =:= undefined -> PFlin_no_scanidi;
	     true -> NFlin_no_scanidi
	  end,
      lin_total_pended =>
	  if NFlin_total_pended =:= undefined ->
		 PFlin_total_pended;
	     true -> NFlin_total_pended
	  end,
      lin_current_scanid_pended_size =>
	  if NFlin_current_scanid_pended_size =:= undefined ->
		 PFlin_current_scanid_pended_size;
	     true -> NFlin_current_scanid_pended_size
	  end,
      lin_current_handlepath_pended_size =>
	  if NFlin_current_handlepath_pended_size =:= undefined ->
		 PFlin_current_handlepath_pended_size;
	     true -> NFlin_current_handlepath_pended_size
	  end,
      lin_current_filepath_pended_size =>
	  if NFlin_current_filepath_pended_size =:= undefined ->
		 PFlin_current_filepath_pended_size;
	     true -> NFlin_current_filepath_pended_size
	  end}.

merge_msg_CbChildProcessMsg(Prev, undefined) -> Prev;
merge_msg_CbChildProcessMsg(undefined, New) -> New;
merge_msg_CbChildProcessMsg(#{created := PFcreated,
			      parent_guid := PFparent_guid,
			      md5hash := PFmd5hash, child_guid := PFchild_guid,
			      path := PFpath, pid := PFpid,
			      create_time := PFcreate_time, tamper := PFtamper},
			    #{created := NFcreated,
			      parent_guid := NFparent_guid,
			      md5hash := NFmd5hash, child_guid := NFchild_guid,
			      path := NFpath, pid := NFpid,
			      create_time := NFcreate_time,
			      tamper := NFtamper}) ->
    #{created =>
	  if NFcreated =:= undefined -> PFcreated;
	     true -> NFcreated
	  end,
      parent_guid =>
	  if NFparent_guid =:= undefined -> PFparent_guid;
	     true -> NFparent_guid
	  end,
      md5hash =>
	  if NFmd5hash =:= undefined -> PFmd5hash;
	     true -> NFmd5hash
	  end,
      child_guid =>
	  if NFchild_guid =:= undefined -> PFchild_guid;
	     true -> NFchild_guid
	  end,
      path =>
	  if NFpath =:= undefined -> PFpath;
	     true -> NFpath
	  end,
      pid =>
	  if NFpid =:= undefined -> PFpid;
	     true -> NFpid
	  end,
      create_time =>
	  if NFcreate_time =:= undefined -> PFcreate_time;
	     true -> NFcreate_time
	  end,
      tamper =>
	  if NFtamper =:= undefined -> PFtamper;
	     true -> NFtamper
	  end}.

merge_msg_CbCrossProcessOpenMsg(Prev, undefined) ->
    Prev;
merge_msg_CbCrossProcessOpenMsg(undefined, New) -> New;
merge_msg_CbCrossProcessOpenMsg(#{type := PFtype,
				  targetPid := PFtargetPid,
				  targetProcCreateTime :=
				      PFtargetProcCreateTime,
				  requestedAccess := PFrequestedAccess,
				  targetProcPath := PFtargetProcPath,
				  targetProcMd5 := PFtargetProcMd5},
				#{type := NFtype, targetPid := NFtargetPid,
				  targetProcCreateTime :=
				      NFtargetProcCreateTime,
				  requestedAccess := NFrequestedAccess,
				  targetProcPath := NFtargetProcPath,
				  targetProcMd5 := NFtargetProcMd5}) ->
    #{type =>
	  if NFtype =:= undefined -> PFtype;
	     true -> NFtype
	  end,
      targetPid =>
	  if NFtargetPid =:= undefined -> PFtargetPid;
	     true -> NFtargetPid
	  end,
      targetProcCreateTime =>
	  if NFtargetProcCreateTime =:= undefined ->
		 PFtargetProcCreateTime;
	     true -> NFtargetProcCreateTime
	  end,
      requestedAccess =>
	  if NFrequestedAccess =:= undefined -> PFrequestedAccess;
	     true -> NFrequestedAccess
	  end,
      targetProcPath =>
	  if NFtargetProcPath =:= undefined -> PFtargetProcPath;
	     true -> NFtargetProcPath
	  end,
      targetProcMd5 =>
	  if NFtargetProcMd5 =:= undefined -> PFtargetProcMd5;
	     true -> NFtargetProcMd5
	  end}.

merge_msg_CbModuleLoadMsg(Prev, undefined) -> Prev;
merge_msg_CbModuleLoadMsg(undefined, New) -> New;
merge_msg_CbModuleLoadMsg(#{guid := PFguid,
			    handlepath_string_guid := PFhandlepath_string_guid,
			    md5hash := PFmd5hash, scanid := PFscanid,
			    is_process_base_module := PFis_process_base_module,
			    image_base := PFimage_base,
			    image_size := PFimage_size},
			  #{guid := NFguid,
			    handlepath_string_guid := NFhandlepath_string_guid,
			    md5hash := NFmd5hash, scanid := NFscanid,
			    is_process_base_module := NFis_process_base_module,
			    image_base := NFimage_base,
			    image_size := NFimage_size}) ->
    #{guid =>
	  if NFguid =:= undefined -> PFguid;
	     true -> NFguid
	  end,
      handlepath_string_guid =>
	  if NFhandlepath_string_guid =:= undefined ->
		 PFhandlepath_string_guid;
	     true -> NFhandlepath_string_guid
	  end,
      md5hash =>
	  if NFmd5hash =:= undefined -> PFmd5hash;
	     true -> NFmd5hash
	  end,
      scanid =>
	  if NFscanid =:= undefined -> PFscanid;
	     true -> NFscanid
	  end,
      is_process_base_module =>
	  if NFis_process_base_module =:= undefined ->
		 PFis_process_base_module;
	     true -> NFis_process_base_module
	  end,
      image_base =>
	  if NFimage_base =:= undefined -> PFimage_base;
	     true -> NFimage_base
	  end,
      image_size =>
	  if NFimage_size =:= undefined -> PFimage_size;
	     true -> NFimage_size
	  end}.

merge_msg_CbNetConnBlockedMsg(Prev, undefined) -> Prev;
merge_msg_CbNetConnBlockedMsg(undefined, New) -> New;
merge_msg_CbNetConnBlockedMsg(#{blockedType :=
				    PFblockedType,
				ipv4Address := PFipv4Address,
				ipv6LoPart := PFipv6LoPart,
				ipv6HiPart := PFipv6HiPart, port := PFport,
				protocol := PFprotocol,
				utf8_netpath := PFutf8_netpath,
				outbound := PFoutbound,
				proxyConnection := PFproxyConnection,
				proxyIpv4Address := PFproxyIpv4Address,
				proxyPort := PFproxyPort,
				proxyNetPath := PFproxyNetPath,
				remoteIpAddress := PFremoteIpAddress,
				remotePort := PFremotePort,
				localIpAddress := PFlocalIpAddress,
				localPort := PFlocalPort},
			      #{blockedType := NFblockedType,
				ipv4Address := NFipv4Address,
				ipv6LoPart := NFipv6LoPart,
				ipv6HiPart := NFipv6HiPart, port := NFport,
				protocol := NFprotocol,
				utf8_netpath := NFutf8_netpath,
				outbound := NFoutbound,
				proxyConnection := NFproxyConnection,
				proxyIpv4Address := NFproxyIpv4Address,
				proxyPort := NFproxyPort,
				proxyNetPath := NFproxyNetPath,
				remoteIpAddress := NFremoteIpAddress,
				remotePort := NFremotePort,
				localIpAddress := NFlocalIpAddress,
				localPort := NFlocalPort}) ->
    #{blockedType =>
	  if NFblockedType =:= undefined -> PFblockedType;
	     true -> NFblockedType
	  end,
      ipv4Address =>
	  if NFipv4Address =:= undefined -> PFipv4Address;
	     true -> NFipv4Address
	  end,
      ipv6LoPart =>
	  if NFipv6LoPart =:= undefined -> PFipv6LoPart;
	     true -> NFipv6LoPart
	  end,
      ipv6HiPart =>
	  if NFipv6HiPart =:= undefined -> PFipv6HiPart;
	     true -> NFipv6HiPart
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end,
      protocol =>
	  if NFprotocol =:= undefined -> PFprotocol;
	     true -> NFprotocol
	  end,
      utf8_netpath =>
	  if NFutf8_netpath =:= undefined -> PFutf8_netpath;
	     true -> NFutf8_netpath
	  end,
      outbound =>
	  if NFoutbound =:= undefined -> PFoutbound;
	     true -> NFoutbound
	  end,
      proxyConnection =>
	  if NFproxyConnection =:= undefined -> PFproxyConnection;
	     true -> NFproxyConnection
	  end,
      proxyIpv4Address =>
	  if NFproxyIpv4Address =:= undefined ->
		 PFproxyIpv4Address;
	     true -> NFproxyIpv4Address
	  end,
      proxyPort =>
	  if NFproxyPort =:= undefined -> PFproxyPort;
	     true -> NFproxyPort
	  end,
      proxyNetPath =>
	  if NFproxyNetPath =:= undefined -> PFproxyNetPath;
	     true -> NFproxyNetPath
	  end,
      remoteIpAddress =>
	  if NFremoteIpAddress =:= undefined -> PFremoteIpAddress;
	     true -> NFremoteIpAddress
	  end,
      remotePort =>
	  if NFremotePort =:= undefined -> PFremotePort;
	     true -> NFremotePort
	  end,
      localIpAddress =>
	  if NFlocalIpAddress =:= undefined -> PFlocalIpAddress;
	     true -> NFlocalIpAddress
	  end,
      localPort =>
	  if NFlocalPort =:= undefined -> PFlocalPort;
	     true -> NFlocalPort
	  end}.

merge_msg_CbCreateRemoteThreadMsg(Prev, undefined) ->
    Prev;
merge_msg_CbCreateRemoteThreadMsg(undefined, New) ->
    New;
merge_msg_CbCreateRemoteThreadMsg(#{remoteProcPid :=
					PFremoteProcPid,
				    remoteProcCreateTime :=
					PFremoteProcCreateTime,
				    remoteProcPath := PFremoteProcPath,
				    remoteProcMd5 := PFremoteProcMd5},
				  #{remoteProcPid := NFremoteProcPid,
				    remoteProcCreateTime :=
					NFremoteProcCreateTime,
				    remoteProcPath := NFremoteProcPath,
				    remoteProcMd5 := NFremoteProcMd5}) ->
    #{remoteProcPid =>
	  if NFremoteProcPid =:= undefined -> PFremoteProcPid;
	     true -> NFremoteProcPid
	  end,
      remoteProcCreateTime =>
	  if NFremoteProcCreateTime =:= undefined ->
		 PFremoteProcCreateTime;
	     true -> NFremoteProcCreateTime
	  end,
      remoteProcPath =>
	  if NFremoteProcPath =:= undefined -> PFremoteProcPath;
	     true -> NFremoteProcPath
	  end,
      remoteProcMd5 =>
	  if NFremoteProcMd5 =:= undefined -> PFremoteProcMd5;
	     true -> NFremoteProcMd5
	  end}.

merge_msg_CbRegModMsg(Prev, undefined) -> Prev;
merge_msg_CbRegModMsg(undefined, New) -> New;
merge_msg_CbRegModMsg(#{guid := PFguid,
			action := PFaction,
			have_seen_before := PFhave_seen_before,
			utf8_regpath := PFutf8_regpath, tamper := PFtamper},
		      #{guid := NFguid, action := NFaction,
			have_seen_before := NFhave_seen_before,
			utf8_regpath := NFutf8_regpath, tamper := NFtamper}) ->
    #{guid =>
	  if NFguid =:= undefined -> PFguid;
	     true -> NFguid
	  end,
      action =>
	  if NFaction =:= undefined -> PFaction;
	     true -> NFaction
	  end,
      have_seen_before =>
	  if NFhave_seen_before =:= undefined ->
		 PFhave_seen_before;
	     true -> NFhave_seen_before
	  end,
      utf8_regpath =>
	  if NFutf8_regpath =:= undefined -> PFutf8_regpath;
	     true -> NFutf8_regpath
	  end,
      tamper =>
	  if NFtamper =:= undefined -> PFtamper;
	     true -> NFtamper
	  end}.

merge_msg_CbStringMsg(#{guid := PFguid,
			utf8string := PFutf8string,
			string_type := PFstring_type},
		      #{guid := NFguid, utf8string := NFutf8string,
			string_type := NFstring_type}) ->
    #{guid =>
	  if NFguid =:= undefined -> PFguid;
	     true -> NFguid
	  end,
      utf8string =>
	  if NFutf8string =:= undefined -> PFutf8string;
	     true -> NFutf8string
	  end,
      string_type =>
	  if NFstring_type =:= undefined -> PFstring_type;
	     true -> NFstring_type
	  end}.

merge_msg_CbHeaderMsg(#{version := PFversion,
			bootid := PFbootid, eventid := PFeventid,
			timestamp := PFtimestamp,
			process_guid := PFprocess_guid,
			filepath_string_guid := PFfilepath_string_guid,
			magic := PFmagic,
			process_filepath_string_guid :=
			    PFprocess_filepath_string_guid,
			process_create_time := PFprocess_create_time,
			process_pid := PFprocess_pid,
			process_md5 := PFprocess_md5,
			process_path := PFprocess_path},
		      #{version := NFversion, bootid := NFbootid,
			eventid := NFeventid, timestamp := NFtimestamp,
			process_guid := NFprocess_guid,
			filepath_string_guid := NFfilepath_string_guid,
			magic := NFmagic,
			process_filepath_string_guid :=
			    NFprocess_filepath_string_guid,
			process_create_time := NFprocess_create_time,
			process_pid := NFprocess_pid,
			process_md5 := NFprocess_md5,
			process_path := NFprocess_path}) ->
    #{version =>
	  if NFversion =:= undefined -> PFversion;
	     true -> NFversion
	  end,
      bootid =>
	  if NFbootid =:= undefined -> PFbootid;
	     true -> NFbootid
	  end,
      eventid =>
	  if NFeventid =:= undefined -> PFeventid;
	     true -> NFeventid
	  end,
      timestamp =>
	  if NFtimestamp =:= undefined -> PFtimestamp;
	     true -> NFtimestamp
	  end,
      process_guid =>
	  if NFprocess_guid =:= undefined -> PFprocess_guid;
	     true -> NFprocess_guid
	  end,
      filepath_string_guid =>
	  if NFfilepath_string_guid =:= undefined ->
		 PFfilepath_string_guid;
	     true -> NFfilepath_string_guid
	  end,
      magic =>
	  if NFmagic =:= undefined -> PFmagic;
	     true -> NFmagic
	  end,
      process_filepath_string_guid =>
	  if NFprocess_filepath_string_guid =:= undefined ->
		 PFprocess_filepath_string_guid;
	     true -> NFprocess_filepath_string_guid
	  end,
      process_create_time =>
	  if NFprocess_create_time =:= undefined ->
		 PFprocess_create_time;
	     true -> NFprocess_create_time
	  end,
      process_pid =>
	  if NFprocess_pid =:= undefined -> PFprocess_pid;
	     true -> NFprocess_pid
	  end,
      process_md5 =>
	  if NFprocess_md5 =:= undefined -> PFprocess_md5;
	     true -> NFprocess_md5
	  end,
      process_path =>
	  if NFprocess_path =:= undefined -> PFprocess_path;
	     true -> NFprocess_path
	  end}.

merge_msg_CbEmetMitigationAction(Prev, undefined) ->
    Prev;
merge_msg_CbEmetMitigationAction(undefined, New) -> New;
merge_msg_CbEmetMitigationAction(#{mitigationType :=
				       PFmitigationType},
				 #{mitigationType := NFmitigationType}) ->
    #{mitigationType =>
	  if NFmitigationType =:= undefined -> PFmitigationType;
	     true -> NFmitigationType
	  end}.

merge_msg_CbEmetMitigationMsg(Prev, undefined) -> Prev;
merge_msg_CbEmetMitigationMsg(undefined, New) -> New;
merge_msg_CbEmetMitigationMsg(#{emetId := PFemetId,
				emetTimstamp := PFemetTimstamp,
				action := PFaction, actionText := PFactionText,
				blocked := PFblocked},
			      #{emetId := NFemetId,
				emetTimstamp := NFemetTimstamp,
				action := NFaction, actionText := NFactionText,
				blocked := NFblocked}) ->
    #{emetId =>
	  if NFemetId =:= undefined -> PFemetId;
	     true -> NFemetId
	  end,
      emetTimstamp =>
	  if NFemetTimstamp =:= undefined -> PFemetTimstamp;
	     true -> NFemetTimstamp
	  end,
      action =>
	  merge_msg_CbEmetMitigationAction(PFaction, NFaction),
      actionText =>
	  if NFactionText =:= undefined -> PFactionText;
	     true -> NFactionText
	  end,
      blocked =>
	  if NFblocked =:= undefined -> PFblocked;
	     true -> NFblocked
	  end}.

merge_msg_CbProcessBlockedMsg(Prev, undefined) -> Prev;
merge_msg_CbProcessBlockedMsg(undefined, New) -> New;
merge_msg_CbProcessBlockedMsg(#{blockedType :=
				    PFblockedType,
				blockedEvent := PFblockedEvent,
				blockedmd5Hash := PFblockedmd5Hash,
				blockedPath := PFblockedPath,
				blockResult := PFblockResult,
				blockError := PFblockError,
				blockedPid := PFblockedPid,
				blockedProcCreateTime :=
				    PFblockedProcCreateTime,
				blockedCmdline := PFblockedCmdline,
				blockedUid := PFblockedUid,
				blockedUsername := PFblockedUsername},
			      #{blockedType := NFblockedType,
				blockedEvent := NFblockedEvent,
				blockedmd5Hash := NFblockedmd5Hash,
				blockedPath := NFblockedPath,
				blockResult := NFblockResult,
				blockError := NFblockError,
				blockedPid := NFblockedPid,
				blockedProcCreateTime :=
				    NFblockedProcCreateTime,
				blockedCmdline := NFblockedCmdline,
				blockedUid := NFblockedUid,
				blockedUsername := NFblockedUsername}) ->
    #{blockedType =>
	  if NFblockedType =:= undefined -> PFblockedType;
	     true -> NFblockedType
	  end,
      blockedEvent =>
	  if NFblockedEvent =:= undefined -> PFblockedEvent;
	     true -> NFblockedEvent
	  end,
      blockedmd5Hash =>
	  if NFblockedmd5Hash =:= undefined -> PFblockedmd5Hash;
	     true -> NFblockedmd5Hash
	  end,
      blockedPath =>
	  if NFblockedPath =:= undefined -> PFblockedPath;
	     true -> NFblockedPath
	  end,
      blockResult =>
	  if NFblockResult =:= undefined -> PFblockResult;
	     true -> NFblockResult
	  end,
      blockError =>
	  if NFblockError =:= undefined -> PFblockError;
	     true -> NFblockError
	  end,
      blockedPid =>
	  if NFblockedPid =:= undefined -> PFblockedPid;
	     true -> NFblockedPid
	  end,
      blockedProcCreateTime =>
	  if NFblockedProcCreateTime =:= undefined ->
		 PFblockedProcCreateTime;
	     true -> NFblockedProcCreateTime
	  end,
      blockedCmdline =>
	  if NFblockedCmdline =:= undefined -> PFblockedCmdline;
	     true -> NFblockedCmdline
	  end,
      blockedUid =>
	  if NFblockedUid =:= undefined -> PFblockedUid;
	     true -> NFblockedUid
	  end,
      blockedUsername =>
	  if NFblockedUsername =:= undefined -> PFblockedUsername;
	     true -> NFblockedUsername
	  end}.

merge_msg_CbCrossProcessMsg(Prev, undefined) -> Prev;
merge_msg_CbCrossProcessMsg(undefined, New) -> New;
merge_msg_CbCrossProcessMsg(#{open := PFopen,
			      remotethread := PFremotethread,
			      tamper := PFtamper},
			    #{open := NFopen, remotethread := NFremotethread,
			      tamper := NFtamper}) ->
    #{open =>
	  merge_msg_CbCrossProcessOpenMsg(PFopen, NFopen),
      remotethread =>
	  merge_msg_CbCreateRemoteThreadMsg(PFremotethread,
					    NFremotethread),
      tamper =>
	  if NFtamper =:= undefined -> PFtamper;
	     true -> NFtamper
	  end}.

merge_msg_CbServerEnvironmentMsg(Prev, undefined) ->
    Prev;
merge_msg_CbServerEnvironmentMsg(undefined, New) -> New;
merge_msg_CbServerEnvironmentMsg(#{'NodeId' :=
				       PFNodeId},
				 #{'NodeId' := NFNodeId}) ->
    #{'NodeId' =>
	  if NFNodeId =:= undefined -> PFNodeId;
	     true -> NFNodeId
	  end}.

merge_msg_CbEnvironmentMsg(Prev, undefined) -> Prev;
merge_msg_CbEnvironmentMsg(undefined, New) -> New;
merge_msg_CbEnvironmentMsg(#{endpoint := PFendpoint,
			     server := PFserver},
			   #{endpoint := NFendpoint, server := NFserver}) ->
    #{endpoint =>
	  merge_msg_CbEndpointEnvironmentMsg(PFendpoint,
					     NFendpoint),
      server =>
	  merge_msg_CbServerEnvironmentMsg(PFserver, NFserver)}.

merge_msg_CbVtLoadMsg(Prev, undefined) -> Prev;
merge_msg_CbVtLoadMsg(undefined, New) -> New;
merge_msg_CbVtLoadMsg(#{'LoaderProcessExeMd5' :=
			    PFLoaderProcessExeMd5,
			'LoadedModuleMd5' := PFLoadedModuleMd5},
		      #{'LoaderProcessExeMd5' := NFLoaderProcessExeMd5,
			'LoadedModuleMd5' := NFLoadedModuleMd5}) ->
    #{'LoaderProcessExeMd5' =>
	  if NFLoaderProcessExeMd5 =:= undefined ->
		 PFLoaderProcessExeMd5;
	     true -> NFLoaderProcessExeMd5
	  end,
      'LoadedModuleMd5' =>
	  if NFLoadedModuleMd5 =:= undefined -> PFLoadedModuleMd5;
	     true -> NFLoadedModuleMd5
	  end}.

merge_msg_CbStatisticsMsg(Prev, undefined) -> Prev;
merge_msg_CbStatisticsMsg(undefined, New) -> New;
merge_msg_CbStatisticsMsg(#{lin_stats := PFlin_stats},
			  #{lin_stats := NFlin_stats}) ->
    #{lin_stats =>
	  merge_msg_CbLinStatsMsg(PFlin_stats, NFlin_stats)}.

merge_msg_CbNetConnMsg(Prev, undefined) -> Prev;
merge_msg_CbNetConnMsg(undefined, New) -> New;
merge_msg_CbNetConnMsg(#{guid := PFguid,
			 ipv4Address := PFipv4Address,
			 ipv6LoPart := PFipv6LoPart, ipv6HiPart := PFipv6HiPart,
			 port := PFport, protocol := PFprotocol,
			 utf8_netpath := PFutf8_netpath, outbound := PFoutbound,
			 proxyConnection := PFproxyConnection,
			 proxyIpv4Address := PFproxyIpv4Address,
			 proxyPort := PFproxyPort,
			 proxyNetPath := PFproxyNetPath,
			 remoteIpAddress := PFremoteIpAddress,
			 remotePort := PFremotePort,
			 localIpAddress := PFlocalIpAddress,
			 localPort := PFlocalPort},
		       #{guid := NFguid, ipv4Address := NFipv4Address,
			 ipv6LoPart := NFipv6LoPart, ipv6HiPart := NFipv6HiPart,
			 port := NFport, protocol := NFprotocol,
			 utf8_netpath := NFutf8_netpath, outbound := NFoutbound,
			 proxyConnection := NFproxyConnection,
			 proxyIpv4Address := NFproxyIpv4Address,
			 proxyPort := NFproxyPort,
			 proxyNetPath := NFproxyNetPath,
			 remoteIpAddress := NFremoteIpAddress,
			 remotePort := NFremotePort,
			 localIpAddress := NFlocalIpAddress,
			 localPort := NFlocalPort}) ->
    #{guid =>
	  if NFguid =:= undefined -> PFguid;
	     true -> NFguid
	  end,
      ipv4Address =>
	  if NFipv4Address =:= undefined -> PFipv4Address;
	     true -> NFipv4Address
	  end,
      ipv6LoPart =>
	  if NFipv6LoPart =:= undefined -> PFipv6LoPart;
	     true -> NFipv6LoPart
	  end,
      ipv6HiPart =>
	  if NFipv6HiPart =:= undefined -> PFipv6HiPart;
	     true -> NFipv6HiPart
	  end,
      port =>
	  if NFport =:= undefined -> PFport;
	     true -> NFport
	  end,
      protocol =>
	  if NFprotocol =:= undefined -> PFprotocol;
	     true -> NFprotocol
	  end,
      utf8_netpath =>
	  if NFutf8_netpath =:= undefined -> PFutf8_netpath;
	     true -> NFutf8_netpath
	  end,
      outbound =>
	  if NFoutbound =:= undefined -> PFoutbound;
	     true -> NFoutbound
	  end,
      proxyConnection =>
	  if NFproxyConnection =:= undefined -> PFproxyConnection;
	     true -> NFproxyConnection
	  end,
      proxyIpv4Address =>
	  if NFproxyIpv4Address =:= undefined ->
		 PFproxyIpv4Address;
	     true -> NFproxyIpv4Address
	  end,
      proxyPort =>
	  if NFproxyPort =:= undefined -> PFproxyPort;
	     true -> NFproxyPort
	  end,
      proxyNetPath =>
	  if NFproxyNetPath =:= undefined -> PFproxyNetPath;
	     true -> NFproxyNetPath
	  end,
      remoteIpAddress =>
	  if NFremoteIpAddress =:= undefined -> PFremoteIpAddress;
	     true -> NFremoteIpAddress
	  end,
      remotePort =>
	  if NFremotePort =:= undefined -> PFremotePort;
	     true -> NFremotePort
	  end,
      localIpAddress =>
	  if NFlocalIpAddress =:= undefined -> PFlocalIpAddress;
	     true -> NFlocalIpAddress
	  end,
      localPort =>
	  if NFlocalPort =:= undefined -> PFlocalPort;
	     true -> NFlocalPort
	  end}.

merge_msg_CbProcessMsg(Prev, undefined) -> Prev;
merge_msg_CbProcessMsg(undefined, New) -> New;
merge_msg_CbProcessMsg(#{pid := PFpid,
			 created := PFcreated, parent_pid := PFparent_pid,
			 parent_create_time := PFparent_create_time,
			 parent_guid := PFparent_guid, md5hash := PFmd5hash,
			 have_seen_before := PFhave_seen_before,
			 deprecated := PFdeprecated,
			 commandline := PFcommandline,
			 parent_md5 := PFparent_md5,
			 parent_path := PFparent_path,
			 creationobserved := PFcreationobserved,
			 expect_followon_w_md5 := PFexpect_followon_w_md5,
			 uid := PFuid, username := PFusername,
			 actions := PFactions,
			 actionsAreFromGPO := PFactionsAreFromGPO},
		       #{pid := NFpid, created := NFcreated,
			 parent_pid := NFparent_pid,
			 parent_create_time := NFparent_create_time,
			 parent_guid := NFparent_guid, md5hash := NFmd5hash,
			 have_seen_before := NFhave_seen_before,
			 deprecated := NFdeprecated,
			 commandline := NFcommandline,
			 parent_md5 := NFparent_md5,
			 parent_path := NFparent_path,
			 creationobserved := NFcreationobserved,
			 expect_followon_w_md5 := NFexpect_followon_w_md5,
			 uid := NFuid, username := NFusername,
			 actions := NFactions,
			 actionsAreFromGPO := NFactionsAreFromGPO}) ->
    #{pid =>
	  if NFpid =:= undefined -> PFpid;
	     true -> NFpid
	  end,
      created =>
	  if NFcreated =:= undefined -> PFcreated;
	     true -> NFcreated
	  end,
      parent_pid =>
	  if NFparent_pid =:= undefined -> PFparent_pid;
	     true -> NFparent_pid
	  end,
      parent_create_time =>
	  if NFparent_create_time =:= undefined ->
		 PFparent_create_time;
	     true -> NFparent_create_time
	  end,
      parent_guid =>
	  if NFparent_guid =:= undefined -> PFparent_guid;
	     true -> NFparent_guid
	  end,
      md5hash =>
	  if NFmd5hash =:= undefined -> PFmd5hash;
	     true -> NFmd5hash
	  end,
      have_seen_before =>
	  if NFhave_seen_before =:= undefined ->
		 PFhave_seen_before;
	     true -> NFhave_seen_before
	  end,
      deprecated =>
	  if NFdeprecated =:= undefined -> PFdeprecated;
	     true -> NFdeprecated
	  end,
      commandline =>
	  if NFcommandline =:= undefined -> PFcommandline;
	     true -> NFcommandline
	  end,
      parent_md5 =>
	  if NFparent_md5 =:= undefined -> PFparent_md5;
	     true -> NFparent_md5
	  end,
      parent_path =>
	  if NFparent_path =:= undefined -> PFparent_path;
	     true -> NFparent_path
	  end,
      creationobserved =>
	  if NFcreationobserved =:= undefined ->
		 PFcreationobserved;
	     true -> NFcreationobserved
	  end,
      expect_followon_w_md5 =>
	  if NFexpect_followon_w_md5 =:= undefined ->
		 PFexpect_followon_w_md5;
	     true -> NFexpect_followon_w_md5
	  end,
      uid =>
	  if NFuid =:= undefined -> PFuid;
	     true -> NFuid
	  end,
      username =>
	  if NFusername =:= undefined -> PFusername;
	     true -> NFusername
	  end,
      actions => PFactions ++ NFactions,
      actionsAreFromGPO =>
	  if NFactionsAreFromGPO =:= undefined ->
		 PFactionsAreFromGPO;
	     true -> NFactionsAreFromGPO
	  end}.

merge_msg_CbEventMsg(#{header := PFheader,
		       strings := PFstrings, process := PFprocess,
		       modload := PFmodload, filemod := PFfilemod,
		       network := PFnetwork, regmod := PFregmod,
		       stats := PFstats, module := PFmodule,
		       vtwrite := PFvtwrite, vtload := PFvtload,
		       childproc := PFchildproc, env := PFenv,
		       crossproc := PFcrossproc, tamperAlert := PFtamperAlert,
		       blocked := PFblocked, emet := PFemet,
		       netconnBlocked := PFnetconnBlocked},
		     #{header := NFheader, strings := NFstrings,
		       process := NFprocess, modload := NFmodload,
		       filemod := NFfilemod, network := NFnetwork,
		       regmod := NFregmod, stats := NFstats,
		       module := NFmodule, vtwrite := NFvtwrite,
		       vtload := NFvtload, childproc := NFchildproc,
		       env := NFenv, crossproc := NFcrossproc,
		       tamperAlert := NFtamperAlert, blocked := NFblocked,
		       emet := NFemet, netconnBlocked := NFnetconnBlocked}) ->
    #{header => merge_msg_CbHeaderMsg(PFheader, NFheader),
      strings => PFstrings ++ NFstrings,
      process => merge_msg_CbProcessMsg(PFprocess, NFprocess),
      modload =>
	  merge_msg_CbModuleLoadMsg(PFmodload, NFmodload),
      filemod => merge_msg_CbFileModMsg(PFfilemod, NFfilemod),
      network => merge_msg_CbNetConnMsg(PFnetwork, NFnetwork),
      regmod => merge_msg_CbRegModMsg(PFregmod, NFregmod),
      stats => merge_msg_CbStatisticsMsg(PFstats, NFstats),
      module => merge_msg_CbModuleInfoMsg(PFmodule, NFmodule),
      vtwrite => merge_msg_CbVtWriteMsg(PFvtwrite, NFvtwrite),
      vtload => merge_msg_CbVtLoadMsg(PFvtload, NFvtload),
      childproc =>
	  merge_msg_CbChildProcessMsg(PFchildproc, NFchildproc),
      env => merge_msg_CbEnvironmentMsg(PFenv, NFenv),
      crossproc =>
	  merge_msg_CbCrossProcessMsg(PFcrossproc, NFcrossproc),
      tamperAlert =>
	  merge_msg_CbTamperAlertMsg(PFtamperAlert,
				     NFtamperAlert),
      blocked =>
	  merge_msg_CbProcessBlockedMsg(PFblocked, NFblocked),
      emet => merge_msg_CbEmetMitigationMsg(PFemet, NFemet),
      netconnBlocked =>
	  merge_msg_CbNetConnBlockedMsg(PFnetconnBlocked,
					NFnetconnBlocked)}.



verify_msg(Msg, MsgName) ->
    case MsgName of
      'CbEndpointEnvironmentMsg' ->
	  v_msg_CbEndpointEnvironmentMsg(Msg,
					 ['CbEndpointEnvironmentMsg']);
      'CbFileModMsg' ->
	  v_msg_CbFileModMsg(Msg, ['CbFileModMsg']);
      'CbTamperAlertMsg' ->
	  v_msg_CbTamperAlertMsg(Msg, ['CbTamperAlertMsg']);
      'CbVtWriteMsg' ->
	  v_msg_CbVtWriteMsg(Msg, ['CbVtWriteMsg']);
      'CbModuleInfoMsg' ->
	  v_msg_CbModuleInfoMsg(Msg, ['CbModuleInfoMsg']);
      'CbLinStatsMsg' ->
	  v_msg_CbLinStatsMsg(Msg, ['CbLinStatsMsg']);
      'CbChildProcessMsg' ->
	  v_msg_CbChildProcessMsg(Msg, ['CbChildProcessMsg']);
      'CbCrossProcessOpenMsg' ->
	  v_msg_CbCrossProcessOpenMsg(Msg,
				      ['CbCrossProcessOpenMsg']);
      'CbModuleLoadMsg' ->
	  v_msg_CbModuleLoadMsg(Msg, ['CbModuleLoadMsg']);
      'CbNetConnBlockedMsg' ->
	  v_msg_CbNetConnBlockedMsg(Msg, ['CbNetConnBlockedMsg']);
      'CbCreateRemoteThreadMsg' ->
	  v_msg_CbCreateRemoteThreadMsg(Msg,
					['CbCreateRemoteThreadMsg']);
      'CbRegModMsg' ->
	  v_msg_CbRegModMsg(Msg, ['CbRegModMsg']);
      'CbStringMsg' ->
	  v_msg_CbStringMsg(Msg, ['CbStringMsg']);
      'CbHeaderMsg' ->
	  v_msg_CbHeaderMsg(Msg, ['CbHeaderMsg']);
      'CbEmetMitigationAction' ->
	  v_msg_CbEmetMitigationAction(Msg,
				       ['CbEmetMitigationAction']);
      'CbEmetMitigationMsg' ->
	  v_msg_CbEmetMitigationMsg(Msg, ['CbEmetMitigationMsg']);
      'CbProcessBlockedMsg' ->
	  v_msg_CbProcessBlockedMsg(Msg, ['CbProcessBlockedMsg']);
      'CbCrossProcessMsg' ->
	  v_msg_CbCrossProcessMsg(Msg, ['CbCrossProcessMsg']);
      'CbServerEnvironmentMsg' ->
	  v_msg_CbServerEnvironmentMsg(Msg,
				       ['CbServerEnvironmentMsg']);
      'CbEnvironmentMsg' ->
	  v_msg_CbEnvironmentMsg(Msg, ['CbEnvironmentMsg']);
      'CbVtLoadMsg' ->
	  v_msg_CbVtLoadMsg(Msg, ['CbVtLoadMsg']);
      'CbStatisticsMsg' ->
	  v_msg_CbStatisticsMsg(Msg, ['CbStatisticsMsg']);
      'CbNetConnMsg' ->
	  v_msg_CbNetConnMsg(Msg, ['CbNetConnMsg']);
      'CbProcessMsg' ->
	  v_msg_CbProcessMsg(Msg, ['CbProcessMsg']);
      'CbEventMsg' -> v_msg_CbEventMsg(Msg, ['CbEventMsg']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_CbEndpointEnvironmentMsg(#{'SensorId' := F1,
				 'SensorHostName' := F2, 'HostId' := F3},
			       Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, ['SensorId' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, ['SensorHostName' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, ['HostId' | Path])
    end,
    ok;
v_msg_CbEndpointEnvironmentMsg(X, Path) ->
    mk_type_error({expected_msg,
		   'CbEndpointEnvironmentMsg'},
		  X, Path).

v_msg_CbFileModMsg(#{guid := F1, action := F2,
		     have_seen_before := F3, md5hash := F4, type := F5,
		     tamper := F6},
		   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [guid | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_CbFileModMsg.CbFileModAction'(F2,
						 [action | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [have_seen_before | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [md5hash | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_CbFileModMsg.CbFileType'(F5, [type | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [tamper | Path])
    end,
    ok;
v_msg_CbFileModMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbFileModMsg'}, X, Path).

v_msg_CbTamperAlertMsg(#{type := F1}, Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_CbTamperAlertMsg.CbTamperAlertType'(F1,
						       [type | Path])
    end,
    ok;
v_msg_CbTamperAlertMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbTamperAlertMsg'}, X,
		  Path).

v_msg_CbVtWriteMsg(#{'WritingProcessExeMd5' := F1,
		     'FileWrittenMd5' := F2,
		     'FileWrittenIsPeModuleHint' := F3,
		     'WritingProcessFilename' := F4,
		     'FileWrittenFilename' := F5},
		   Path) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bytes(F1, ['WritingProcessExeMd5' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, ['FileWrittenMd5' | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bool(F3, ['FileWrittenIsPeModuleHint' | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, ['WritingProcessFilename' | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, ['FileWrittenFilename' | Path])
    end,
    ok;
v_msg_CbVtWriteMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbVtWriteMsg'}, X, Path).

v_msg_CbModuleInfoMsg(#{md5 := F1,
			'CopiedModuleLength' := F2,
			'OriginalModuleLength' := F3,
			utf8_FileDescription := F4, utf8_CompanyName := F5,
			utf8_ProductName := F6, utf8_FileVersion := F7,
			utf8_Comments := F8, utf8_LegalCopyright := F9,
			utf8_LegalTrademark := F10, utf8_InternalName := F11,
			utf8_OriginalFileName := F12,
			utf8_ProductDescription := F13,
			utf8_ProductVersion := F14, utf8_PrivateBuild := F15,
			utf8_SpecialBuild := F16, utf8_DigSig_Publisher := F17,
			utf8_DigSig_ProgramName := F18,
			utf8_DigSig_IssuerName := F19,
			utf8_DigSig_SubjectName := F20,
			utf8_DigSig_Result := F21,
			utf8_DigSig_ResultCode := F22,
			utf8_DigSig_SignTime := F23, 'Icon' := F24,
			'ImageFileHeader' := F25, utf8_OnDiskFilename := F26},
		      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [md5 | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, ['CopiedModuleLength' | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, ['OriginalModuleLength' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [utf8_FileDescription | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [utf8_CompanyName | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [utf8_ProductName | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [utf8_FileVersion | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [utf8_Comments | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [utf8_LegalCopyright | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [utf8_LegalTrademark | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [utf8_InternalName | Path])
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_string(F12, [utf8_OriginalFileName | Path])
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_string(F13, [utf8_ProductDescription | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [utf8_ProductVersion | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [utf8_PrivateBuild | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_string(F16, [utf8_SpecialBuild | Path])
    end,
    if F17 == undefined -> ok;
       true ->
	   v_type_string(F17, [utf8_DigSig_Publisher | Path])
    end,
    if F18 == undefined -> ok;
       true ->
	   v_type_string(F18, [utf8_DigSig_ProgramName | Path])
    end,
    if F19 == undefined -> ok;
       true ->
	   v_type_string(F19, [utf8_DigSig_IssuerName | Path])
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_string(F20, [utf8_DigSig_SubjectName | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_string(F21, [utf8_DigSig_Result | Path])
    end,
    if F22 == undefined -> ok;
       true ->
	   v_type_string(F22, [utf8_DigSig_ResultCode | Path])
    end,
    if F23 == undefined -> ok;
       true ->
	   v_type_string(F23, [utf8_DigSig_SignTime | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_bytes(F24, ['Icon' | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_bytes(F25, ['ImageFileHeader' | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_string(F26, [utf8_OnDiskFilename | Path])
    end,
    ok;
v_msg_CbModuleInfoMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbModuleInfoMsg'}, X,
		  Path).

v_msg_CbLinStatsMsg(#{lin_total := F1,
		      lin_successful := F2, lin_no_scanidi := F3,
		      lin_total_pended := F4,
		      lin_current_scanid_pended_size := F5,
		      lin_current_handlepath_pended_size := F6,
		      lin_current_filepath_pended_size := F7},
		    Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [lin_total | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [lin_successful | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [lin_no_scanidi | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [lin_total_pended | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_int32(F5,
			[lin_current_scanid_pended_size | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_int32(F6,
			[lin_current_handlepath_pended_size | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_int32(F7,
			[lin_current_filepath_pended_size | Path])
    end,
    ok;
v_msg_CbLinStatsMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbLinStatsMsg'}, X, Path).

v_msg_CbChildProcessMsg(#{created := F1,
			  parent_guid := F2, md5hash := F3, child_guid := F4,
			  path := F5, pid := F6, create_time := F7,
			  tamper := F8},
			Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [created | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [parent_guid | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [md5hash | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [child_guid | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [path | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, [pid | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int64(F7, [create_time | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [tamper | Path])
    end,
    ok;
v_msg_CbChildProcessMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbChildProcessMsg'}, X,
		  Path).

v_msg_CbCrossProcessOpenMsg(#{type := F1,
			      targetPid := F2, targetProcCreateTime := F3,
			      requestedAccess := F4, targetProcPath := F5,
			      targetProcMd5 := F6},
			    Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_CbCrossProcessOpenMsg.OpenType'(F1,
						   [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [targetPid | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [targetProcCreateTime | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [requestedAccess | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [targetProcPath | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [targetProcMd5 | Path])
    end,
    ok;
v_msg_CbCrossProcessOpenMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbCrossProcessOpenMsg'},
		  X, Path).

v_msg_CbModuleLoadMsg(#{guid := F1,
			handlepath_string_guid := F2, md5hash := F3,
			scanid := F4, is_process_base_module := F5,
			image_base := F6, image_size := F7},
		      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [guid | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int64(F2, [handlepath_string_guid | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [md5hash | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [scanid | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [is_process_base_module | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, [image_base | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [image_size | Path])
    end,
    ok;
v_msg_CbModuleLoadMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbModuleLoadMsg'}, X,
		  Path).

v_msg_CbNetConnBlockedMsg(#{blockedType := F1,
			    ipv4Address := F2, ipv6LoPart := F3,
			    ipv6HiPart := F4, port := F5, protocol := F6,
			    utf8_netpath := F7, outbound := F8,
			    proxyConnection := F9, proxyIpv4Address := F10,
			    proxyPort := F11, proxyNetPath := F12,
			    remoteIpAddress := F13, remotePort := F14,
			    localIpAddress := F15, localPort := F16},
			  Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_CbNetConnBlockedMsg.NetconnBlockType'(F1,
							 [blockedType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ipv4Address | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [ipv6LoPart | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [ipv6HiPart | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [port | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_CbNetConnBlockedMsg.ProtocolType'(F6,
						     [protocol | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [utf8_netpath | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [outbound | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [proxyConnection | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [proxyIpv4Address | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [proxyPort | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [proxyNetPath | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [remoteIpAddress | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [remotePort | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [localIpAddress | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [localPort | Path])
    end,
    ok;
v_msg_CbNetConnBlockedMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbNetConnBlockedMsg'}, X,
		  Path).

v_msg_CbCreateRemoteThreadMsg(#{remoteProcPid := F1,
				remoteProcCreateTime := F2,
				remoteProcPath := F3, remoteProcMd5 := F4},
			      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [remoteProcPid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [remoteProcCreateTime | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [remoteProcPath | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [remoteProcMd5 | Path])
    end,
    ok;
v_msg_CbCreateRemoteThreadMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbCreateRemoteThreadMsg'},
		  X, Path).

v_msg_CbRegModMsg(#{guid := F1, action := F2,
		    have_seen_before := F3, utf8_regpath := F4,
		    tamper := F5},
		  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [guid | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_CbRegModMsg.CbRegModAction'(F2, [action | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [have_seen_before | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [utf8_regpath | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [tamper | Path])
    end,
    ok;
v_msg_CbRegModMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbRegModMsg'}, X, Path).

v_msg_CbStringMsg(#{guid := F1, utf8string := F2,
		    string_type := F3},
		  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [guid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [utf8string | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_CbStringMsg.CbStringType'(F3,
					     [string_type | Path])
    end,
    ok;
v_msg_CbStringMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbStringMsg'}, X, Path).

v_msg_CbHeaderMsg(#{version := F1, bootid := F2,
		    eventid := F3, timestamp := F4, process_guid := F5,
		    filepath_string_guid := F6, magic := F7,
		    process_filepath_string_guid := F8,
		    process_create_time := F9, process_pid := F10,
		    process_md5 := F11, process_path := F12},
		  Path) ->
    v_type_int32(F1, [version | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [bootid | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [eventid | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [timestamp | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, [process_guid | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, [filepath_string_guid | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [magic | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_int64(F8, [process_filepath_string_guid | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int64(F9, [process_create_time | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_int32(F10, [process_pid | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bytes(F11, [process_md5 | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [process_path | Path])
    end,
    ok;
v_msg_CbHeaderMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbHeaderMsg'}, X, Path).

v_msg_CbEmetMitigationAction(#{mitigationType := F1},
			     Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(F1,
								 [mitigationType
								  | Path])
    end,
    ok;
v_msg_CbEmetMitigationAction(X, Path) ->
    mk_type_error({expected_msg, 'CbEmetMitigationAction'},
		  X, Path).

v_msg_CbEmetMitigationMsg(#{emetId := F1,
			    emetTimstamp := F2, action := F3, actionText := F4,
			    blocked := F5},
			  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [emetId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [emetTimstamp | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_CbEmetMitigationAction(F3, [action | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [actionText | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [blocked | Path])
    end,
    ok;
v_msg_CbEmetMitigationMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbEmetMitigationMsg'}, X,
		  Path).

v_msg_CbProcessBlockedMsg(#{blockedType := F1,
			    blockedEvent := F2, blockedmd5Hash := F3,
			    blockedPath := F4, blockResult := F5,
			    blockError := F6, blockedPid := F7,
			    blockedProcCreateTime := F8, blockedCmdline := F9,
			    blockedUid := F10, blockedUsername := F11},
			  Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_CbProcessBlockedMsg.BlockType'(F1,
						  [blockedType | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_CbProcessBlockedMsg.BlockEvent'(F2,
						   [blockedEvent | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [blockedmd5Hash | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [blockedPath | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_CbProcessBlockedMsg.BlockResult'(F5,
						    [blockResult | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [blockError | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [blockedPid | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_uint64(F8, [blockedProcCreateTime | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [blockedCmdline | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [blockedUid | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [blockedUsername | Path])
    end,
    ok;
v_msg_CbProcessBlockedMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbProcessBlockedMsg'}, X,
		  Path).

v_msg_CbCrossProcessMsg(#{open := F1,
			  remotethread := F2, tamper := F3},
			Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_CbCrossProcessOpenMsg(F1, [open | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_CbCreateRemoteThreadMsg(F2, [remotethread | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [tamper | Path])
    end,
    ok;
v_msg_CbCrossProcessMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbCrossProcessMsg'}, X,
		  Path).

v_msg_CbServerEnvironmentMsg(#{'NodeId' := F1}, Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, ['NodeId' | Path])
    end,
    ok;
v_msg_CbServerEnvironmentMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbServerEnvironmentMsg'},
		  X, Path).

v_msg_CbEnvironmentMsg(#{endpoint := F1, server := F2},
		       Path) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_CbEndpointEnvironmentMsg(F1, [endpoint | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_CbServerEnvironmentMsg(F2, [server | Path])
    end,
    ok;
v_msg_CbEnvironmentMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbEnvironmentMsg'}, X,
		  Path).

v_msg_CbVtLoadMsg(#{'LoaderProcessExeMd5' := F1,
		    'LoadedModuleMd5' := F2},
		  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, ['LoaderProcessExeMd5' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, ['LoadedModuleMd5' | Path])
    end,
    ok;
v_msg_CbVtLoadMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbVtLoadMsg'}, X, Path).

v_msg_CbStatisticsMsg(#{lin_stats := F1}, Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_CbLinStatsMsg(F1, [lin_stats | Path])
    end,
    ok;
v_msg_CbStatisticsMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbStatisticsMsg'}, X,
		  Path).

v_msg_CbNetConnMsg(#{guid := F1, ipv4Address := F2,
		     ipv6LoPart := F3, ipv6HiPart := F4, port := F5,
		     protocol := F6, utf8_netpath := F7, outbound := F8,
		     proxyConnection := F9, proxyIpv4Address := F10,
		     proxyPort := F11, proxyNetPath := F12,
		     remoteIpAddress := F13, remotePort := F14,
		     localIpAddress := F15, localPort := F16},
		   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [guid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ipv4Address | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [ipv6LoPart | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [ipv6HiPart | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [port | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_CbNetConnMsg.ProtocolType'(F6,
					      [protocol | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [utf8_netpath | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [outbound | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [proxyConnection | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [proxyIpv4Address | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [proxyPort | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [proxyNetPath | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [remoteIpAddress | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [remotePort | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [localIpAddress | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [localPort | Path])
    end,
    ok;
v_msg_CbNetConnMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbNetConnMsg'}, X, Path).

v_msg_CbProcessMsg(#{pid := F1, created := F2,
		     parent_pid := F3, parent_create_time := F4,
		     parent_guid := F5, md5hash := F6,
		     have_seen_before := F7, deprecated := F8,
		     commandline := F9, parent_md5 := F10,
		     parent_path := F11, creationobserved := F12,
		     expect_followon_w_md5 := F13, uid := F14,
		     username := F15, actions := F16,
		     actionsAreFromGPO := F17},
		   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [pid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [created | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [parent_pid | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [parent_create_time | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, [parent_guid | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [md5hash | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [have_seen_before | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int64(F8, [deprecated | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bytes(F9, [commandline | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [parent_md5 | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [parent_path | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [creationobserved | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [expect_followon_w_md5 | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [uid | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [username | Path])
    end,
    if is_list(F16) ->
	   [v_msg_CbEmetMitigationAction(Elem, [actions | Path])
	    || Elem <- F16];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'CbEmetMitigationAction'}},
			 F16, Path)
    end,
    if F17 == undefined -> ok;
       true -> v_type_bool(F17, [actionsAreFromGPO | Path])
    end,
    ok;
v_msg_CbProcessMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbProcessMsg'}, X, Path).

v_msg_CbEventMsg(#{header := F1, strings := F2,
		   process := F3, modload := F4, filemod := F5,
		   network := F6, regmod := F7, stats := F8, module := F9,
		   vtwrite := F10, vtload := F11, childproc := F12,
		   env := F13, crossproc := F14, tamperAlert := F15,
		   blocked := F16, emet := F17, netconnBlocked := F18},
		 Path) ->
    v_msg_CbHeaderMsg(F1, [header | Path]),
    if is_list(F2) ->
	   [v_msg_CbStringMsg(Elem, [strings | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'CbStringMsg'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_CbProcessMsg(F3, [process | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_CbModuleLoadMsg(F4, [modload | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_msg_CbFileModMsg(F5, [filemod | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_CbNetConnMsg(F6, [network | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_CbRegModMsg(F7, [regmod | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_msg_CbStatisticsMsg(F8, [stats | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_msg_CbModuleInfoMsg(F9, [module | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_msg_CbVtWriteMsg(F10, [vtwrite | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_msg_CbVtLoadMsg(F11, [vtload | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_msg_CbChildProcessMsg(F12, [childproc | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_msg_CbEnvironmentMsg(F13, [env | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_msg_CbCrossProcessMsg(F14, [crossproc | Path])
    end,
    if F15 == undefined -> ok;
       true ->
	   v_msg_CbTamperAlertMsg(F15, [tamperAlert | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_msg_CbProcessBlockedMsg(F16, [blocked | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_msg_CbEmetMitigationMsg(F17, [emet | Path])
    end,
    if F18 == undefined -> ok;
       true ->
	   v_msg_CbNetConnBlockedMsg(F18, [netconnBlocked | Path])
    end,
    ok;
v_msg_CbEventMsg(X, Path) ->
    mk_type_error({expected_msg, 'CbEventMsg'}, X, Path).

'v_enum_CbStringMsg.CbStringType'(typeFilepath,
				  _Path) ->
    ok;
'v_enum_CbStringMsg.CbStringType'(typeRegpath, _Path) ->
    ok;
'v_enum_CbStringMsg.CbStringType'(typeNetpath, _Path) ->
    ok;
'v_enum_CbStringMsg.CbStringType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbStringMsg.CbStringType'},
		  X, Path).

'v_enum_CbFileModMsg.CbFileModAction'(actionFileModCreate,
				      _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileModAction'(actionFileModWrite,
				      _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileModAction'(actionFileModDelete,
				      _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileModAction'(actionFileModLastWrite,
				      _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileModAction'(actionFileModOpen,
				      _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileModAction'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbFileModMsg.CbFileModAction'},
		  X, Path).

'v_enum_CbFileModMsg.CbFileType'(filetypeUnknown,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypePe, _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeElf, _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeUniversalBin,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeEicar,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeOfficeLegacy,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeOfficeOpenXml,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypePdf, _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchivePkzip,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchiveLzh,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchiveLzw,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchiveRar,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchiveTar,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(filetypeArchive7zip,
				 _Path) ->
    ok;
'v_enum_CbFileModMsg.CbFileType'(X, Path) ->
    mk_type_error({invalid_enum, 'CbFileModMsg.CbFileType'},
		  X, Path).

'v_enum_CbRegModMsg.CbRegModAction'(actionRegModCreateKey,
				    _Path) ->
    ok;
'v_enum_CbRegModMsg.CbRegModAction'(actionRegModWriteValue,
				    _Path) ->
    ok;
'v_enum_CbRegModMsg.CbRegModAction'(actionRegModDeleteKey,
				    _Path) ->
    ok;
'v_enum_CbRegModMsg.CbRegModAction'(actionRegModDeleteValue,
				    _Path) ->
    ok;
'v_enum_CbRegModMsg.CbRegModAction'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbRegModMsg.CbRegModAction'},
		  X, Path).

'v_enum_CbNetConnMsg.ProtocolType'('ProtoTcp', _Path) ->
    ok;
'v_enum_CbNetConnMsg.ProtocolType'('ProtoUdp', _Path) ->
    ok;
'v_enum_CbNetConnMsg.ProtocolType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbNetConnMsg.ProtocolType'},
		  X, Path).

'v_enum_CbCrossProcessOpenMsg.OpenType'('OpenProcessHandle',
					_Path) ->
    ok;
'v_enum_CbCrossProcessOpenMsg.OpenType'('OpenThreadHandle',
					_Path) ->
    ok;
'v_enum_CbCrossProcessOpenMsg.OpenType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbCrossProcessOpenMsg.OpenType'},
		  X, Path).

'v_enum_CbProcessBlockedMsg.BlockType'('MD5Hash',
				       _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbProcessBlockedMsg.BlockType'},
		  X, Path).

'v_enum_CbProcessBlockedMsg.BlockEvent'('ProcessCreate',
					_Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockEvent'('RunningProcess',
					_Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockEvent'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbProcessBlockedMsg.BlockEvent'},
		  X, Path).

'v_enum_CbProcessBlockedMsg.BlockResult'('ProcessTerminated',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedCBProcess',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedSystemProcess',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedCriticalSystemProcess',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedWhitelistedPath',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedOpenProcessError',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'('NotTerminatedTerminateError',
					 _Path) ->
    ok;
'v_enum_CbProcessBlockedMsg.BlockResult'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbProcessBlockedMsg.BlockResult'},
		  X, Path).

'v_enum_CbNetConnBlockedMsg.NetconnBlockType'('NetworkIsolation',
					      _Path) ->
    ok;
'v_enum_CbNetConnBlockedMsg.NetconnBlockType'(X,
					      Path) ->
    mk_type_error({invalid_enum,
		   'CbNetConnBlockedMsg.NetconnBlockType'},
		  X, Path).

'v_enum_CbNetConnBlockedMsg.ProtocolType'('ProtoTcp',
					  _Path) ->
    ok;
'v_enum_CbNetConnBlockedMsg.ProtocolType'('ProtoUdp',
					  _Path) ->
    ok;
'v_enum_CbNetConnBlockedMsg.ProtocolType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbNetConnBlockedMsg.ProtocolType'},
		  X, Path).

'v_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCoreDriverUnloaded',
					    _Path) ->
    ok;
'v_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertNetworkDriverUnloaded',
					    _Path) ->
    ok;
'v_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbServiceStopped',
					    _Path) ->
    ok;
'v_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbProcessTerminated',
					    _Path) ->
    ok;
'v_enum_CbTamperAlertMsg.CbTamperAlertType'('AlertCbCodeInjection',
					    _Path) ->
    ok;
'v_enum_CbTamperAlertMsg.CbTamperAlertType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'CbTamperAlertMsg.CbTamperAlertType'},
		  X, Path).

'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDep,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSehop,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAsr,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAslr,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionNullPage,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionHeapSpray,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMandatoryAslr,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEaf,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEafPlus,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBottomUpAslr,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionLoadLibrary,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMemoryProtection,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSimulateExecFlow,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionStackPivot,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionCallerChecks,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBannedFunctions,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDeepHooks,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAntiDetours,
						      _Path) ->
    ok;
'v_enum_CbEmetMitigationAction.CbEmetMitigationTypes'(X,
						      Path) ->
    mk_type_error({invalid_enum,
		   'CbEmetMitigationAction.CbEmetMitigationTypes'},
		  X, Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'CbStringMsg.CbStringType'},
      [{typeFilepath, 1}, {typeRegpath, 2},
       {typeNetpath, 3}]},
     {{enum, 'CbFileModMsg.CbFileModAction'},
      [{actionFileModCreate, 1}, {actionFileModWrite, 2},
       {actionFileModDelete, 4}, {actionFileModLastWrite, 8},
       {actionFileModOpen, 16}]},
     {{enum, 'CbFileModMsg.CbFileType'},
      [{filetypeUnknown, 0}, {filetypePe, 1},
       {filetypeElf, 2}, {filetypeUniversalBin, 3},
       {filetypeEicar, 8}, {filetypeOfficeLegacy, 16},
       {filetypeOfficeOpenXml, 17}, {filetypePdf, 48},
       {filetypeArchivePkzip, 64}, {filetypeArchiveLzh, 65},
       {filetypeArchiveLzw, 66}, {filetypeArchiveRar, 67},
       {filetypeArchiveTar, 68}, {filetypeArchive7zip, 69}]},
     {{enum, 'CbRegModMsg.CbRegModAction'},
      [{actionRegModCreateKey, 1},
       {actionRegModWriteValue, 2}, {actionRegModDeleteKey, 4},
       {actionRegModDeleteValue, 8}]},
     {{enum, 'CbNetConnMsg.ProtocolType'},
      [{'ProtoTcp', 6}, {'ProtoUdp', 17}]},
     {{enum, 'CbCrossProcessOpenMsg.OpenType'},
      [{'OpenProcessHandle', 1}, {'OpenThreadHandle', 2}]},
     {{enum, 'CbProcessBlockedMsg.BlockType'},
      [{'MD5Hash', 1}]},
     {{enum, 'CbProcessBlockedMsg.BlockEvent'},
      [{'ProcessCreate', 1}, {'RunningProcess', 2}]},
     {{enum, 'CbProcessBlockedMsg.BlockResult'},
      [{'ProcessTerminated', 0},
       {'NotTerminatedCBProcess', 1},
       {'NotTerminatedSystemProcess', 2},
       {'NotTerminatedCriticalSystemProcess', 3},
       {'NotTerminatedWhitelistedPath', 4},
       {'NotTerminatedOpenProcessError', 5},
       {'NotTerminatedTerminateError', 6}]},
     {{enum, 'CbNetConnBlockedMsg.NetconnBlockType'},
      [{'NetworkIsolation', 1}]},
     {{enum, 'CbNetConnBlockedMsg.ProtocolType'},
      [{'ProtoTcp', 6}, {'ProtoUdp', 17}]},
     {{enum, 'CbTamperAlertMsg.CbTamperAlertType'},
      [{'AlertCoreDriverUnloaded', 1},
       {'AlertNetworkDriverUnloaded', 2},
       {'AlertCbServiceStopped', 3},
       {'AlertCbProcessTerminated', 4},
       {'AlertCbCodeInjection', 5}]},
     {{enum, 'CbEmetMitigationAction.CbEmetMitigationTypes'},
      [{actionDep, 1}, {actionSehop, 2}, {actionAsr, 3},
       {actionAslr, 4}, {actionNullPage, 5},
       {actionHeapSpray, 6}, {actionMandatoryAslr, 7},
       {actionEaf, 8}, {actionEafPlus, 9},
       {actionBottomUpAslr, 10}, {actionLoadLibrary, 11},
       {actionMemoryProtection, 12},
       {actionSimulateExecFlow, 13}, {actionStackPivot, 14},
       {actionCallerChecks, 15}, {actionBannedFunctions, 16},
       {actionDeepHooks, 17}, {actionAntiDetours, 18}]},
     {{msg, 'CbEndpointEnvironmentMsg'},
      [#{name => 'SensorId', fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []},
       #{name => 'SensorHostName', fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => 'HostId', fnum => 3, rnum => 4, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, 'CbFileModMsg'},
      [#{name => guid, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => action, fnum => 2, rnum => 3,
	 type => {enum, 'CbFileModMsg.CbFileModAction'},
	 occurrence => optional, opts => []},
       #{name => have_seen_before, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => md5hash, fnum => 4, rnum => 5, type => bytes,
	 occurrence => optional, opts => []},
       #{name => type, fnum => 5, rnum => 6,
	 type => {enum, 'CbFileModMsg.CbFileType'},
	 occurrence => optional, opts => []},
       #{name => tamper, fnum => 6, rnum => 7, type => bool,
	 occurrence => optional, opts => [{default, false}]}]},
     {{msg, 'CbTamperAlertMsg'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'CbTamperAlertMsg.CbTamperAlertType'},
	 occurrence => optional, opts => []}]},
     {{msg, 'CbVtWriteMsg'},
      [#{name => 'WritingProcessExeMd5', fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => 'FileWrittenMd5', fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => 'FileWrittenIsPeModuleHint', fnum => 3,
	 rnum => 4, type => bool, occurrence => optional,
	 opts => []},
       #{name => 'WritingProcessFilename', fnum => 4,
	 rnum => 5, type => string, occurrence => optional,
	 opts => []},
       #{name => 'FileWrittenFilename', fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'CbModuleInfoMsg'},
      [#{name => md5, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => 'CopiedModuleLength', fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => 'OriginalModuleLength', fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => utf8_FileDescription, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_CompanyName, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_ProductName, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_FileVersion, fnum => 7, rnum => 8,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_Comments, fnum => 8, rnum => 9,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_LegalCopyright, fnum => 9, rnum => 10,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_LegalTrademark, fnum => 10, rnum => 11,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_InternalName, fnum => 11, rnum => 12,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_OriginalFileName, fnum => 12, rnum => 13,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_ProductDescription, fnum => 13,
	 rnum => 14, type => string, occurrence => optional,
	 opts => []},
       #{name => utf8_ProductVersion, fnum => 14, rnum => 15,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_PrivateBuild, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_SpecialBuild, fnum => 16, rnum => 17,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_DigSig_Publisher, fnum => 17, rnum => 18,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_DigSig_ProgramName, fnum => 18,
	 rnum => 19, type => string, occurrence => optional,
	 opts => []},
       #{name => utf8_DigSig_IssuerName, fnum => 19,
	 rnum => 20, type => string, occurrence => optional,
	 opts => []},
       #{name => utf8_DigSig_SubjectName, fnum => 20,
	 rnum => 21, type => string, occurrence => optional,
	 opts => []},
       #{name => utf8_DigSig_Result, fnum => 21, rnum => 22,
	 type => string, occurrence => optional, opts => []},
       #{name => utf8_DigSig_ResultCode, fnum => 22,
	 rnum => 23, type => string, occurrence => optional,
	 opts => []},
       #{name => utf8_DigSig_SignTime, fnum => 23, rnum => 24,
	 type => string, occurrence => optional, opts => []},
       #{name => 'Icon', fnum => 24, rnum => 25, type => bytes,
	 occurrence => optional, opts => []},
       #{name => 'ImageFileHeader', fnum => 25, rnum => 26,
	 type => bytes, occurrence => optional, opts => []},
       #{name => utf8_OnDiskFilename, fnum => 26, rnum => 27,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'CbLinStatsMsg'},
      [#{name => lin_total, fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []},
       #{name => lin_successful, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []},
       #{name => lin_no_scanidi, fnum => 3, rnum => 4,
	 type => int32, occurrence => optional, opts => []},
       #{name => lin_total_pended, fnum => 4, rnum => 5,
	 type => int32, occurrence => optional, opts => []},
       #{name => lin_current_scanid_pended_size, fnum => 5,
	 rnum => 6, type => int32, occurrence => optional,
	 opts => []},
       #{name => lin_current_handlepath_pended_size, fnum => 6,
	 rnum => 7, type => int32, occurrence => optional,
	 opts => []},
       #{name => lin_current_filepath_pended_size, fnum => 7,
	 rnum => 8, type => int32, occurrence => optional,
	 opts => []}]},
     {{msg, 'CbChildProcessMsg'},
      [#{name => created, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => parent_guid, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => md5hash, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => child_guid, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => path, fnum => 5, rnum => 6, type => string,
	 occurrence => optional, opts => []},
       #{name => pid, fnum => 6, rnum => 7, type => int64,
	 occurrence => optional, opts => []},
       #{name => create_time, fnum => 7, rnum => 8,
	 type => int64, occurrence => optional, opts => []},
       #{name => tamper, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => [{default, false}]}]},
     {{msg, 'CbCrossProcessOpenMsg'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'CbCrossProcessOpenMsg.OpenType'},
	 occurrence => optional, opts => []},
       #{name => targetPid, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => targetProcCreateTime, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => requestedAccess, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []},
       #{name => targetProcPath, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => targetProcMd5, fnum => 6, rnum => 7,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'CbModuleLoadMsg'},
      [#{name => guid, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => handlepath_string_guid, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => md5hash, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => scanid, fnum => 4, rnum => 5, type => int32,
	 occurrence => optional, opts => []},
       #{name => is_process_base_module, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => image_base, fnum => 6, rnum => 7,
	 type => int64, occurrence => optional, opts => []},
       #{name => image_size, fnum => 7, rnum => 8,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'CbNetConnBlockedMsg'},
      [#{name => blockedType, fnum => 1, rnum => 2,
	 type => {enum, 'CbNetConnBlockedMsg.NetconnBlockType'},
	 occurrence => optional, opts => []},
       #{name => ipv4Address, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => ipv6LoPart, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => ipv6HiPart, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []},
       #{name => port, fnum => 5, rnum => 6, type => uint32,
	 occurrence => optional, opts => []},
       #{name => protocol, fnum => 6, rnum => 7,
	 type => {enum, 'CbNetConnBlockedMsg.ProtocolType'},
	 occurrence => optional, opts => []},
       #{name => utf8_netpath, fnum => 7, rnum => 8,
	 type => bytes, occurrence => optional, opts => []},
       #{name => outbound, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => [{default, true}]},
       #{name => proxyConnection, fnum => 9, rnum => 10,
	 type => bool, occurrence => optional,
	 opts => [{default, false}]},
       #{name => proxyIpv4Address, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => proxyPort, fnum => 11, rnum => 12,
	 type => uint32, occurrence => optional, opts => []},
       #{name => proxyNetPath, fnum => 12, rnum => 13,
	 type => string, occurrence => optional, opts => []},
       #{name => remoteIpAddress, fnum => 13, rnum => 14,
	 type => uint32, occurrence => optional, opts => []},
       #{name => remotePort, fnum => 14, rnum => 15,
	 type => uint32, occurrence => optional, opts => []},
       #{name => localIpAddress, fnum => 15, rnum => 16,
	 type => uint32, occurrence => optional, opts => []},
       #{name => localPort, fnum => 16, rnum => 17,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'CbCreateRemoteThreadMsg'},
      [#{name => remoteProcPid, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []},
       #{name => remoteProcCreateTime, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => remoteProcPath, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => remoteProcMd5, fnum => 4, rnum => 5,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'CbRegModMsg'},
      [#{name => guid, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => action, fnum => 2, rnum => 3,
	 type => {enum, 'CbRegModMsg.CbRegModAction'},
	 occurrence => optional, opts => []},
       #{name => have_seen_before, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => utf8_regpath, fnum => 4, rnum => 5,
	 type => bytes, occurrence => optional, opts => []},
       #{name => tamper, fnum => 5, rnum => 6, type => bool,
	 occurrence => optional, opts => [{default, false}]}]},
     {{msg, 'CbStringMsg'},
      [#{name => guid, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => utf8string, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => string_type, fnum => 3, rnum => 4,
	 type => {enum, 'CbStringMsg.CbStringType'},
	 occurrence => optional,
	 opts => [{default, typeFilepath}]}]},
     {{msg, 'CbHeaderMsg'},
      [#{name => version, fnum => 1, rnum => 2, type => int32,
	 occurrence => required, opts => []},
       #{name => bootid, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []},
       #{name => eventid, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => timestamp, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => process_guid, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => filepath_string_guid, fnum => 6, rnum => 7,
	 type => int64, occurrence => optional, opts => []},
       #{name => magic, fnum => 7, rnum => 8, type => uint32,
	 occurrence => optional, opts => []},
       #{name => process_filepath_string_guid, fnum => 8,
	 rnum => 9, type => int64, occurrence => optional,
	 opts => []},
       #{name => process_create_time, fnum => 9, rnum => 10,
	 type => int64, occurrence => optional, opts => []},
       #{name => process_pid, fnum => 10, rnum => 11,
	 type => int32, occurrence => optional, opts => []},
       #{name => process_md5, fnum => 11, rnum => 12,
	 type => bytes, occurrence => optional, opts => []},
       #{name => process_path, fnum => 12, rnum => 13,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'CbEmetMitigationAction'},
      [#{name => mitigationType, fnum => 1, rnum => 2,
	 type =>
	     {enum, 'CbEmetMitigationAction.CbEmetMitigationTypes'},
	 occurrence => optional, opts => []}]},
     {{msg, 'CbEmetMitigationMsg'},
      [#{name => emetId, fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []},
       #{name => emetTimstamp, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => action, fnum => 3, rnum => 4,
	 type => {msg, 'CbEmetMitigationAction'},
	 occurrence => optional, opts => []},
       #{name => actionText, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => blocked, fnum => 5, rnum => 6, type => bool,
	 occurrence => optional, opts => [{default, false}]}]},
     {{msg, 'CbProcessBlockedMsg'},
      [#{name => blockedType, fnum => 1, rnum => 2,
	 type => {enum, 'CbProcessBlockedMsg.BlockType'},
	 occurrence => optional, opts => []},
       #{name => blockedEvent, fnum => 2, rnum => 3,
	 type => {enum, 'CbProcessBlockedMsg.BlockEvent'},
	 occurrence => optional, opts => []},
       #{name => blockedmd5Hash, fnum => 3, rnum => 4,
	 type => bytes, occurrence => optional, opts => []},
       #{name => blockedPath, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => blockResult, fnum => 5, rnum => 6,
	 type => {enum, 'CbProcessBlockedMsg.BlockResult'},
	 occurrence => optional, opts => []},
       #{name => blockError, fnum => 6, rnum => 7,
	 type => uint32, occurrence => optional, opts => []},
       #{name => blockedPid, fnum => 7, rnum => 8,
	 type => int32, occurrence => optional, opts => []},
       #{name => blockedProcCreateTime, fnum => 8, rnum => 9,
	 type => uint64, occurrence => optional, opts => []},
       #{name => blockedCmdline, fnum => 9, rnum => 10,
	 type => string, occurrence => optional, opts => []},
       #{name => blockedUid, fnum => 10, rnum => 11,
	 type => string, occurrence => optional, opts => []},
       #{name => blockedUsername, fnum => 11, rnum => 12,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'CbCrossProcessMsg'},
      [#{name => open, fnum => 1, rnum => 2,
	 type => {msg, 'CbCrossProcessOpenMsg'},
	 occurrence => optional, opts => []},
       #{name => remotethread, fnum => 2, rnum => 3,
	 type => {msg, 'CbCreateRemoteThreadMsg'},
	 occurrence => optional, opts => []},
       #{name => tamper, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'CbServerEnvironmentMsg'},
      [#{name => 'NodeId', fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, 'CbEnvironmentMsg'},
      [#{name => endpoint, fnum => 1, rnum => 2,
	 type => {msg, 'CbEndpointEnvironmentMsg'},
	 occurrence => optional, opts => []},
       #{name => server, fnum => 2, rnum => 3,
	 type => {msg, 'CbServerEnvironmentMsg'},
	 occurrence => optional, opts => []}]},
     {{msg, 'CbVtLoadMsg'},
      [#{name => 'LoaderProcessExeMd5', fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => 'LoadedModuleMd5', fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'CbStatisticsMsg'},
      [#{name => lin_stats, fnum => 1, rnum => 2,
	 type => {msg, 'CbLinStatsMsg'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'CbNetConnMsg'},
      [#{name => guid, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => ipv4Address, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => ipv6LoPart, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => ipv6HiPart, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []},
       #{name => port, fnum => 5, rnum => 6, type => uint32,
	 occurrence => optional, opts => []},
       #{name => protocol, fnum => 6, rnum => 7,
	 type => {enum, 'CbNetConnMsg.ProtocolType'},
	 occurrence => optional, opts => []},
       #{name => utf8_netpath, fnum => 7, rnum => 8,
	 type => bytes, occurrence => optional, opts => []},
       #{name => outbound, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => [{default, true}]},
       #{name => proxyConnection, fnum => 9, rnum => 10,
	 type => bool, occurrence => optional,
	 opts => [{default, false}]},
       #{name => proxyIpv4Address, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => proxyPort, fnum => 11, rnum => 12,
	 type => uint32, occurrence => optional, opts => []},
       #{name => proxyNetPath, fnum => 12, rnum => 13,
	 type => string, occurrence => optional, opts => []},
       #{name => remoteIpAddress, fnum => 13, rnum => 14,
	 type => uint32, occurrence => optional, opts => []},
       #{name => remotePort, fnum => 14, rnum => 15,
	 type => uint32, occurrence => optional, opts => []},
       #{name => localIpAddress, fnum => 15, rnum => 16,
	 type => uint32, occurrence => optional, opts => []},
       #{name => localPort, fnum => 16, rnum => 17,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'CbProcessMsg'},
      [#{name => pid, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => created, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []},
       #{name => parent_pid, fnum => 3, rnum => 4,
	 type => int32, occurrence => optional, opts => []},
       #{name => parent_create_time, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => parent_guid, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => md5hash, fnum => 6, rnum => 7, type => bytes,
	 occurrence => optional, opts => []},
       #{name => have_seen_before, fnum => 7, rnum => 8,
	 type => bool, occurrence => optional, opts => []},
       #{name => deprecated, fnum => 8, rnum => 9,
	 type => int64, occurrence => optional, opts => []},
       #{name => commandline, fnum => 9, rnum => 10,
	 type => bytes, occurrence => optional, opts => []},
       #{name => parent_md5, fnum => 10, rnum => 11,
	 type => bytes, occurrence => optional, opts => []},
       #{name => parent_path, fnum => 11, rnum => 12,
	 type => string, occurrence => optional, opts => []},
       #{name => creationobserved, fnum => 12, rnum => 13,
	 type => bool, occurrence => optional,
	 opts => [{default, false}]},
       #{name => expect_followon_w_md5, fnum => 13, rnum => 14,
	 type => bool, occurrence => optional,
	 opts => [{default, false}]},
       #{name => uid, fnum => 14, rnum => 15, type => string,
	 occurrence => optional, opts => []},
       #{name => username, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []},
       #{name => actions, fnum => 16, rnum => 17,
	 type => {msg, 'CbEmetMitigationAction'},
	 occurrence => repeated, opts => []},
       #{name => actionsAreFromGPO, fnum => 17, rnum => 18,
	 type => bool, occurrence => optional,
	 opts => [{default, false}]}]},
     {{msg, 'CbEventMsg'},
      [#{name => header, fnum => 1, rnum => 2,
	 type => {msg, 'CbHeaderMsg'}, occurrence => required,
	 opts => []},
       #{name => strings, fnum => 2, rnum => 3,
	 type => {msg, 'CbStringMsg'}, occurrence => repeated,
	 opts => []},
       #{name => process, fnum => 3, rnum => 4,
	 type => {msg, 'CbProcessMsg'}, occurrence => optional,
	 opts => []},
       #{name => modload, fnum => 4, rnum => 5,
	 type => {msg, 'CbModuleLoadMsg'},
	 occurrence => optional, opts => []},
       #{name => filemod, fnum => 5, rnum => 6,
	 type => {msg, 'CbFileModMsg'}, occurrence => optional,
	 opts => []},
       #{name => network, fnum => 6, rnum => 7,
	 type => {msg, 'CbNetConnMsg'}, occurrence => optional,
	 opts => []},
       #{name => regmod, fnum => 7, rnum => 8,
	 type => {msg, 'CbRegModMsg'}, occurrence => optional,
	 opts => []},
       #{name => stats, fnum => 8, rnum => 9,
	 type => {msg, 'CbStatisticsMsg'},
	 occurrence => optional, opts => []},
       #{name => module, fnum => 9, rnum => 10,
	 type => {msg, 'CbModuleInfoMsg'},
	 occurrence => optional, opts => []},
       #{name => vtwrite, fnum => 10, rnum => 11,
	 type => {msg, 'CbVtWriteMsg'}, occurrence => optional,
	 opts => []},
       #{name => vtload, fnum => 11, rnum => 12,
	 type => {msg, 'CbVtLoadMsg'}, occurrence => optional,
	 opts => []},
       #{name => childproc, fnum => 12, rnum => 13,
	 type => {msg, 'CbChildProcessMsg'},
	 occurrence => optional, opts => []},
       #{name => env, fnum => 13, rnum => 14,
	 type => {msg, 'CbEnvironmentMsg'},
	 occurrence => optional, opts => []},
       #{name => crossproc, fnum => 14, rnum => 15,
	 type => {msg, 'CbCrossProcessMsg'},
	 occurrence => optional, opts => []},
       #{name => tamperAlert, fnum => 15, rnum => 16,
	 type => {msg, 'CbTamperAlertMsg'},
	 occurrence => optional, opts => []},
       #{name => blocked, fnum => 16, rnum => 17,
	 type => {msg, 'CbProcessBlockedMsg'},
	 occurrence => optional, opts => []},
       #{name => emet, fnum => 17, rnum => 18,
	 type => {msg, 'CbEmetMitigationMsg'},
	 occurrence => optional, opts => []},
       #{name => netconnBlocked, fnum => 18, rnum => 19,
	 type => {msg, 'CbNetConnBlockedMsg'},
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['CbEndpointEnvironmentMsg', 'CbFileModMsg',
     'CbTamperAlertMsg', 'CbVtWriteMsg', 'CbModuleInfoMsg',
     'CbLinStatsMsg', 'CbChildProcessMsg',
     'CbCrossProcessOpenMsg', 'CbModuleLoadMsg',
     'CbNetConnBlockedMsg', 'CbCreateRemoteThreadMsg',
     'CbRegModMsg', 'CbStringMsg', 'CbHeaderMsg',
     'CbEmetMitigationAction', 'CbEmetMitigationMsg',
     'CbProcessBlockedMsg', 'CbCrossProcessMsg',
     'CbServerEnvironmentMsg', 'CbEnvironmentMsg',
     'CbVtLoadMsg', 'CbStatisticsMsg', 'CbNetConnMsg',
     'CbProcessMsg', 'CbEventMsg'].


get_enum_names() ->
    ['CbStringMsg.CbStringType',
     'CbFileModMsg.CbFileModAction',
     'CbFileModMsg.CbFileType', 'CbRegModMsg.CbRegModAction',
     'CbNetConnMsg.ProtocolType',
     'CbCrossProcessOpenMsg.OpenType',
     'CbProcessBlockedMsg.BlockType',
     'CbProcessBlockedMsg.BlockEvent',
     'CbProcessBlockedMsg.BlockResult',
     'CbNetConnBlockedMsg.NetconnBlockType',
     'CbNetConnBlockedMsg.ProtocolType',
     'CbTamperAlertMsg.CbTamperAlertType',
     'CbEmetMitigationAction.CbEmetMitigationTypes'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('CbEndpointEnvironmentMsg') ->
    [#{name => 'SensorId', fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []},
     #{name => 'SensorHostName', fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => 'HostId', fnum => 3, rnum => 4, type => int64,
       occurrence => optional, opts => []}];
find_msg_def('CbFileModMsg') ->
    [#{name => guid, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => action, fnum => 2, rnum => 3,
       type => {enum, 'CbFileModMsg.CbFileModAction'},
       occurrence => optional, opts => []},
     #{name => have_seen_before, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => md5hash, fnum => 4, rnum => 5, type => bytes,
       occurrence => optional, opts => []},
     #{name => type, fnum => 5, rnum => 6,
       type => {enum, 'CbFileModMsg.CbFileType'},
       occurrence => optional, opts => []},
     #{name => tamper, fnum => 6, rnum => 7, type => bool,
       occurrence => optional, opts => [{default, false}]}];
find_msg_def('CbTamperAlertMsg') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'CbTamperAlertMsg.CbTamperAlertType'},
       occurrence => optional, opts => []}];
find_msg_def('CbVtWriteMsg') ->
    [#{name => 'WritingProcessExeMd5', fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => 'FileWrittenMd5', fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => 'FileWrittenIsPeModuleHint', fnum => 3,
       rnum => 4, type => bool, occurrence => optional,
       opts => []},
     #{name => 'WritingProcessFilename', fnum => 4,
       rnum => 5, type => string, occurrence => optional,
       opts => []},
     #{name => 'FileWrittenFilename', fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []}];
find_msg_def('CbModuleInfoMsg') ->
    [#{name => md5, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => 'CopiedModuleLength', fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => 'OriginalModuleLength', fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => utf8_FileDescription, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_CompanyName, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_ProductName, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_FileVersion, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_Comments, fnum => 8, rnum => 9,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_LegalCopyright, fnum => 9, rnum => 10,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_LegalTrademark, fnum => 10, rnum => 11,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_InternalName, fnum => 11, rnum => 12,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_OriginalFileName, fnum => 12, rnum => 13,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_ProductDescription, fnum => 13,
       rnum => 14, type => string, occurrence => optional,
       opts => []},
     #{name => utf8_ProductVersion, fnum => 14, rnum => 15,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_PrivateBuild, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_SpecialBuild, fnum => 16, rnum => 17,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_DigSig_Publisher, fnum => 17, rnum => 18,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_DigSig_ProgramName, fnum => 18,
       rnum => 19, type => string, occurrence => optional,
       opts => []},
     #{name => utf8_DigSig_IssuerName, fnum => 19,
       rnum => 20, type => string, occurrence => optional,
       opts => []},
     #{name => utf8_DigSig_SubjectName, fnum => 20,
       rnum => 21, type => string, occurrence => optional,
       opts => []},
     #{name => utf8_DigSig_Result, fnum => 21, rnum => 22,
       type => string, occurrence => optional, opts => []},
     #{name => utf8_DigSig_ResultCode, fnum => 22,
       rnum => 23, type => string, occurrence => optional,
       opts => []},
     #{name => utf8_DigSig_SignTime, fnum => 23, rnum => 24,
       type => string, occurrence => optional, opts => []},
     #{name => 'Icon', fnum => 24, rnum => 25, type => bytes,
       occurrence => optional, opts => []},
     #{name => 'ImageFileHeader', fnum => 25, rnum => 26,
       type => bytes, occurrence => optional, opts => []},
     #{name => utf8_OnDiskFilename, fnum => 26, rnum => 27,
       type => string, occurrence => optional, opts => []}];
find_msg_def('CbLinStatsMsg') ->
    [#{name => lin_total, fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []},
     #{name => lin_successful, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []},
     #{name => lin_no_scanidi, fnum => 3, rnum => 4,
       type => int32, occurrence => optional, opts => []},
     #{name => lin_total_pended, fnum => 4, rnum => 5,
       type => int32, occurrence => optional, opts => []},
     #{name => lin_current_scanid_pended_size, fnum => 5,
       rnum => 6, type => int32, occurrence => optional,
       opts => []},
     #{name => lin_current_handlepath_pended_size, fnum => 6,
       rnum => 7, type => int32, occurrence => optional,
       opts => []},
     #{name => lin_current_filepath_pended_size, fnum => 7,
       rnum => 8, type => int32, occurrence => optional,
       opts => []}];
find_msg_def('CbChildProcessMsg') ->
    [#{name => created, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => parent_guid, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => md5hash, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => child_guid, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => path, fnum => 5, rnum => 6, type => string,
       occurrence => optional, opts => []},
     #{name => pid, fnum => 6, rnum => 7, type => int64,
       occurrence => optional, opts => []},
     #{name => create_time, fnum => 7, rnum => 8,
       type => int64, occurrence => optional, opts => []},
     #{name => tamper, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => [{default, false}]}];
find_msg_def('CbCrossProcessOpenMsg') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'CbCrossProcessOpenMsg.OpenType'},
       occurrence => optional, opts => []},
     #{name => targetPid, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => targetProcCreateTime, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => requestedAccess, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []},
     #{name => targetProcPath, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => targetProcMd5, fnum => 6, rnum => 7,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('CbModuleLoadMsg') ->
    [#{name => guid, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => handlepath_string_guid, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => md5hash, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => scanid, fnum => 4, rnum => 5, type => int32,
       occurrence => optional, opts => []},
     #{name => is_process_base_module, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => image_base, fnum => 6, rnum => 7,
       type => int64, occurrence => optional, opts => []},
     #{name => image_size, fnum => 7, rnum => 8,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('CbNetConnBlockedMsg') ->
    [#{name => blockedType, fnum => 1, rnum => 2,
       type => {enum, 'CbNetConnBlockedMsg.NetconnBlockType'},
       occurrence => optional, opts => []},
     #{name => ipv4Address, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => ipv6LoPart, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => ipv6HiPart, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []},
     #{name => port, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []},
     #{name => protocol, fnum => 6, rnum => 7,
       type => {enum, 'CbNetConnBlockedMsg.ProtocolType'},
       occurrence => optional, opts => []},
     #{name => utf8_netpath, fnum => 7, rnum => 8,
       type => bytes, occurrence => optional, opts => []},
     #{name => outbound, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => [{default, true}]},
     #{name => proxyConnection, fnum => 9, rnum => 10,
       type => bool, occurrence => optional,
       opts => [{default, false}]},
     #{name => proxyIpv4Address, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => proxyPort, fnum => 11, rnum => 12,
       type => uint32, occurrence => optional, opts => []},
     #{name => proxyNetPath, fnum => 12, rnum => 13,
       type => string, occurrence => optional, opts => []},
     #{name => remoteIpAddress, fnum => 13, rnum => 14,
       type => uint32, occurrence => optional, opts => []},
     #{name => remotePort, fnum => 14, rnum => 15,
       type => uint32, occurrence => optional, opts => []},
     #{name => localIpAddress, fnum => 15, rnum => 16,
       type => uint32, occurrence => optional, opts => []},
     #{name => localPort, fnum => 16, rnum => 17,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('CbCreateRemoteThreadMsg') ->
    [#{name => remoteProcPid, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []},
     #{name => remoteProcCreateTime, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => remoteProcPath, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => remoteProcMd5, fnum => 4, rnum => 5,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('CbRegModMsg') ->
    [#{name => guid, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => action, fnum => 2, rnum => 3,
       type => {enum, 'CbRegModMsg.CbRegModAction'},
       occurrence => optional, opts => []},
     #{name => have_seen_before, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => utf8_regpath, fnum => 4, rnum => 5,
       type => bytes, occurrence => optional, opts => []},
     #{name => tamper, fnum => 5, rnum => 6, type => bool,
       occurrence => optional, opts => [{default, false}]}];
find_msg_def('CbStringMsg') ->
    [#{name => guid, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => utf8string, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => string_type, fnum => 3, rnum => 4,
       type => {enum, 'CbStringMsg.CbStringType'},
       occurrence => optional,
       opts => [{default, typeFilepath}]}];
find_msg_def('CbHeaderMsg') ->
    [#{name => version, fnum => 1, rnum => 2, type => int32,
       occurrence => required, opts => []},
     #{name => bootid, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => eventid, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => timestamp, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => process_guid, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => filepath_string_guid, fnum => 6, rnum => 7,
       type => int64, occurrence => optional, opts => []},
     #{name => magic, fnum => 7, rnum => 8, type => uint32,
       occurrence => optional, opts => []},
     #{name => process_filepath_string_guid, fnum => 8,
       rnum => 9, type => int64, occurrence => optional,
       opts => []},
     #{name => process_create_time, fnum => 9, rnum => 10,
       type => int64, occurrence => optional, opts => []},
     #{name => process_pid, fnum => 10, rnum => 11,
       type => int32, occurrence => optional, opts => []},
     #{name => process_md5, fnum => 11, rnum => 12,
       type => bytes, occurrence => optional, opts => []},
     #{name => process_path, fnum => 12, rnum => 13,
       type => string, occurrence => optional, opts => []}];
find_msg_def('CbEmetMitigationAction') ->
    [#{name => mitigationType, fnum => 1, rnum => 2,
       type =>
	   {enum, 'CbEmetMitigationAction.CbEmetMitigationTypes'},
       occurrence => optional, opts => []}];
find_msg_def('CbEmetMitigationMsg') ->
    [#{name => emetId, fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []},
     #{name => emetTimstamp, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => action, fnum => 3, rnum => 4,
       type => {msg, 'CbEmetMitigationAction'},
       occurrence => optional, opts => []},
     #{name => actionText, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => blocked, fnum => 5, rnum => 6, type => bool,
       occurrence => optional, opts => [{default, false}]}];
find_msg_def('CbProcessBlockedMsg') ->
    [#{name => blockedType, fnum => 1, rnum => 2,
       type => {enum, 'CbProcessBlockedMsg.BlockType'},
       occurrence => optional, opts => []},
     #{name => blockedEvent, fnum => 2, rnum => 3,
       type => {enum, 'CbProcessBlockedMsg.BlockEvent'},
       occurrence => optional, opts => []},
     #{name => blockedmd5Hash, fnum => 3, rnum => 4,
       type => bytes, occurrence => optional, opts => []},
     #{name => blockedPath, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => blockResult, fnum => 5, rnum => 6,
       type => {enum, 'CbProcessBlockedMsg.BlockResult'},
       occurrence => optional, opts => []},
     #{name => blockError, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => blockedPid, fnum => 7, rnum => 8,
       type => int32, occurrence => optional, opts => []},
     #{name => blockedProcCreateTime, fnum => 8, rnum => 9,
       type => uint64, occurrence => optional, opts => []},
     #{name => blockedCmdline, fnum => 9, rnum => 10,
       type => string, occurrence => optional, opts => []},
     #{name => blockedUid, fnum => 10, rnum => 11,
       type => string, occurrence => optional, opts => []},
     #{name => blockedUsername, fnum => 11, rnum => 12,
       type => string, occurrence => optional, opts => []}];
find_msg_def('CbCrossProcessMsg') ->
    [#{name => open, fnum => 1, rnum => 2,
       type => {msg, 'CbCrossProcessOpenMsg'},
       occurrence => optional, opts => []},
     #{name => remotethread, fnum => 2, rnum => 3,
       type => {msg, 'CbCreateRemoteThreadMsg'},
       occurrence => optional, opts => []},
     #{name => tamper, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('CbServerEnvironmentMsg') ->
    [#{name => 'NodeId', fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []}];
find_msg_def('CbEnvironmentMsg') ->
    [#{name => endpoint, fnum => 1, rnum => 2,
       type => {msg, 'CbEndpointEnvironmentMsg'},
       occurrence => optional, opts => []},
     #{name => server, fnum => 2, rnum => 3,
       type => {msg, 'CbServerEnvironmentMsg'},
       occurrence => optional, opts => []}];
find_msg_def('CbVtLoadMsg') ->
    [#{name => 'LoaderProcessExeMd5', fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => 'LoadedModuleMd5', fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('CbStatisticsMsg') ->
    [#{name => lin_stats, fnum => 1, rnum => 2,
       type => {msg, 'CbLinStatsMsg'}, occurrence => optional,
       opts => []}];
find_msg_def('CbNetConnMsg') ->
    [#{name => guid, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => ipv4Address, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => ipv6LoPart, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => ipv6HiPart, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []},
     #{name => port, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []},
     #{name => protocol, fnum => 6, rnum => 7,
       type => {enum, 'CbNetConnMsg.ProtocolType'},
       occurrence => optional, opts => []},
     #{name => utf8_netpath, fnum => 7, rnum => 8,
       type => bytes, occurrence => optional, opts => []},
     #{name => outbound, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => [{default, true}]},
     #{name => proxyConnection, fnum => 9, rnum => 10,
       type => bool, occurrence => optional,
       opts => [{default, false}]},
     #{name => proxyIpv4Address, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => proxyPort, fnum => 11, rnum => 12,
       type => uint32, occurrence => optional, opts => []},
     #{name => proxyNetPath, fnum => 12, rnum => 13,
       type => string, occurrence => optional, opts => []},
     #{name => remoteIpAddress, fnum => 13, rnum => 14,
       type => uint32, occurrence => optional, opts => []},
     #{name => remotePort, fnum => 14, rnum => 15,
       type => uint32, occurrence => optional, opts => []},
     #{name => localIpAddress, fnum => 15, rnum => 16,
       type => uint32, occurrence => optional, opts => []},
     #{name => localPort, fnum => 16, rnum => 17,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('CbProcessMsg') ->
    [#{name => pid, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => created, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []},
     #{name => parent_pid, fnum => 3, rnum => 4,
       type => int32, occurrence => optional, opts => []},
     #{name => parent_create_time, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => parent_guid, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => md5hash, fnum => 6, rnum => 7, type => bytes,
       occurrence => optional, opts => []},
     #{name => have_seen_before, fnum => 7, rnum => 8,
       type => bool, occurrence => optional, opts => []},
     #{name => deprecated, fnum => 8, rnum => 9,
       type => int64, occurrence => optional, opts => []},
     #{name => commandline, fnum => 9, rnum => 10,
       type => bytes, occurrence => optional, opts => []},
     #{name => parent_md5, fnum => 10, rnum => 11,
       type => bytes, occurrence => optional, opts => []},
     #{name => parent_path, fnum => 11, rnum => 12,
       type => string, occurrence => optional, opts => []},
     #{name => creationobserved, fnum => 12, rnum => 13,
       type => bool, occurrence => optional,
       opts => [{default, false}]},
     #{name => expect_followon_w_md5, fnum => 13, rnum => 14,
       type => bool, occurrence => optional,
       opts => [{default, false}]},
     #{name => uid, fnum => 14, rnum => 15, type => string,
       occurrence => optional, opts => []},
     #{name => username, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []},
     #{name => actions, fnum => 16, rnum => 17,
       type => {msg, 'CbEmetMitigationAction'},
       occurrence => repeated, opts => []},
     #{name => actionsAreFromGPO, fnum => 17, rnum => 18,
       type => bool, occurrence => optional,
       opts => [{default, false}]}];
find_msg_def('CbEventMsg') ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, 'CbHeaderMsg'}, occurrence => required,
       opts => []},
     #{name => strings, fnum => 2, rnum => 3,
       type => {msg, 'CbStringMsg'}, occurrence => repeated,
       opts => []},
     #{name => process, fnum => 3, rnum => 4,
       type => {msg, 'CbProcessMsg'}, occurrence => optional,
       opts => []},
     #{name => modload, fnum => 4, rnum => 5,
       type => {msg, 'CbModuleLoadMsg'},
       occurrence => optional, opts => []},
     #{name => filemod, fnum => 5, rnum => 6,
       type => {msg, 'CbFileModMsg'}, occurrence => optional,
       opts => []},
     #{name => network, fnum => 6, rnum => 7,
       type => {msg, 'CbNetConnMsg'}, occurrence => optional,
       opts => []},
     #{name => regmod, fnum => 7, rnum => 8,
       type => {msg, 'CbRegModMsg'}, occurrence => optional,
       opts => []},
     #{name => stats, fnum => 8, rnum => 9,
       type => {msg, 'CbStatisticsMsg'},
       occurrence => optional, opts => []},
     #{name => module, fnum => 9, rnum => 10,
       type => {msg, 'CbModuleInfoMsg'},
       occurrence => optional, opts => []},
     #{name => vtwrite, fnum => 10, rnum => 11,
       type => {msg, 'CbVtWriteMsg'}, occurrence => optional,
       opts => []},
     #{name => vtload, fnum => 11, rnum => 12,
       type => {msg, 'CbVtLoadMsg'}, occurrence => optional,
       opts => []},
     #{name => childproc, fnum => 12, rnum => 13,
       type => {msg, 'CbChildProcessMsg'},
       occurrence => optional, opts => []},
     #{name => env, fnum => 13, rnum => 14,
       type => {msg, 'CbEnvironmentMsg'},
       occurrence => optional, opts => []},
     #{name => crossproc, fnum => 14, rnum => 15,
       type => {msg, 'CbCrossProcessMsg'},
       occurrence => optional, opts => []},
     #{name => tamperAlert, fnum => 15, rnum => 16,
       type => {msg, 'CbTamperAlertMsg'},
       occurrence => optional, opts => []},
     #{name => blocked, fnum => 16, rnum => 17,
       type => {msg, 'CbProcessBlockedMsg'},
       occurrence => optional, opts => []},
     #{name => emet, fnum => 17, rnum => 18,
       type => {msg, 'CbEmetMitigationMsg'},
       occurrence => optional, opts => []},
     #{name => netconnBlocked, fnum => 18, rnum => 19,
       type => {msg, 'CbNetConnBlockedMsg'},
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('CbStringMsg.CbStringType') ->
    [{typeFilepath, 1}, {typeRegpath, 2}, {typeNetpath, 3}];
find_enum_def('CbFileModMsg.CbFileModAction') ->
    [{actionFileModCreate, 1}, {actionFileModWrite, 2},
     {actionFileModDelete, 4}, {actionFileModLastWrite, 8},
     {actionFileModOpen, 16}];
find_enum_def('CbFileModMsg.CbFileType') ->
    [{filetypeUnknown, 0}, {filetypePe, 1},
     {filetypeElf, 2}, {filetypeUniversalBin, 3},
     {filetypeEicar, 8}, {filetypeOfficeLegacy, 16},
     {filetypeOfficeOpenXml, 17}, {filetypePdf, 48},
     {filetypeArchivePkzip, 64}, {filetypeArchiveLzh, 65},
     {filetypeArchiveLzw, 66}, {filetypeArchiveRar, 67},
     {filetypeArchiveTar, 68}, {filetypeArchive7zip, 69}];
find_enum_def('CbRegModMsg.CbRegModAction') ->
    [{actionRegModCreateKey, 1},
     {actionRegModWriteValue, 2}, {actionRegModDeleteKey, 4},
     {actionRegModDeleteValue, 8}];
find_enum_def('CbNetConnMsg.ProtocolType') ->
    [{'ProtoTcp', 6}, {'ProtoUdp', 17}];
find_enum_def('CbCrossProcessOpenMsg.OpenType') ->
    [{'OpenProcessHandle', 1}, {'OpenThreadHandle', 2}];
find_enum_def('CbProcessBlockedMsg.BlockType') ->
    [{'MD5Hash', 1}];
find_enum_def('CbProcessBlockedMsg.BlockEvent') ->
    [{'ProcessCreate', 1}, {'RunningProcess', 2}];
find_enum_def('CbProcessBlockedMsg.BlockResult') ->
    [{'ProcessTerminated', 0},
     {'NotTerminatedCBProcess', 1},
     {'NotTerminatedSystemProcess', 2},
     {'NotTerminatedCriticalSystemProcess', 3},
     {'NotTerminatedWhitelistedPath', 4},
     {'NotTerminatedOpenProcessError', 5},
     {'NotTerminatedTerminateError', 6}];
find_enum_def('CbNetConnBlockedMsg.NetconnBlockType') ->
    [{'NetworkIsolation', 1}];
find_enum_def('CbNetConnBlockedMsg.ProtocolType') ->
    [{'ProtoTcp', 6}, {'ProtoUdp', 17}];
find_enum_def('CbTamperAlertMsg.CbTamperAlertType') ->
    [{'AlertCoreDriverUnloaded', 1},
     {'AlertNetworkDriverUnloaded', 2},
     {'AlertCbServiceStopped', 3},
     {'AlertCbProcessTerminated', 4},
     {'AlertCbCodeInjection', 5}];
find_enum_def('CbEmetMitigationAction.CbEmetMitigationTypes') ->
    [{actionDep, 1}, {actionSehop, 2}, {actionAsr, 3},
     {actionAslr, 4}, {actionNullPage, 5},
     {actionHeapSpray, 6}, {actionMandatoryAslr, 7},
     {actionEaf, 8}, {actionEafPlus, 9},
     {actionBottomUpAslr, 10}, {actionLoadLibrary, 11},
     {actionMemoryProtection, 12},
     {actionSimulateExecFlow, 13}, {actionStackPivot, 14},
     {actionCallerChecks, 15}, {actionBannedFunctions, 16},
     {actionDeepHooks, 17}, {actionAntiDetours, 18}];
find_enum_def(_) -> error.


enum_symbol_by_value('CbStringMsg.CbStringType',
		     Value) ->
    'enum_symbol_by_value_CbStringMsg.CbStringType'(Value);
enum_symbol_by_value('CbFileModMsg.CbFileModAction',
		     Value) ->
    'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(Value);
enum_symbol_by_value('CbFileModMsg.CbFileType',
		     Value) ->
    'enum_symbol_by_value_CbFileModMsg.CbFileType'(Value);
enum_symbol_by_value('CbRegModMsg.CbRegModAction',
		     Value) ->
    'enum_symbol_by_value_CbRegModMsg.CbRegModAction'(Value);
enum_symbol_by_value('CbNetConnMsg.ProtocolType',
		     Value) ->
    'enum_symbol_by_value_CbNetConnMsg.ProtocolType'(Value);
enum_symbol_by_value('CbCrossProcessOpenMsg.OpenType',
		     Value) ->
    'enum_symbol_by_value_CbCrossProcessOpenMsg.OpenType'(Value);
enum_symbol_by_value('CbProcessBlockedMsg.BlockType',
		     Value) ->
    'enum_symbol_by_value_CbProcessBlockedMsg.BlockType'(Value);
enum_symbol_by_value('CbProcessBlockedMsg.BlockEvent',
		     Value) ->
    'enum_symbol_by_value_CbProcessBlockedMsg.BlockEvent'(Value);
enum_symbol_by_value('CbProcessBlockedMsg.BlockResult',
		     Value) ->
    'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(Value);
enum_symbol_by_value('CbNetConnBlockedMsg.NetconnBlockType',
		     Value) ->
    'enum_symbol_by_value_CbNetConnBlockedMsg.NetconnBlockType'(Value);
enum_symbol_by_value('CbNetConnBlockedMsg.ProtocolType',
		     Value) ->
    'enum_symbol_by_value_CbNetConnBlockedMsg.ProtocolType'(Value);
enum_symbol_by_value('CbTamperAlertMsg.CbTamperAlertType',
		     Value) ->
    'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(Value);
enum_symbol_by_value('CbEmetMitigationAction.CbEmetMitigationTypes',
		     Value) ->
    'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(Value).


enum_value_by_symbol('CbStringMsg.CbStringType', Sym) ->
    'enum_value_by_symbol_CbStringMsg.CbStringType'(Sym);
enum_value_by_symbol('CbFileModMsg.CbFileModAction',
		     Sym) ->
    'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(Sym);
enum_value_by_symbol('CbFileModMsg.CbFileType', Sym) ->
    'enum_value_by_symbol_CbFileModMsg.CbFileType'(Sym);
enum_value_by_symbol('CbRegModMsg.CbRegModAction',
		     Sym) ->
    'enum_value_by_symbol_CbRegModMsg.CbRegModAction'(Sym);
enum_value_by_symbol('CbNetConnMsg.ProtocolType',
		     Sym) ->
    'enum_value_by_symbol_CbNetConnMsg.ProtocolType'(Sym);
enum_value_by_symbol('CbCrossProcessOpenMsg.OpenType',
		     Sym) ->
    'enum_value_by_symbol_CbCrossProcessOpenMsg.OpenType'(Sym);
enum_value_by_symbol('CbProcessBlockedMsg.BlockType',
		     Sym) ->
    'enum_value_by_symbol_CbProcessBlockedMsg.BlockType'(Sym);
enum_value_by_symbol('CbProcessBlockedMsg.BlockEvent',
		     Sym) ->
    'enum_value_by_symbol_CbProcessBlockedMsg.BlockEvent'(Sym);
enum_value_by_symbol('CbProcessBlockedMsg.BlockResult',
		     Sym) ->
    'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'(Sym);
enum_value_by_symbol('CbNetConnBlockedMsg.NetconnBlockType',
		     Sym) ->
    'enum_value_by_symbol_CbNetConnBlockedMsg.NetconnBlockType'(Sym);
enum_value_by_symbol('CbNetConnBlockedMsg.ProtocolType',
		     Sym) ->
    'enum_value_by_symbol_CbNetConnBlockedMsg.ProtocolType'(Sym);
enum_value_by_symbol('CbTamperAlertMsg.CbTamperAlertType',
		     Sym) ->
    'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'(Sym);
enum_value_by_symbol('CbEmetMitigationAction.CbEmetMitigationTypes',
		     Sym) ->
    'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(Sym).


'enum_symbol_by_value_CbStringMsg.CbStringType'(1) ->
    typeFilepath;
'enum_symbol_by_value_CbStringMsg.CbStringType'(2) ->
    typeRegpath;
'enum_symbol_by_value_CbStringMsg.CbStringType'(3) ->
    typeNetpath.


'enum_value_by_symbol_CbStringMsg.CbStringType'(typeFilepath) ->
    1;
'enum_value_by_symbol_CbStringMsg.CbStringType'(typeRegpath) ->
    2;
'enum_value_by_symbol_CbStringMsg.CbStringType'(typeNetpath) ->
    3.

'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(1) ->
    actionFileModCreate;
'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(2) ->
    actionFileModWrite;
'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(4) ->
    actionFileModDelete;
'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(8) ->
    actionFileModLastWrite;
'enum_symbol_by_value_CbFileModMsg.CbFileModAction'(16) ->
    actionFileModOpen.


'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(actionFileModCreate) ->
    1;
'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(actionFileModWrite) ->
    2;
'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(actionFileModDelete) ->
    4;
'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(actionFileModLastWrite) ->
    8;
'enum_value_by_symbol_CbFileModMsg.CbFileModAction'(actionFileModOpen) ->
    16.

'enum_symbol_by_value_CbFileModMsg.CbFileType'(0) ->
    filetypeUnknown;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(1) ->
    filetypePe;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(2) ->
    filetypeElf;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(3) ->
    filetypeUniversalBin;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(8) ->
    filetypeEicar;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(16) ->
    filetypeOfficeLegacy;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(17) ->
    filetypeOfficeOpenXml;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(48) ->
    filetypePdf;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(64) ->
    filetypeArchivePkzip;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(65) ->
    filetypeArchiveLzh;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(66) ->
    filetypeArchiveLzw;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(67) ->
    filetypeArchiveRar;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(68) ->
    filetypeArchiveTar;
'enum_symbol_by_value_CbFileModMsg.CbFileType'(69) ->
    filetypeArchive7zip.


'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeUnknown) ->
    0;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypePe) ->
    1;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeElf) ->
    2;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeUniversalBin) ->
    3;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeEicar) ->
    8;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeOfficeLegacy) ->
    16;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeOfficeOpenXml) ->
    17;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypePdf) ->
    48;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchivePkzip) ->
    64;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchiveLzh) ->
    65;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchiveLzw) ->
    66;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchiveRar) ->
    67;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchiveTar) ->
    68;
'enum_value_by_symbol_CbFileModMsg.CbFileType'(filetypeArchive7zip) ->
    69.

'enum_symbol_by_value_CbRegModMsg.CbRegModAction'(1) ->
    actionRegModCreateKey;
'enum_symbol_by_value_CbRegModMsg.CbRegModAction'(2) ->
    actionRegModWriteValue;
'enum_symbol_by_value_CbRegModMsg.CbRegModAction'(4) ->
    actionRegModDeleteKey;
'enum_symbol_by_value_CbRegModMsg.CbRegModAction'(8) ->
    actionRegModDeleteValue.


'enum_value_by_symbol_CbRegModMsg.CbRegModAction'(actionRegModCreateKey) ->
    1;
'enum_value_by_symbol_CbRegModMsg.CbRegModAction'(actionRegModWriteValue) ->
    2;
'enum_value_by_symbol_CbRegModMsg.CbRegModAction'(actionRegModDeleteKey) ->
    4;
'enum_value_by_symbol_CbRegModMsg.CbRegModAction'(actionRegModDeleteValue) ->
    8.

'enum_symbol_by_value_CbNetConnMsg.ProtocolType'(6) ->
    'ProtoTcp';
'enum_symbol_by_value_CbNetConnMsg.ProtocolType'(17) ->
    'ProtoUdp'.


'enum_value_by_symbol_CbNetConnMsg.ProtocolType'('ProtoTcp') ->
    6;
'enum_value_by_symbol_CbNetConnMsg.ProtocolType'('ProtoUdp') ->
    17.

'enum_symbol_by_value_CbCrossProcessOpenMsg.OpenType'(1) ->
    'OpenProcessHandle';
'enum_symbol_by_value_CbCrossProcessOpenMsg.OpenType'(2) ->
    'OpenThreadHandle'.


'enum_value_by_symbol_CbCrossProcessOpenMsg.OpenType'('OpenProcessHandle') ->
    1;
'enum_value_by_symbol_CbCrossProcessOpenMsg.OpenType'('OpenThreadHandle') ->
    2.

'enum_symbol_by_value_CbProcessBlockedMsg.BlockType'(1) ->
    'MD5Hash'.


'enum_value_by_symbol_CbProcessBlockedMsg.BlockType'('MD5Hash') ->
    1.

'enum_symbol_by_value_CbProcessBlockedMsg.BlockEvent'(1) ->
    'ProcessCreate';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockEvent'(2) ->
    'RunningProcess'.


'enum_value_by_symbol_CbProcessBlockedMsg.BlockEvent'('ProcessCreate') ->
    1;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockEvent'('RunningProcess') ->
    2.

'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(0) ->
    'ProcessTerminated';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(1) ->
    'NotTerminatedCBProcess';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(2) ->
    'NotTerminatedSystemProcess';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(3) ->
    'NotTerminatedCriticalSystemProcess';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(4) ->
    'NotTerminatedWhitelistedPath';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(5) ->
    'NotTerminatedOpenProcessError';
'enum_symbol_by_value_CbProcessBlockedMsg.BlockResult'(6) ->
    'NotTerminatedTerminateError'.


'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('ProcessTerminated') ->
    0;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedCBProcess') ->
    1;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedSystemProcess') ->
    2;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedCriticalSystemProcess') ->
    3;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedWhitelistedPath') ->
    4;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedOpenProcessError') ->
    5;
'enum_value_by_symbol_CbProcessBlockedMsg.BlockResult'('NotTerminatedTerminateError') ->
    6.

'enum_symbol_by_value_CbNetConnBlockedMsg.NetconnBlockType'(1) ->
    'NetworkIsolation'.


'enum_value_by_symbol_CbNetConnBlockedMsg.NetconnBlockType'('NetworkIsolation') ->
    1.

'enum_symbol_by_value_CbNetConnBlockedMsg.ProtocolType'(6) ->
    'ProtoTcp';
'enum_symbol_by_value_CbNetConnBlockedMsg.ProtocolType'(17) ->
    'ProtoUdp'.


'enum_value_by_symbol_CbNetConnBlockedMsg.ProtocolType'('ProtoTcp') ->
    6;
'enum_value_by_symbol_CbNetConnBlockedMsg.ProtocolType'('ProtoUdp') ->
    17.

'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(1) ->
    'AlertCoreDriverUnloaded';
'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(2) ->
    'AlertNetworkDriverUnloaded';
'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(3) ->
    'AlertCbServiceStopped';
'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(4) ->
    'AlertCbProcessTerminated';
'enum_symbol_by_value_CbTamperAlertMsg.CbTamperAlertType'(5) ->
    'AlertCbCodeInjection'.


'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'('AlertCoreDriverUnloaded') ->
    1;
'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'('AlertNetworkDriverUnloaded') ->
    2;
'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'('AlertCbServiceStopped') ->
    3;
'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'('AlertCbProcessTerminated') ->
    4;
'enum_value_by_symbol_CbTamperAlertMsg.CbTamperAlertType'('AlertCbCodeInjection') ->
    5.

'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(1) ->
    actionDep;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(2) ->
    actionSehop;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(3) ->
    actionAsr;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(4) ->
    actionAslr;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(5) ->
    actionNullPage;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(6) ->
    actionHeapSpray;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(7) ->
    actionMandatoryAslr;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(8) ->
    actionEaf;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(9) ->
    actionEafPlus;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(10) ->
    actionBottomUpAslr;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(11) ->
    actionLoadLibrary;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(12) ->
    actionMemoryProtection;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(13) ->
    actionSimulateExecFlow;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(14) ->
    actionStackPivot;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(15) ->
    actionCallerChecks;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(16) ->
    actionBannedFunctions;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(17) ->
    actionDeepHooks;
'enum_symbol_by_value_CbEmetMitigationAction.CbEmetMitigationTypes'(18) ->
    actionAntiDetours.


'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDep) ->
    1;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSehop) ->
    2;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAsr) ->
    3;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAslr) ->
    4;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionNullPage) ->
    5;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionHeapSpray) ->
    6;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMandatoryAslr) ->
    7;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEaf) ->
    8;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionEafPlus) ->
    9;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBottomUpAslr) ->
    10;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionLoadLibrary) ->
    11;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionMemoryProtection) ->
    12;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionSimulateExecFlow) ->
    13;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionStackPivot) ->
    14;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionCallerChecks) ->
    15;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionBannedFunctions) ->
    16;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionDeepHooks) ->
    17;
'enum_value_by_symbol_CbEmetMitigationAction.CbEmetMitigationTypes'(actionAntiDetours) ->
    18.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.18.10".

gpb_version_as_list() ->
    [3,18,10].
